package email.code;

import java.awt.AWTException;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.math.BigInteger;
import java.net.InetAddress;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.UnknownHostException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JPopupMenu;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import com.aspose.email.Appointment;
import com.aspose.email.AppointmentLoadOptions;
import com.aspose.email.AppointmentSaveFormat;
import com.aspose.email.Attachment;
import com.aspose.email.BodyContentType;
import com.aspose.email.ContactSaveFormat;
import com.aspose.email.EWSClient;
import com.aspose.email.EmailClient;
import com.aspose.email.EmlSaveOptions;
import com.aspose.email.ExchangeFolderInfo;
import com.aspose.email.ExchangeMessageInfo;
import com.aspose.email.FileFormatVersion;
import com.aspose.email.FolderInfo;
import com.aspose.email.FolderInfoCollection;
import com.aspose.email.IConnection;
import com.aspose.email.IEWSClient;
import com.aspose.email.ImapClient;
import com.aspose.email.ImapMessageFlags;
import com.aspose.email.ImapMessageInfo;
import com.aspose.email.MailConversionOptions;
import com.aspose.email.MailMessage;
import com.aspose.email.MailMessageSaveType;
import com.aspose.email.MapiAttachment;
import com.aspose.email.MapiCalendar;
import com.aspose.email.MapiContact;
import com.aspose.email.MapiContactElectronicAddress;
import com.aspose.email.MapiContactEventPropertySet;
import com.aspose.email.MapiContactNamePropertySet;
import com.aspose.email.MapiContactPersonalInfoPropertySet;
import com.aspose.email.MapiContactPhysicalAddress;
import com.aspose.email.MapiContactPhysicalAddressPropertySet;
import com.aspose.email.MapiContactProfessionalPropertySet;
import com.aspose.email.MapiContactTelephonePropertySet;
import com.aspose.email.MapiConversionOptions;
import com.aspose.email.MapiElectronicAddress;
import com.aspose.email.MapiMessage;
import com.aspose.email.MapiMessageFlags;
import com.aspose.email.MapiTask;
import com.aspose.email.MapiTaskUsers;
import com.aspose.email.MboxrdStorageReader;
import com.aspose.email.MboxrdStorageWriter;
import com.aspose.email.MessageInfo;
import com.aspose.email.MessageInfoCollection;
import com.aspose.email.OlmFolder;
import com.aspose.email.OlmStorage;
import com.aspose.email.PersonalStorage;
import com.aspose.email.SaveOptions;
import com.aspose.email.SecurityOptions;
import com.aspose.email.StandardIpmFolder;
import com.aspose.email.system.io.FileAccess;
import com.aspose.email.system.io.FileMode;
import com.aspose.email.system.io.FileStream;
import com.opencsv.CSVWriter;
import com.toedter.calendar.JDateChooser;

import email.design.CustomTreeNode;
import it.cnr.imaa.essi.lablib.gui.checkboxtree.CheckboxTree;
import it.cnr.imaa.essi.lablib.gui.checkboxtree.DefaultCheckboxTreeCellRenderer;

@SuppressWarnings("deprecation")
public class main_multiplefile extends JFrame {

	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
	private static JTable table;
	static long count_destination;
	static JFileChooser jFileChooser;
	static File[] files;
	long maxsize = 0;
	int pstindex = 0;
	String pstfilename = "";
	JComboBox comboBox_setsize;
	JCheckBox chckbx_splitpst;
	LoadingThreadclass obTh;
	JSpinner spinner_sizespinner;
	JCheckBox chckbx_seperatepst;
	Cursor cursor = new Cursor(Cursor.HAND_CURSOR);
	JPanel panel_8;
	long foldercountcheck = 0;
	JCheckBox chckbx_convert_pdf_to_pdf;
	JLabel label_16;
	Date c1;
	JCheckBox chckbxSavePdfAttachment;
	JLabel label_pdf_to_pdf;
	String destination = "";
	Date pdf_date;
	JCheckBox chckbxSaveMboxIn;
	int ids = 1;
	double SPACE_KB = 1024;
	double SPACE_MB = 1024 * SPACE_KB;
	double SPACE_GB = 1024 * SPACE_MB;
	double SPACE_TB = 1024 * SPACE_GB;
	Boolean checkmboxpstost = true;
	JCheckBox chckbxRestoreToDefault;
	JCheckBox chckbxMaintainFolderStructure;
	JPanel panel_Contact;
	JPanel panel_Callendar;
	String fileoption;
	Boolean contatcheck;
	Boolean calendarcheck;
	private List<String> listdupliccal = new ArrayList<String>();
	private List<String> listduplictask = new ArrayList<String>();
	private List<String> listdupliccontact = new ArrayList<String>();
	JLabel lblFullName;
	JLabel lblEMailAd;
	JLabel lblPhoneNo;
	JLabel label_contactcompany;
	JLabel llabel_contactfullname;
	JLabel lblCompany;
	JLabel label_contactemail;
	String OS = System.getProperty("os.name").toLowerCase();
	JLabel label_contactfullname;
	JLabel label_contactphonenumber;
	JLabel label_contacticon;
	JLabel label_calendarstartdate;
	JLabel lblEndDate;
	JLabel label_Calendarsubject;
	JLabel label_Calendaricon;
	JTextArea textArea_contact;

	static DefaultTableModel modeli;
	static JComboBox<String> comboBox_FiletypeChooser;
	static String fileoptionm;
	File f;
	JCheckBox chckbxRemoveDuplicacy;
	JPanel panel_3_1_2;
	JLabel label_11;
	JLabel lblMakeSureYou;
	JLabel lblEnableImap_p3;
	JLabel lblTurnOffTwo_p3;
	JComboBox<String> comboBox;
	File filetem;
	JButton btn_signout_p3;
	Calendar cal;
	JLabel lbl_splitpst;
	JPanel panel_progress;
	JPanel panel_taskfilter;
	long count_eml_msg_emlx = 0;
	int portnofiletype;
	File file;
	static int countforfile = 0;
	static PersonalStorage pst;
	PersonalStorage ost;
	Main_Frame mf;
	List<String> pstfolderlist;
	ArrayList<String> pstfolderlist2;
	static List<DefaultMutableTreeNode> lists = new ArrayList<DefaultMutableTreeNode>();
	static List<String> listst = new ArrayList<String>();
	static Date mailfilterstartdate;
	static Date mailfilterenddate;
	static Date Calenderfilterstartdate;
	static Date Calenderfilterenddate;
	static Date taskfilterenddate;
	static Date taskfilterstartdate;
	JButton btn_previous_p2;
	JButton btn_remove;

	Boolean output = false;
	JLabel lbl_Domain;
	HashMap<String, List<String>> hm;

	String fa = "";
	JLabel lbl_connecting_p3;
	JLabel lbl_progressreport;
	FolderInfo info = new FolderInfo();
	FolderInfo folderInfo;
	static DefaultMutableTreeNode root;
	static DefaultTreeModel model;
	DefaultMutableTreeNode mainnode;
	static DefaultMutableTreeNode lastNode;
	static DefaultTableModel mode;
	JButton btn_select_folder;
	JButton btn_previous_p3;
	JButton btn_Destination;
	JButton btn_cancel;
	JButton btnStop;
	private JButton btn_converter_1;
	JButton btn_Next;
	JButton btnDowloadReport;
	private JButton btnDowloadReport_1;
	String domain_p3;
	String username_p3;
	String password_p3;
	String filetype;
	String calendertime;
	String parentfolder;
	String subfolderfile;
	String reportpath;
	String filepath;

	String Status = "Completed";
	String fname;

	String filetemp = "";
	String foldername = "";
	String foldername2 = "";
	String foldername3 = "";
	String foldername4 = "";
	String foldername5 = "";
	String foldername6 = "";
	String subfolder = "";
	String subfolder2 = "";
	String subfolder3 = "";
	String subfolder4 = "";
	String subfolder5 = "";
	String subfolder6 = "";
	String path = "";
	String path2;
	String path3 = "";
	String parentname;
	String path1 = "";
	String s = "";
	String parent = "";
	String[] filesfin;
	String Folder;
	String Folderuri;
	String destination_path;
	static String messageboxtitle;
	static String mailboxUri = "https://outlook.office365.com/EWS/Exchange.asmx";
	String buyurl;
	String infourl;
	String helpurl;
	MboxrdStorageWriter wr;
	OlmStorage storage;
	int filesno = 1;
	int folder = 0;
	CSVWriter writer;
	boolean connectioncheck = true;
	JPanel panel_3;
	JPanel panel_3_;
	JPanel panel_3_1;
	JPanel panel_3_1_1;
	JLabel lblLive_Chat_p3;
	JPanel panel_3_2;
	JPanel innercardlayout;
	JPanel Cardlayout;
	JTextField textField_username_p3;
	JTextField tf_Destination_Location;
	JPasswordField passwordField_p3;
	Thread th;
	static IEWSClient clientforexchange_output;
	static ImapClient clientforimap_output;
	static IConnection iconnforimap_output;
	JProgressBar progressBar_message_p3;
	JTable table_fileConvertionreport_panel4;
	JComboBox<String> comboBox_fileDestination_type;
	JButton btn_next_pane2;
	Calendar Cal;
	static Boolean demo = true;
	Boolean btnfile = false;
	Boolean btnfolder = false;
	Boolean stop = false;
	Boolean pstCalenderfoldercheck = true;
	Boolean pstContactfoldercheck = true;
	Boolean psttaskfoldercheck = true;
	Boolean foldercheck = true;
	Boolean checkconvertagain = false;
	Boolean checkdestination = true;
	Boolean Stoppreview = false;
	int ret;
	static CheckboxTree tree;
	OlmFolder folderi;
	long foldermessagecount;
	FolderInfo info1;
	JDateChooser dateChooser_calender_start;
	JDateChooser dateChooser_mail_fromdate;
	JDateChooser dateChooser_task_end_date;
	JDateChooser dateChooser_task_start_date;
	JDateChooser dateChooser_mail_tilldate;
	JDateChooser dateChooser_calendar_end;
	JButton btnremove_all;
	Boolean checky = true;
	JCheckBox chckbx_Mail_Filter;
	JCheckBox chckbx_calender_box;
	private JPanel panel_4;
	private JTable table_fileinformation;
	private JPanel attachmenttable;
	private JEditorPane editorPane;
	private JScrollPane scrollPane_3;
	private JTable table_1;
	private JPanel panel_3_1_2_1;
	private JTextField textField_domain_name_p3;
	Set<File> hashset = new LinkedHashSet<File>();
	private JLabel lblNewLabel_4;
	private JScrollPane scrollPane_4;
	JCheckBox chckbxCustomFolderName;
	JCheckBox task_box;
	private List<MailMessage> listmail = new ArrayList<MailMessage>();
	private List<MapiMessage> listmapi = new ArrayList<MapiMessage>();
	private List<ImapMessageInfo> listImapmesinfo = new ArrayList<ImapMessageInfo>();
	private List<ExchangeMessageInfo> listExchangemesingo = new ArrayList<ExchangeMessageInfo>();
	private List<MessageInfo> listPSTOSTgemesingo = new ArrayList<MessageInfo>();
	private JLabel lblLoadingPleaseWait;
	private JLabel label_10;
	private List<String> listduplicacy = new ArrayList<String>();
	String logpathm = "";
	String temppathm = "";
	private JLabel Progressbar;
	private JLabel lblPortNo;
	private JTextField tf_portNo_p3;
	private JPanel panel;
	private JPanel panel_5;
	private JLabel lblnamingconvention;
	private JPanel panel_6;
	private JTextField textField_customfolder;
	private JLabel label_Calendarenddate;
	private JLabel lblNotes;
	private JPanel panel_7;
	private JLabel lblNewLabel_5;
	private JLabel lblemailAddress;
	String version;
	private JLabel lblTotalMessageCount;
	private JCheckBox chckbxSaveInSame;
	private JLabel label_12;
	private JLabel label_13;
	private JLabel label_14;
	private JLabel label_15;
	private JCheckBox chckbxMigrateOrBackup;
	private JLabel label_17;
	private JButton btnActivate;

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public main_multiplefile(JFrame parent1, Boolean demo, String messageboxtitle) {
		super();
		mf = (Main_Frame) parent1;
		main_multiplefile.demo = demo;
		main_multiplefile.messageboxtitle = All_Data.messageboxtitle;

		fileoptionm = Main_Frame.fileoption;
		this.fileoption = Main_Frame.fileoption;
		logpathm = mf.logpath;
		version = mf.version;
		temppathm = mf.temppath;
		calendertime = Main_Frame.calendertime;
		buyurl = mf.buyurl;
		infourl = mf.infourl;
		helpurl = mf.helpurl;

		addWindowListener(new WindowAdapter() {

			public void windowClosing(WindowEvent arg0) {

				if (!SystemTray.isSupported()) {
					String warn = "Do you want to close the Application?";
					int ans = JOptionPane.showConfirmDialog(mf, warn, messageboxtitle, JOptionPane.YES_NO_OPTION,
							JOptionPane.INFORMATION_MESSAGE,
							new ImageIcon(Main_Frame.class.getResource("/about-icon-2.png")));
					if (ans == JOptionPane.YES_OPTION) {

						openBrowser(infourl);
						System.exit(0);
					}

				}

				SystemTray systemTray = SystemTray.getSystemTray();

				PopupMenu trayPopupMenu = new PopupMenu();
				MenuItem action = new MenuItem("Show");
				action.addActionListener(new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent e) {

						setVisible(true);
					}
				});
				trayPopupMenu.add(action);

				MenuItem close = new MenuItem("Exit");
				close.addActionListener(new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent e) {

						String warn = "Do you want to close the Application?";
						int ans = JOptionPane.showConfirmDialog(mf, warn, messageboxtitle, JOptionPane.YES_NO_OPTION,
								JOptionPane.INFORMATION_MESSAGE,
								new ImageIcon(Main_Frame.class.getResource("/about-icon-2.png")));
						if (ans == JOptionPane.YES_OPTION) {

							if (demo) {

								openBrowser(infourl);

							}

							System.exit(0);
						}

					}
				});
				trayPopupMenu.add(close);

				TrayIcon trayIcon = new TrayIcon(
						Toolkit.getDefaultToolkit().getImage(Main_Frame.class.getResource("/128x128.png")),
						messageboxtitle, trayPopupMenu);
				trayIcon.setImageAutoSize(true);

				try {

					TrayIcon[] icons = (TrayIcon[]) SystemTray.getSystemTray().getTrayIcons();

					boolean check = false;
					for (int i = 0; i < icons.length; i++) {

						if (icons[i].getImage().equals(trayIcon.getImage())) {
							check = true;
							break;
						}
					}

					if (!check) {
						systemTray.add(trayIcon);
						trayIcon.displayMessage("Tool Added in Tray ", " ", TrayIcon.MessageType.NONE);
					} else {
						System.out.println("tool already in tray");
					}
				} catch (AWTException awtException) {
					awtException.printStackTrace();
				}
				System.out.println("end of main");
				setVisible(false);

			}
		});

		setIconImage(Toolkit.getDefaultToolkit().getImage(Main_Frame.class.getResource("/128x128.png")));

		if (demo) {
			String center = messageboxtitle;
			setTitle(center);
		} else {
			String center = messageboxtitle;
			setTitle(center);
		}

		setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		setLocationRelativeTo(null);
		setResizable(false);
		setBounds(100, 100, 1081, 718);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

//		JMenuBar menuBar = mf.menuBar;
//		setJMenuBar(menuBar);

		Cardlayout = new JPanel();
		Cardlayout.setBackground(Color.LIGHT_GRAY);
		Cardlayout.setBounds(0, 71, 1075, 618);
		contentPane.add(Cardlayout);
		Cardlayout.setLayout(new CardLayout(0, 0));

		JPanel panel_1 = new JPanel();
		panel_1.setBackground(Color.WHITE);
		Cardlayout.add(panel_1, "panel_1");
		panel_1.setLayout(null);

		JButton btn_info = new JButton("");
		btn_info.setToolTipText("click here for more information");
		btn_info.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				AboutDialog ab;
				String de = Main_Frame.tital;

				if (demo) {
					ab = new AboutDialog(mf, true, "demo");

				} else {
					// ab = new AboutDialog(mf, true, "full");
					ab = new AboutDialog(mf, true, de.toString());

				}

				ab.setLocationRelativeTo(mf);
				ab.setVisible(true);

			}
		});
		btn_info.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				btn_info.setIcon(new ImageIcon(Main_Frame.class.getResource("/info-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				btn_info.setIcon(new ImageIcon(Main_Frame.class.getResource("/info-btn.png")));
			}
		});

		JButton btn_buy = new JButton("");
		btn_buy.setToolTipText("Click here to Purchase the software");
		btn_buy.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				openBrowser(buyurl);

			}
		});
		if (demo) {
			btn_buy.setVisible(true);
		} else {
			btn_buy.setVisible(false);
		}

		JButton btn_help = new JButton("");
		btn_help.setToolTipText("Click here for software guide");
		btn_help.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				openBrowser(helpurl);
			}
		});
		btn_help.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				btn_help.setIcon(new ImageIcon(Main_Frame.class.getResource("/about-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				btn_help.setIcon(new ImageIcon(Main_Frame.class.getResource("/about-btn.png")));
			}
		});

		btn_help.setIcon(new ImageIcon(Main_Frame.class.getResource("/about-btn.png")));

		btn_help.setRolloverEnabled(false);
		btn_help.setRequestFocusEnabled(false);
		btn_help.setOpaque(false);
		btn_help.setFocusable(false);
		btn_help.setFocusTraversalKeysEnabled(false);
		btn_help.setFocusPainted(false);
		btn_help.setDefaultCapable(false);
		btn_help.setContentAreaFilled(false);
		btn_help.setBorderPainted(false);
		btn_help.setBounds(962, 17, 32, 32);
		contentPane.add(btn_help);
		btn_buy.setBounds(930, 17, 32, 32);
		contentPane.add(btn_buy);

		btn_buy.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				btn_buy.setIcon(new ImageIcon(Main_Frame.class.getResource("/buy-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				btn_buy.setIcon(new ImageIcon(Main_Frame.class.getResource("/buy-btn.png")));
			}
		});

		btn_buy.setIcon(new ImageIcon(Main_Frame.class.getResource("/buy-btn.png")));

		btn_buy.setOpaque(false);
		btn_buy.setRolloverEnabled(false);
		btn_buy.setRequestFocusEnabled(false);
		btn_buy.setFocusTraversalKeysEnabled(false);
		btn_buy.setFocusable(false);
		btn_buy.setFocusPainted(false);
		btn_buy.setDefaultCapable(false);
		btn_buy.setContentAreaFilled(false);
		btn_buy.setBorderPainted(false);

		btn_info.setIcon(new ImageIcon(Main_Frame.class.getResource("/info-btn.png")));
		btn_info.setRolloverEnabled(false);
		btn_info.setRequestFocusEnabled(false);
		btn_info.setOpaque(false);
		btn_info.setFocusable(false);
		btn_info.setFocusTraversalKeysEnabled(false);
		btn_info.setFocusPainted(false);
		btn_info.setDefaultCapable(false);
		btn_info.setContentAreaFilled(false);
		btn_info.setBorderPainted(false);
		btn_info.setBounds(994, 17, 32, 32);
		contentPane.add(btn_info);

		btn_Next = new JButton("");
		btn_Next.setVisible(false);
		btn_Next.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				btn_Next.setIcon(new ImageIcon(Main_Frame.class.getResource("/next-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent arg0) {
				btn_Next.setIcon(new ImageIcon(Main_Frame.class.getResource("/next-btn.png")));
			}
		});

		btn_Next.setIcon(new ImageIcon(Main_Frame.class.getResource("/next-btn.png")));

		btn_Next.setRolloverEnabled(false);
		btn_Next.setRequestFocusEnabled(false);
		btn_Next.setOpaque(false);
		btn_Next.setFocusable(false);
		btn_Next.setFocusTraversalKeysEnabled(false);
		btn_Next.setFocusPainted(false);
		btn_Next.setDefaultCapable(false);
		btn_Next.setContentAreaFilled(false);
		btn_Next.setBorderPainted(false);
		btn_Next.setBounds(930, 557, 123, 38);
		panel_1.add(btn_Next);
		btn_Next.setEnabled(false);
		btn_Next.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				lists.clear();
				listst.clear();
				Object[] s = new Object[table.getRowCount()];
				filesfin = new String[table.getRowCount()];

				for (int i = 0; i < table.getRowCount(); i++) {
					s[i] = table.getValueAt(i, 2);
				}

				for (int i = 0; i < s.length; i++) {

					filesfin[i] = (String) s[i];

				}
				parent = files[0].getParent();
				mf.logger = mf.logFile();
				mf.logger.info("Start Time : " + calendertime + System.lineSeparator() + "File Type : " + fileoptionm
						+ "                         " + "File filetype" + "    " + fileoptionm + System.lineSeparator()
						+ "======================================================================");

				SwingWorker sw1 = new SwingWorker() {
					@Override
					protected Object doInBackground() {
						obTh = new LoadingThreadclass(mf);
						obTh.start();
						InetAddress addr;
						String hostName = "";
						try {
							addr = InetAddress.getLocalHost();
							hostName = addr.getHostName();

						} catch (UnknownHostException e1) {

							e1.printStackTrace();
						}

						model = (DefaultTreeModel) tree.getModel();

						root = new DefaultMutableTreeNode("<html><b>" + hostName);

						model.setRoot(root);

						mainnode = new DefaultMutableTreeNode("<html><b>" + fileoptionm);

						root.add(mainnode);

						CardLayout card = (CardLayout) Cardlayout.getLayout();
						card.show(Cardlayout, "panel_2");
						foldercountcheck = 0;
						for (int i = 0; i < filesfin.length; i++) {

							String filetype = table.getValueAt(i, 3).toString();
							filetype = filetype.replace("<html><b>", "");
							if (filetype.equalsIgnoreCase("file")) {

								filepath = filesfin[i].replace("<html><b>", "");
								path2 = filepath;

								if (fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")
										|| fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")) {

									try {
										String extension = getFileExtension(new File(path2));
										if (fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")) {
											if (extension.equalsIgnoreCase("pst")) {

												try {
													readAnOST_PstFile();
												} catch (Exception e) {
													i--;
													mainnode.removeAllChildren();
													continue;
												}
											}

										} else if (fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")) {

											if (extension.equalsIgnoreCase("ost")) {

												try {
													readAnOST_PstFile();
												} catch (Exception e) {
													i--;
													mainnode.removeAllChildren();
													continue;
												}
											}
										}

									} catch (Exception e1) {

										e1.printStackTrace();
									}

								} else if (fileoptionm.equalsIgnoreCase("MBOX")) {
									try {
										readMboxFile();
									} catch (Exception e) {
										i--;
										mainnode.removeAllChildren();
										continue;
									}

								} else if (fileoptionm.equalsIgnoreCase("DBX")) {
									try {
										readMboxFile();
									} catch (Exception e) {
										i--;
										mainnode.removeAllChildren();
										continue;
									}
								} else if (fileoptionm.equalsIgnoreCase("OLM File (.olm)")) {
									try {
										readolmFile();
									} catch (Exception e) {
										i--;
										mainnode.removeAllChildren();
										continue;
									}
								} else {
									String extension = getFileExtension(new File(path2));
									if (fileoptionm.equalsIgnoreCase("EML File (.eml)")) {
										if (extension.equals("eml")) {
											try {
												readmailFile();
											} catch (Exception e) {
												i--;
												mainnode.removeAllChildren();
												continue;
											}

										}
									} else if (fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")) {
										if (extension.equalsIgnoreCase("emlx")) {

											try {
												readmailFile();
											} catch (Exception e) {
												i--;
												mainnode.removeAllChildren();
												continue;
											}

										}
									} else if (fileoptionm.equalsIgnoreCase("Message File (.msg)")) {
										if (extension.equalsIgnoreCase("msg")) {

											try {
												readmailFile();
											} catch (Exception e) {
												i--;
												mainnode.removeAllChildren();
												continue;
											}
										}
									} else if (fileoptionm.equalsIgnoreCase("Maildir")) {

										try {
											readmailFile();
										} catch (Exception e) {
											i--;
											mainnode.removeAllChildren();
											continue;
										}

									}

								}
							} else {

								if (fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")
										|| fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")) {

									try {

										read_PSTOST_folder(new File(filesfin[i].replace("<html><b>", "")));

									} catch (Exception e1) {

										i--;
										mainnode.removeAllChildren();
										continue;
									}

								} else if (fileoptionm.equalsIgnoreCase("MBOX")) {
									try {

										read_mbox_folder(new File(filesfin[i].replace("<html><b>", "")));

									} catch (Exception e1) {

										i--;
										mainnode.removeAllChildren();
										continue;
									}

								} else if (fileoptionm.equalsIgnoreCase("OLM File (.olm)")) {

									try {

										read_olm_folder(new File(filesfin[i].replace("<html><b>", "")));

									} catch (Exception e1) {

										i--;
										mainnode.removeAllChildren();
										continue;
									}

								} else {

									try {
										File fol = new File(filesfin[i].replace("<html><b>", ""));
										String s = filepath(fol);
										CustomTreeNode main = new CustomTreeNode("<html><b>" + s);
										mainnode.add(main);

										testemldd(fol, main);
									} catch (Exception e1) {
										i--;
										mainnode.removeAllChildren();
										continue;
									}

								}

							}
						}
						return null;
					}

					@Override
					protected void done() {
//
						Icon open = new ImageIcon(backup.class.getResource("/Open-folder-accept-icon.png"));
						Icon close = new ImageIcon(backup.class.getResource("/closed-folder-add-icon.png"));
						Icon Ram = new ImageIcon(backup.class.getResource("/leaf-icon.png"));
						DefaultCheckboxTreeCellRenderer render = (DefaultCheckboxTreeCellRenderer) tree
								.getCellRenderer();
						render.setClosedIcon(close);
						render.setOpenIcon(open);
						render.setLeafIcon(Ram);

						tree.expandRow(0);
						tree.expandAll();
						obTh.close();
						if (fileoptionm.equalsIgnoreCase("EML File (.eml)")
								|| fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")
								|| fileoptionm.equalsIgnoreCase("Message File (.msg)")
								|| fileoptionm.equalsIgnoreCase("Maildir")) {

							comboBox.addItem("Original File Name");

						}

						if (foldercountcheck == 0) {
							JOptionPane.showMessageDialog(mf, "No " + fileoptionm + " file Can be found",
									messageboxtitle, JOptionPane.INFORMATION_MESSAGE,
									new ImageIcon(Main_Frame.class.getResource("/information.png")));
							CardLayout card = (CardLayout) Cardlayout.getLayout();
							card.show(Cardlayout, "panel_1");
						}
					}
				};

				sw1.execute();

			}

		});
		btn_Next.setFont(new Font("Tahoma", Font.BOLD, 12));

		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(217, 0, 858, 550);
		panel_1.add(scrollPane);

		table = new JTable() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			public boolean isCellEditable(int row, int column) {

				return false;
			}
		};
		scrollPane.setViewportView(table);
		table.getTableHeader().setReorderingAllowed(false);
		table.setModel(new DefaultTableModel(new Object[][] {}, new String[] { "<html><b>S.No", "<html><b> Name",
				"<html><b>File Path", "<html><b>File Type", "<html><b>Size" }));
		table.getColumnModel().getColumn(0).setPreferredWidth(35);
		table.getColumnModel().getColumn(1).setPreferredWidth(57);
		table.getColumnModel().getColumn(2).setPreferredWidth(350);
		table.getColumnModel().getColumn(3).setPreferredWidth(20);
		table.getColumnModel().getColumn(4).setPreferredWidth(40);

		JButton btn_previous = new JButton("");
		btn_previous.setToolTipText("Click here to go back");
		btn_previous.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				btn_previous.setIcon(new ImageIcon(Main_Frame.class.getResource("/previous-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				btn_previous.setIcon(new ImageIcon(Main_Frame.class.getResource("/previous-btn.png")));
			}
		});
		btn_previous.setIcon(new ImageIcon(Main_Frame.class.getResource("/previous-btn.png")));
		btn_previous.setRolloverEnabled(false);
		btn_previous.setRequestFocusEnabled(false);
		btn_previous.setOpaque(false);
		btn_previous.setFocusable(false);
		btn_previous.setFocusTraversalKeysEnabled(false);
		btn_previous.setFocusPainted(false);
		btn_previous.setDefaultCapable(false);
		btn_previous.setContentAreaFilled(false);
		btn_previous.setBorderPainted(false);
		btn_previous.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				Main_Frame main_m = new Main_Frame(demo, Main_Frame.versiontype);
				main_m.setVisible(true);
				main_m.setLocationRelativeTo(null);
				main_m.setResizable(false);
				main_m.rdbtnSingleFile.setSelected(true);
				dispose();
			}
		});
		btn_previous.setFont(new Font("Tahoma", Font.BOLD, 12));
		btn_previous.setBounds(797, 557, 123, 38);
		panel_1.add(btn_previous);

		lblNewLabel_4 = new JLabel("");
		lblNewLabel_4.setIcon(new ImageIcon(Main_Frame.class.getResource("/bottom.png")));
		lblNewLabel_4.setBackground(Color.WHITE);
		lblNewLabel_4.setBounds(0, 550, 1075, 68);
		panel_1.add(lblNewLabel_4);

		panel_7 = new JPanel();
		panel_7.setBackground(Color.WHITE);
		panel_7.setBorder(new LineBorder(new Color(0, 0, 0)));
		panel_7.setBounds(0, 0, 216, 550);
		panel_1.add(panel_7);
		panel_7.setLayout(null);

		JButton btn_ChoseFile = new JButton("");
		btn_ChoseFile.setToolTipText("click here to select file's");
		btn_ChoseFile.setBounds(37, 62, 118, 39);
		panel_7.add(btn_ChoseFile);
		btn_ChoseFile.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				btn_ChoseFile.setIcon(new ImageIcon(Main_Frame.class.getResource("/select-files-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				btn_ChoseFile.setIcon(new ImageIcon(Main_Frame.class.getResource("/select-files-btn.png")));
			}
		});

		btn_ChoseFile.setIcon(new ImageIcon(Main_Frame.class.getResource("/select-files-btn.png")));
		btn_ChoseFile.setRolloverEnabled(false);
		btn_ChoseFile.setRequestFocusEnabled(false);
		btn_ChoseFile.setOpaque(false);
		btn_ChoseFile.setFocusable(false);
		btn_ChoseFile.setFocusTraversalKeysEnabled(false);
		btn_ChoseFile.setFocusPainted(false);
		btn_ChoseFile.setDefaultCapable(false);
		btn_ChoseFile.setContentAreaFilled(false);
		btn_ChoseFile.setBorderPainted(false);
		btn_ChoseFile.setBackground(Color.WHITE);
		btn_ChoseFile.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				try {
					filter_file();
					btnfile = true;
					btn_Next.setEnabled(true);
					btn_Next.setVisible(true);
					btn_Next.setToolTipText("click here to go next page");
					;
					btn_remove.setEnabled(true);
					btn_remove.setToolTipText("click here to remove ");
					btnremove_all.setEnabled(true);
					btnremove_all.setToolTipText("click here to remove all");

					if (countforfile == 0) {

						btnfile = false;
						btn_Next.setEnabled(false);
						btn_Next.setVisible(false);
						btn_Next.setToolTipText(null);
						btn_remove.setEnabled(false);
						btnremove_all.setEnabled(false);
					}
				} catch (Exception e) {

				}

			}
		});

		btn_ChoseFile.setFont(new Font("Tahoma", Font.BOLD, 12));

		btn_select_folder = new JButton("");
		btn_select_folder.setToolTipText("click here to select folder");
		btn_select_folder.setBounds(37, 218, 118, 39);
		panel_7.add(btn_select_folder);
		btn_select_folder.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				btn_select_folder.setIcon(new ImageIcon(Main_Frame.class.getResource("/se;ect-folder-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				btn_select_folder.setIcon(new ImageIcon(Main_Frame.class.getResource("/se;ect-folder-btn.png")));
			}
		});

		btn_select_folder.setIcon(new ImageIcon(Main_Frame.class.getResource("/se;ect-folder-btn.png")));
		btn_select_folder.setOpaque(false);
		btn_select_folder.setFocusable(false);
		btn_select_folder.setFocusTraversalKeysEnabled(false);
		btn_select_folder.setFocusPainted(false);
		btn_select_folder.setDefaultCapable(false);
		btn_select_folder.setContentAreaFilled(false);
		btn_select_folder.setBorderPainted(false);
		btn_select_folder.setRolloverEnabled(false);
		btn_select_folder.setRequestFocusEnabled(false);
		btn_select_folder.setFont(new Font("Tahoma", Font.BOLD, 12));

		btn_remove = new JButton("");
		btn_remove.setToolTipText(null);
		btn_remove.setBounds(32, 345, 123, 38);
		panel_7.add(btn_remove);
		btn_remove.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				btn_remove.setIcon(new ImageIcon(Main_Frame.class.getResource("/remove-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				btn_remove.setIcon(new ImageIcon(Main_Frame.class.getResource("/remove-btn.png")));
			}
		});

		btn_remove.setIcon(new ImageIcon(Main_Frame.class.getResource("/remove-btn.png")));
		btn_remove.setRolloverEnabled(false);
		btn_remove.setRequestFocusEnabled(false);
		btn_remove.setOpaque(false);
		btn_remove.setFocusable(false);
		btn_remove.setFocusTraversalKeysEnabled(false);
		btn_remove.setFocusPainted(false);
		btn_remove.setDefaultCapable(false);
		btn_remove.setContentAreaFilled(false);
		btn_remove.setBorderPainted(false);
		btn_remove.setEnabled(false);
		btn_remove.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				try {
					DefaultTableModel model = (DefaultTableModel) table.getModel();
					int selected = table.getSelectedRow();

					hashset.remove(new File(table.getValueAt(selected, 2).toString().replace("<html><b>", "")));

					model.removeRow(selected);
					countforfile--;
					filesno--;
					if (countforfile == 0) {

						btn_Next.setEnabled(false);
						btn_Next.setVisible(false);
						btn_remove.setEnabled(false);
						btnremove_all.setEnabled(false);
					}
				} catch (Exception e) {
					JOptionPane.showMessageDialog(mf, "Please select  file or Folder which you want to remove",
							messageboxtitle, JOptionPane.ERROR_MESSAGE,
							new ImageIcon(Main_Frame.class.getResource("/information.png")));
				}

			}
		});
		btn_remove.setFont(new Font("Tahoma", Font.BOLD, 12));

		btnremove_all = new JButton("");
		btnremove_all.setToolTipText(null);
		btnremove_all.setBounds(32, 471, 118, 39);
		panel_7.add(btnremove_all);
		btnremove_all.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				btnremove_all.setIcon(new ImageIcon(Main_Frame.class.getResource("/remove-all-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				btnremove_all.setIcon(new ImageIcon(Main_Frame.class.getResource("/remove-all-btn.png")));
			}
		});

		btnremove_all.setIcon(new ImageIcon(Main_Frame.class.getResource("/remove-all-btn.png")));
		btnremove_all.setRolloverEnabled(false);
		btnremove_all.setRequestFocusEnabled(false);
		btnremove_all.setOpaque(false);
		btnremove_all.setFocusable(false);
		btnremove_all.setFocusTraversalKeysEnabled(false);
		btnremove_all.setFocusPainted(false);
		btnremove_all.setDefaultCapable(false);
		btnremove_all.setContentAreaFilled(false);
		btnremove_all.setBorderPainted(false);
		btnremove_all.setEnabled(false);
		btnremove_all.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				DefaultTableModel model = (DefaultTableModel) table.getModel();
				while (model.getRowCount() > 0) {

					for (int i = 0; i < model.getRowCount(); ++i) {

						model.removeRow(i);
					}
				}
				hashset.clear();
				filesno = 1;
				countforfile = 0;
				btn_Next.setEnabled(false);
				btn_Next.setVisible(false);
				btn_remove.setEnabled(false);
				btnremove_all.setEnabled(false);

			}

		});
		btnremove_all.setFont(new Font("Tahoma", Font.BOLD, 12));

		btn_select_folder.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent arg0) {
				files = null;
				btnfolder = true;

				btn_Next.setVisible(true);
				btn_Next.setEnabled(true);
				btn_Next.setToolTipText("click here to go next page");

				btn_remove.setEnabled(true);
				btn_remove.setToolTipText("click here to remove");
				btnremove_all.setEnabled(true);
				btnremove_all.setToolTipText("click here to removed all");

				jFileChooser = new JFileChooser(System.getProperty("user.home") + File.separator + "Desktop");

				jFileChooser.setMultiSelectionEnabled(true);

				jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

				jFileChooser.showOpenDialog(main_multiplefile.this);

				files = jFileChooser.getSelectedFiles();

				for (int i = 0; i < files.length; i++) {
					hashset.add(files[i]);
				}

				DefaultTableModel model = (DefaultTableModel) table.getModel();

				while (model.getRowCount() > 0) {

					for (int i = 0; i < model.getRowCount(); ++i) {

						model.removeRow(i);
						filesno--;
					}
				}

				Iterator<File> itr = hashset.iterator();
				while (itr.hasNext()) {
					modeli = (DefaultTableModel) table.getModel();
					File fo = itr.next();

					String filet = "";
					if (fo.isFile()) {
						filet = "File";
					} else {
						filet = "Folder";
					}
					long sizeInBytes = fo.length();
					modeli.addRow(new Object[] { "<html><b>" + filesno, "<html><b>" + fo.getName(),
							"<html><b>" + fo.getAbsolutePath(), "<html><b>" + filet,
							"<html><b>" + bytes2String(sizeInBytes) });
					filesno++;
					countforfile++;
				}
				if (countforfile == 0) {

					btn_Next.setEnabled(false);
					btn_Next.setVisible(false);
					btn_Next.setToolTipText(null);
					btn_remove.setToolTipText(null);
					btn_remove.setEnabled(false);
					btnremove_all.setToolTipText(null);
					btnremove_all.setEnabled(false);
				}

			}

		});

		JPanel panel_2 = new JPanel();
		panel_2.setBackground(Color.WHITE);
		Cardlayout.add(panel_2, "panel_2");
		panel_2.setLayout(null);

		JButton btnViewer = new JButton("");
		btnViewer.setToolTipText("click here to Preview");
		btnViewer.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				btnViewer.setIcon(new ImageIcon(Main_Frame.class.getResource("/preview-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent arg0) {
				btnViewer.setIcon(new ImageIcon(Main_Frame.class.getResource("/preview-btn.png")));
			}
		});

		btnViewer.setIcon(new ImageIcon(Main_Frame.class.getResource("/preview-btn.png")));
		btnViewer.setRolloverEnabled(false);
		btnViewer.setRequestFocusEnabled(false);
		btnViewer.setOpaque(false);
		btnViewer.setFocusable(false);
		btnViewer.setFocusTraversalKeysEnabled(false);
		btnViewer.setFocusPainted(false);
		btnViewer.setDefaultCapable(false);
		btnViewer.setContentAreaFilled(false);
		btnViewer.setBorderPainted(false);
		btnViewer.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (contatcheck) {

					CardLayout card1 = (CardLayout) innercardlayout.getLayout();
					card1.show(innercardlayout, "panel_Contact");

				} else if (calendarcheck) {
					CardLayout card1 = (CardLayout) innercardlayout.getLayout();
					card1.show(innercardlayout, "panel_Callendar");
				} else {
					CardLayout card = (CardLayout) innercardlayout.getLayout();

					card.show(innercardlayout, "viewer");
				}

			}
		});

		label_10 = new JLabel("");
		label_10.setRequestFocusEnabled(false);
		label_10.setFocusable(false);
		label_10.setFocusTraversalKeysEnabled(false);
		label_10.setIcon(new ImageIcon(Main_Frame.class.getResource("/progress-bar.gif")));
		label_10.setBounds(10, 569, 681, 30);
		label_10.setVisible(false);
		panel_2.add(label_10);
		btnViewer.setFont(new Font("Tahoma", Font.BOLD, 13));
		btnViewer.setBounds(625, 32, 109, 30);
		panel_2.add(btnViewer);

		JButton btnAttachment = new JButton("");
		btnAttachment.setToolTipText("click here to show Attachment");
		btnAttachment.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				btnAttachment.setIcon(new ImageIcon(Main_Frame.class.getResource("/attachment-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent arg0) {
				btnAttachment.setIcon(new ImageIcon(Main_Frame.class.getResource("/attachment-btn.png")));
			}
		});

		btnAttachment.setIcon(new ImageIcon(Main_Frame.class.getResource("/attachment-btn.png")));
		btnAttachment.setDefaultCapable(false);
		btnAttachment.setFocusTraversalKeysEnabled(false);
		btnAttachment.setRolloverEnabled(false);
		btnAttachment.setRequestFocusEnabled(false);
		btnAttachment.setOpaque(false);
		btnAttachment.setFocusable(false);
		btnAttachment.setFocusPainted(false);
		btnAttachment.setContentAreaFilled(false);
		btnAttachment.setBorderPainted(false);
		btnAttachment.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				CardLayout card = (CardLayout) innercardlayout.getLayout();
				card.show(innercardlayout, "attachmenttable");

			}
		});
		btnAttachment.setFont(new Font("Tahoma", Font.BOLD, 13));
		btnAttachment.setBounds(733, 32, 116, 30);
		panel_2.add(btnAttachment);

		lblLoadingPleaseWait = new JLabel("Please Wait while data loding ");
		lblLoadingPleaseWait.setFont(new Font("Tahoma", Font.BOLD | Font.ITALIC, 9));
		lblLoadingPleaseWait.setVisible(false);

		btn_cancel = new JButton("");
		btn_cancel.setRolloverEnabled(false);
		btn_cancel.setRequestFocusEnabled(false);
		btn_cancel.setOpaque(false);
		btn_cancel.setFocusable(false);
		btn_cancel.setFocusPainted(false);
		btn_cancel.setFocusTraversalKeysEnabled(false);
		btn_cancel.setContentAreaFilled(false);
		btn_cancel.setDefaultCapable(false);
		btn_cancel.setBorderPainted(false);
		btn_cancel.setVisible(false);
		btn_cancel.setEnabled(false);
		btn_cancel.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				btn_cancel.setIcon(new ImageIcon(Main_Frame.class.getResource("/stop-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				btn_cancel.setIcon(new ImageIcon(Main_Frame.class.getResource("/stop-btn.png")));
			}
		});

		btn_cancel.setIcon(new ImageIcon(Main_Frame.class.getResource("/stop-btn.png")));
		btn_cancel.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				String warn = "Do you want to stop the process?";
				int ans = JOptionPane.showConfirmDialog(main_multiplefile.this, warn, messageboxtitle,
						JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE,
						new ImageIcon(Main_Frame.class.getResource("/about-icon-2.png")));
				if (ans == JOptionPane.YES_OPTION) {
					Stoppreview = true;
					lblLoadingPleaseWait.setVisible(false);
					label_10.setVisible(false);
					btnAttachment.setEnabled(true);
					table_fileinformation.setEnabled(true);
					btnViewer.setEnabled(true);
					btn_next_pane2.setEnabled(true);
					btn_previous_p2.setEnabled(true);
				}

			}
		});
		btn_cancel.setBounds(703, 563, 116, 39);
		panel_2.add(btn_cancel);
		lblLoadingPleaseWait.setBounds(10, 554, 158, 23);
		panel_2.add(lblLoadingPleaseWait);

		JScrollPane scrollPane_1 = new JScrollPane();
		scrollPane_1.setBounds(0, 0, 295, 547);
		panel_2.add(scrollPane_1);

		JLabel lblNew_setemail = new JLabel("");
		lblNew_setemail.setBounds(668, 7, 180, 20);
		panel_2.add(lblNew_setemail);

		JLabel lblNew_setsubject = new JLabel("");
		lblNew_setsubject.setBounds(917, 39, 158, 16);
		panel_2.add(lblNew_setsubject);

		JLabel label_date = new JLabel("");
		label_date.setBounds(894, 7, 171, 16);
		panel_2.add(label_date);

		tree = new CheckboxTree();
		scrollPane_1.setViewportView(tree);
		tree.addMouseListener(new MouseAdapter() {

			public void mouseClicked(MouseEvent arg0) {
				tree.setToolTipText("Please double click to open the folder");
				th = new Thread(new Runnable() {

					public void run() {

						try {
							// table_fileinformation.setEnabled(false);
							lblLoadingPleaseWait.setVisible(true);
							label_10.setVisible(true);
							listmail.clear();
							listmapi.clear();
							btn_cancel.setVisible(true);
							btn_cancel.setEnabled(true);
							listExchangemesingo.clear();
							listImapmesinfo.clear();
							Stoppreview = false;
							listPSTOSTgemesingo.clear();
							btnAttachment.setEnabled(false);
							btnViewer.setEnabled(false);
							btn_next_pane2.setEnabled(false);
							btn_previous_p2.setEnabled(false);
							lblTotalMessageCount.setText("Total Message Count :");
							CardLayout card = (CardLayout) innercardlayout.getLayout();

							card.show(innercardlayout, "viewer");
							editorPane.setText("");
							if (arg0.getClickCount() == 2) {
								TreePath tp = tree.getSelectionPath();

								DefaultMutableTreeNode node = (DefaultMutableTreeNode) tp.getLastPathComponent();

								foldername = node.getUserObject().toString();

								DefaultTableModel model = (DefaultTableModel) table_fileinformation.getModel();

								while (model.getRowCount() > 0) {

									for (int i = 0; i < model.getRowCount(); ++i) {

										model.removeRow(i);
									}
								}

								DefaultTableModel model1 = (DefaultTableModel) table_1.getModel();

								while (model1.getRowCount() > 0) {

									for (int i = 0; i < model1.getRowCount(); ++i) {

										model1.removeRow(i);
									}
								}
								editorPane.setText("");

								lblNew_setemail.setText("");

								lblNew_setsubject.setText("");

								label_date.setText("");

								if (fileoptionm.equalsIgnoreCase("MBOX")) {

									path = ((CustomTreeNode) tp.getPathComponent(3)).filepath;

									if (node.isLeaf()) {
										fileInformation_on_mbox();
									}

								} else if (fileoptionm.equalsIgnoreCase("OLM File (.olm)")) {
									foldername = "";
									TreeNode[] folder = node.getPath();

									for (int i = 2; i < folder.length; i++) {
										String s = folder[i].toString().trim();

										// System.out.println(s);
										s = s.replace("<html><b>", "");
										if (i == 2) {
											path2 = ((CustomTreeNode) tp.getPathComponent(i)).filepath;
										} else if (i == 3) {
											foldername = s;

										} else if (i > 3) {
											foldername = foldername + File.separator + s;
										}

									}

									if (!foldername.equalsIgnoreCase(root.toString())) {
										fileinformation_olm();
									}

								} else if (fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")
										|| fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")) {
									foldername = "";

									TreeNode[] folder = node.getPath();

									for (int i = 2; i < folder.length; i++) {
										String s = folder[i].toString().trim();

										// System.out.println(s);
										s = s.replace("<html><b>", "");
										if (i == 2) {
											path2 = ((CustomTreeNode) tp.getPathComponent(i)).filepath;
										} else if (i == 3) {
											foldername = s;

										} else if (i > 3) {
											foldername = foldername + File.separator + s;
										}

									}
									if (!foldername.equalsIgnoreCase(root.toString())) {

										try {
											pst = PersonalStorage.fromFile(path2);
											fileInhformation_Ost_Pst();
										} catch (Exception e) {
											JOptionPane.showMessageDialog(mf,
													"File is Currupted  Please Choose another file  " + filepath,
													messageboxtitle, JOptionPane.INFORMATION_MESSAGE,
													new ImageIcon(Main_Frame.class.getResource("/information.png")));

										}

									}

								} else {

									path2 = ((CustomTreeNode) tp.getLastPathComponent()).filepath;

									file = new File(path2);
									ids = 1;
									if (file.isFile()) {
										fileInformation_on_mail();
									} else if (file.isDirectory()) {
										readewwds(file);
									}

								}
							}
							lblLoadingPleaseWait.setVisible(false);
							label_10.setVisible(false);
							btn_cancel.setVisible(false);
							btn_cancel.setEnabled(false);
							btnAttachment.setEnabled(true);
							table_fileinformation.setEnabled(true);
							btnViewer.setEnabled(true);
							btn_next_pane2.setEnabled(true);
							btn_previous_p2.setEnabled(true);

						} catch (Exception e) {

						} finally {

						}

					}

				});
				th.start();

			}
		});

		tree.setModel(new DefaultTreeModel(new DefaultMutableTreeNode("root") {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			{

			}
		}));

		btn_next_pane2 = new JButton("");
		btn_next_pane2.setToolTipText("Cilck here to go next page");
		btn_next_pane2.setDefaultCapable(false);
		btn_next_pane2.setContentAreaFilled(false);
		btn_next_pane2.setBorderPainted(false);
		btn_next_pane2.setRequestFocusEnabled(false);
		btn_next_pane2.setOpaque(false);
		btn_next_pane2.setRolloverEnabled(false);
		btn_next_pane2.setFocusable(false);
		btn_next_pane2.setFocusTraversalKeysEnabled(false);
		btn_next_pane2.setFocusPainted(false);
		btn_next_pane2.addMouseListener(new MouseAdapter() {

			@Override
			public void mouseEntered(MouseEvent arg0) {
				btn_next_pane2.setIcon(new ImageIcon(Main_Frame.class.getResource("/next-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent arg0) {
				btn_next_pane2.setIcon(new ImageIcon(Main_Frame.class.getResource("/next-btn.png")));
			}
		});

		btn_next_pane2.setIcon(new ImageIcon(Main_Frame.class.getResource("/next-btn.png")));

		btn_next_pane2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				TreePath[] tp = tree.getCheckingPaths();

				TreePath[] checktp11 = tree.getCheckingPaths();
				if (checktp11.length == 0) {
					JOptionPane.showMessageDialog(mf, "Select File From the Tree", messageboxtitle,
							JOptionPane.ERROR_MESSAGE,
							new ImageIcon(Main_Frame.class.getResource("/about-icon-2.png")));
				} else {

					hm = new HashMap<String, List<String>>();

					pstfolderlist = null;
					destination_path = "";
					for (int i = 0; i < tp.length; i++) {

						pstfolderlist2 = new ArrayList<String>();
						String[] str = (tp[i].toString().replace("<html><b>", "")).split(",");

						String sfile = "";
						StringBuilder strbr = new StringBuilder();
						for (int j = 3; j < str.length; j++) {

							if (j != (str.length - 1)) {
								strbr.append(str[j].trim());
								if (!pstfolderlist2.contains(strbr.toString().trim())) {
									pstfolderlist2.add(strbr.toString().trim());
								}
								if (fileoptionm.equalsIgnoreCase("Maildir")) {
									strbr.append(",");

								} else {
									strbr.append(File.separator);
								}

							} else if (j == str.length - 1) {
								strbr.append(str[j].replace("]", "").trim());
								if (!pstfolderlist2.contains(strbr.toString().trim())) {
									pstfolderlist2.add(strbr.toString().trim());
								}
							}

							if (fileoptionm.equalsIgnoreCase("EML File (.eml)")
									|| fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")
									|| fileoptionm.equalsIgnoreCase("Message File (.msg)")
									|| fileoptionm.equalsIgnoreCase("Maildir")) {

								sfile = ((CustomTreeNode) tp[i].getLastPathComponent()).filepath;

							}

						}
						if (fileoptionm.equalsIgnoreCase("EML File (.eml)")
								|| fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")
								|| fileoptionm.equalsIgnoreCase("Message File (.msg)")
								|| fileoptionm.equalsIgnoreCase("Maildir")) {
							if (new File(sfile).isFile()) {
								hm.put(sfile, null);
							} else {

								addemldd(new File(sfile));
							}

						}

						if (fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")
								|| fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")
								|| fileoptionm.equalsIgnoreCase("OLM File (.olm)")) {
							// System.out.println("56565656" + str.length);
							String fname;
							try {
								fname = ((CustomTreeNode) tp[i].getPathComponent(2)).filepath;
							} catch (Exception e33) {
								continue;
							}

							if (hm.size() != 0) {
								pstfolderlist = hm.get(fname);
								if (pstfolderlist != null) {
									if (!pstfolderlist.contains(strbr.toString().trim())) {
										pstfolderlist.add(strbr.toString().trim());
									}
								} else {
									pstfolderlist = new ArrayList<String>();

									pstfolderlist.addAll(pstfolderlist2);
									if (!pstfolderlist.contains(strbr.toString().trim())) {
										pstfolderlist.add(strbr.toString().trim());
									}
									hm.put(fname, pstfolderlist);

								}

							} else {
								pstfolderlist = new ArrayList<String>();
								pstfolderlist.add(strbr.toString().trim());
								hm.put(fname, pstfolderlist);
							}
						} else {
							DefaultMutableTreeNode d1 = (DefaultMutableTreeNode) tp[i].getLastPathComponent();
							if (d1.isLeaf()) {

								if (filetype.equalsIgnoreCase("Maildir")) {
									sfile = str[2].trim();

									sfile = sfile + pstfolderlist2.get(3);

								} else {
									if (fileoptionm.equalsIgnoreCase("EML File (.eml)")
											|| fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")
											|| fileoptionm.equalsIgnoreCase("Message File (.msg)")) {
										sfile = str[2].replace("]", "").trim();

									} else {
										sfile = ((CustomTreeNode) tp[i].getPathComponent(3)).filepath;

									}
								}
								if (!(fileoptionm.equalsIgnoreCase("EML File (.eml)")
										|| fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")
										|| fileoptionm.equalsIgnoreCase("Message File (.msg)"))) {

									hm.put(sfile, null);

								}

							}
						}

					}
					
					System.out.println(pstfolderlist);
					
					if (fileoption.equalsIgnoreCase("Exchange Offline Storage (.ost)")
							|| fileoption.equalsIgnoreCase("OLM File (.olm)")
							|| fileoption.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")) {
						try {

							comboBox_fileDestination_type.removeItem("VCF");
							comboBox_fileDestination_type.removeItem("ICS");
						} catch (Exception e1) {

						}
						comboBox_fileDestination_type.addItem("VCF");
						comboBox_fileDestination_type.addItem("ICS");
						mf.imageMap_output.put("VCF", new ImageIcon(Main_Frame.class.getResource("/vcf.png")));
						mf.imageMap_output.put("ICS", new ImageIcon(Main_Frame.class.getResource("/ics.png")));

					} else {
						try {

							comboBox_fileDestination_type.removeItem("VCF");
							comboBox_fileDestination_type.removeItem("ICS");
						} catch (Exception e1) {

						}

					}
					panel_progress.setVisible(false);

					if (fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")) {

						comboBox_fileDestination_type.removeItem("OST");
					} else if (fileoptionm.equalsIgnoreCase("EML File (.eml)")) {

						comboBox_fileDestination_type.removeItem("EML");
					} else if (fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")) {

						comboBox_fileDestination_type.removeItem("EMLX");

					} else if (fileoptionm.equalsIgnoreCase("Message File (.msg)")) {

						comboBox_fileDestination_type.removeItem("MSG");

					} else if (fileoptionm.equalsIgnoreCase("MBOX")) {
						comboBox_fileDestination_type.removeItem("MBOX");
						comboBox_fileDestination_type.removeItem("Thunderbird");
						comboBox_fileDestination_type.removeItem("Opera Mail");
					}
					if (fileoptionm.equalsIgnoreCase("EML File (.eml)") || fileoptionm.equalsIgnoreCase("Thunderbird")
							|| fileoptionm.equalsIgnoreCase("Opera Mail")
							|| fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")
							|| fileoptionm.equalsIgnoreCase("Message File (.msg)")) {

						task_box.setVisible(false);
						panel_taskfilter.setVisible(false);

					}
					panel_3_2.setVisible(false);
					panel_3_.setVisible(false);
					panel_3_1_2.setVisible(false);
					btn_converter_1.setEnabled(false);
					btn_converter_1.setToolTipText(null);
					comboBox.setVisible(false);
					btnStop.setVisible(false);

					tf_Destination_Location.setText(System.getProperty("user.home") + File.separator + "Desktop");

					lbl_progressreport.setText("");

					panel_3_.setVisible(true);

					CardLayout card1 = (CardLayout) panel_3_.getLayout();
					card1.show(panel_3_, "panel_3_1_1");
					panel_3_2.setVisible(true);
					panel_progress.setVisible(true);
					filetype = "PST";
					if (fileoptionm.equalsIgnoreCase("MBOX")) {
						label_16.setVisible(true);
						chckbxSaveMboxIn.setVisible(true);
					}
					btn_converter_1.setEnabled(true);
					btn_converter_1.setToolTipText("click here to convert");
					comboBox_fileDestination_type.setSelectedItem("PST");
					CardLayout card = (CardLayout) Cardlayout.getLayout();
					card.show(Cardlayout, "panel_3");
					cal = Calendar.getInstance();
					calendertime = getRidOfIllegalFileNameCharacters(cal.getTime().toString());

					chckbxMaintainFolderStructure.setSelected(true);
				}

			}
		});
		btn_next_pane2.setFont(new Font("Tahoma", Font.BOLD, 12));
		btn_next_pane2.setBounds(937, 563, 123, 38);
		panel_2.add(btn_next_pane2);

		btn_previous_p2 = new JButton("");
		btn_previous_p2.setToolTipText("Click here to go back");
		btn_previous_p2.setRolloverEnabled(false);
		btn_previous_p2.setRequestFocusEnabled(false);
		btn_previous_p2.setOpaque(false);
		btn_previous_p2.setFocusable(false);
		btn_previous_p2.setFocusTraversalKeysEnabled(false);
		btn_previous_p2.setFocusPainted(false);
		btn_previous_p2.setDefaultCapable(false);
		btn_previous_p2.setContentAreaFilled(false);
		btn_previous_p2.setBorderPainted(false);
		btn_previous_p2.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				btn_previous_p2.setIcon(new ImageIcon(Main_Frame.class.getResource("/previous-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				btn_previous_p2.setIcon(new ImageIcon(Main_Frame.class.getResource("/previous-btn.png")));
			}
		});

		btn_previous_p2.setIcon(new ImageIcon(Main_Frame.class.getResource("/previous-btn.png")));
		btn_previous_p2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				lblNew_setsubject.setText("");
				lblNew_setemail.setText("");
				label_date.setText("");
				editorPane.setText("");
				lblTotalMessageCount.setText("");
				model = (DefaultTreeModel) tree.getModel();
				DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
				root.removeAllChildren();
				model.reload();
				TreePath[] ac = new TreePath[0];
				tree.setCheckingPaths(ac);
				DefaultTableModel model = (DefaultTableModel) table_fileinformation.getModel();

				while (model.getRowCount() > 0) {

					for (int i = 0; i < model.getRowCount(); ++i) {

						model.removeRow(i);
					}
				}

				DefaultTableModel model1 = (DefaultTableModel) table_1.getModel();

				while (model1.getRowCount() > 0) {

					for (int i = 0; i < model1.getRowCount(); ++i) {

						model1.removeRow(i);
					}
				}

				CardLayout card = (CardLayout) Cardlayout.getLayout();
				card.show(Cardlayout, "panel_1");
			}
		});
		btn_previous_p2.setFont(new Font("Tahoma", Font.BOLD, 13));
		btn_previous_p2.setBounds(818, 563, 123, 38);
		panel_2.add(btn_previous_p2);

		JScrollPane scrollPane_2 = new JScrollPane();
		scrollPane_2.setBounds(298, 0, 324, 523);
		panel_2.add(scrollPane_2);

		innercardlayout = new JPanel();
		innercardlayout.setBounds(625, 62, 450, 485);
		panel_2.add(innercardlayout);
		innercardlayout.setLayout(new CardLayout(0, 0));

		CardLayout card = (CardLayout) innercardlayout.getLayout();
		card.show(innercardlayout, "viewer");

		table_fileinformation = new JTable() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			public boolean isCellEditable(int row, int column) {

				return false;
			}
		};

		table_fileinformation.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent arg0) {
				try {
					SwingUtilities.invokeLater(new Runnable() {

						public void run() {
							if (arg0.getClickCount() == 1) {
								editorPane.setText("");
								DefaultTableModel model = (DefaultTableModel) table_1.getModel();
								while (model.getRowCount() > 0) {

									for (int i = 0; i < model.getRowCount(); ++i) {

										model.removeRow(i);
									}
								}
								contatcheck = false;
								calendarcheck = false;
								CardLayout card = (CardLayout) innercardlayout.getLayout();

								card.show(innercardlayout, "viewer");
								if (fileoptionm.equalsIgnoreCase("MBOX")) {
									MailMessage message = listmail.get(table_fileinformation.getSelectedRow());

									try {
										lblNew_setemail.setText(message.getFrom().toString());

										lblNew_setsubject.setText(message.getSubject());

										label_date.setText(message.getDate().toString());

										HTMLEditorKit kit = new HTMLEditorKit();
										editorPane.setEditorKit(kit);
										FileOutputStream os = new FileOutputStream(
												temppathm + File.separator + "previewHtml.html");
										message.save(os, EmlSaveOptions.getDefaultHtml());
										os.close();
										URL url = new URL("file:///" + temppathm + File.separator + "previewHtml.html");
										editorPane.setPage(url);

										for (int j = 0; j < message.getAttachments().size(); j++) {
											Attachment att = message.getAttachments().get_Item(j);

											String attFileName = att.getName();
											ImageIcon icon = null;

											if (attFileName.endsWith(".pdf")) {
												icon = new ImageIcon(Main_Frame.class.getResource("/pdf-icon.png"));
											} else if (attFileName.endsWith(".txt")) {
												icon = new ImageIcon(Main_Frame.class.getResource("/txt-icon.png"));
											} else if (attFileName.endsWith(".docx")) {
												icon = new ImageIcon(Main_Frame.class.getResource("/Doc-icon.png"));
											} else if (attFileName.endsWith(".zip")) {
												icon = new ImageIcon(Main_Frame.class.getResource("/zip-icon.png"));
											} else {
												icon = new ImageIcon(
														Main_Frame.class.getResource("/attachment-icon.png"));
											}
											JLabel imagelabl = new JLabel();
											imagelabl.setIcon(icon);
											DefaultTableModel modeli = (DefaultTableModel) table_1.getModel();
											modeli.addRow(new Object[] { "<html><b>" + (j + 1),
													"<html><b>" + attFileName, imagelabl });
											// System.out.println(attFileName);

										}

									} catch (Exception e) {

										// e.printStackTrace();
									}

								} else if (fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")
										|| fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")) {

									MapiMessage message = listmapi.get(table_fileinformation.getSelectedRow());

									try {
										lblNew_setemail.setText(message.getSenderEmailAddress());
									} catch (Exception a) {
										lblNew_setemail.setText("");
									}
									try {
										lblNew_setsubject.setText(message.getSubject());
									} catch (Exception a) {
										lblNew_setsubject.setText("");
									}
									try {
										label_date.setText(message.getDeliveryTime().toString());
									} catch (Exception a) {
										label_date.setText("");
									}

									if (message.getMessageClass().equals("IPM.Contact")) {
										CardLayout card1 = (CardLayout) innercardlayout.getLayout();
										card1.show(innercardlayout, "panel_Contact");

										MapiContact con = (MapiContact) message.toMapiMessageItem();
										try {
											String[] compa = con.getCompanies();

											label_contactcompany.setText(compa[0]);
										} catch (Exception e) {
											label_contactcompany.setText("");
										}
										try {
											String gn = "";
											String mn = "";
											String sn = "";
											try {
												gn = con.getNameInfo().getGivenName();
											} catch (Exception e) {

											}
											try {
												mn = con.getNameInfo().getMiddleName();
											} catch (Exception e) {

											}
											try {
												sn = con.getNameInfo().getSurname();
											} catch (Exception e) {

											}

											String fn = gn + " " + mn + " " + sn;
											label_contactfullname.setText(fn);
										} catch (Exception e) {
											label_contactfullname.setText("");
										}
										try {
											label_contactemail.setText(
													con.getElectronicAddresses().getEmail1().getEmailAddress());
										} catch (Exception e) {
											label_contactemail.setText("");
										}
										try {
											label_contactphonenumber
													.setText(con.getTelephones().getMobileTelephoneNumber());
										} catch (Exception e) {
											label_contactphonenumber.setText("");
										}
										try {
											textArea_contact.setText(con.getPersonalInfo().getNotes());
										} catch (Exception e) {
											textArea_contact.setText("");
										}

										contatcheck = true;

									} else if (message.getMessageClass().equals("IPM.Appointment")
											|| message.getMessageClass().contains("IPM.Schedule.Meeting")) {
										CardLayout card1 = (CardLayout) innercardlayout.getLayout();
										card1.show(innercardlayout, "panel_Callendar");
										System.out.println("check");
										MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

										calendarcheck = true;
										try {
											label_Calendarsubject.setText(cal.getSubject());
										} catch (Exception e) {
											label_Calendarsubject.setText("");
										}
										try {
											label_calendarstartdate.setText(cal.getStartDate().toString());
										} catch (Exception e) {
											label_calendarstartdate.setText("");
										}
										try {
											label_Calendarenddate.setText(cal.getEndDate().toString());
										} catch (Exception e) {
											label_Calendarenddate.setText("");
										}

									} else {

										try {

											HTMLEditorKit kit = new HTMLEditorKit();
											editorPane.setEditorKit(kit);
											FileOutputStream os = new FileOutputStream(
													temppathm + File.separator + "previewHtml.html");
											message.save(os, EmlSaveOptions.getDefaultHtml());
											os.close();
											URL url = new URL(
													"file:///" + temppathm + File.separator + "previewHtml.html");
											editorPane.setPage(url);

										} catch (Error e) {
											mf.logger.warning("ERROR : " + e.getMessage() + System.lineSeparator());
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + System.lineSeparator());
											editorPane.setContentType("text/html");
											editorPane.setText("<html>Page not found.</html>");
										}

									}

									int k = 1;
									for (int j = 0; j < message.getAttachments().size(); j++) {
										MapiAttachment att = message.getAttachments().get_Item(j);

										String attFileName = att.getLongFileName();
										ImageIcon icon = null;

										if (attFileName.endsWith(".pdf")) {
											icon = new ImageIcon(Main_Frame.class.getResource("/pdf-icon.png"));
										} else if (attFileName.endsWith(".txt")) {
											icon = new ImageIcon(Main_Frame.class.getResource("/txt-icon.png"));
										} else if (attFileName.endsWith(".docx")) {
											icon = new ImageIcon(Main_Frame.class.getResource("/Doc-icon.png"));
										} else if (attFileName.endsWith(".zip")) {
											icon = new ImageIcon(Main_Frame.class.getResource("/zip-icon.png"));
										} else {
											icon = new ImageIcon(Main_Frame.class.getResource("/attachment-icon.png"));
										}
										JLabel imagelabl = new JLabel();
										imagelabl.setIcon(icon);

										DefaultTableModel modeli = (DefaultTableModel) table_1.getModel();
										modeli.addRow(
												new Object[] { "<html><b>" + k, "<html><b>" + attFileName, imagelabl });
										k++;
										// System.out.println(attFileName);

									}

								} else if (fileoptionm.equalsIgnoreCase("OLM File (.olm)")) {

									MapiMessage message = listmapi.get(table_fileinformation.getSelectedRow());
									try {
										lblNew_setemail.setText(message.getSenderEmailAddress());
									} catch (Exception a) {
										lblNew_setemail.setText("");
									}
									try {
										lblNew_setsubject.setText(message.getSubject());
									} catch (Exception a) {
										lblNew_setsubject.setText("");
									}
									try {
										label_date.setText(message.getDeliveryTime().toString());
									} catch (Exception a) {
										label_date.setText("");
									}

									try {
										lblNew_setemail.setText(message.getSenderEmailAddress());
									} catch (Exception a) {
										lblNew_setemail.setText("");
									}
									try {
										lblNew_setsubject.setText(message.getSubject());
									} catch (Exception a) {
										lblNew_setsubject.setText("");
									}
									try {
										label_date.setText(message.getDeliveryTime().toString());
									} catch (Exception a) {
										label_date.setText("");
									}

									if (message.getMessageClass().equals("IPM.Contact")) {
										CardLayout card1 = (CardLayout) innercardlayout.getLayout();
										card1.show(innercardlayout, "panel_Contact");

										MapiContact con = (MapiContact) message.toMapiMessageItem();
										try {
											String[] compa = con.getCompanies();

											label_contactcompany.setText(compa[0]);
										} catch (Exception e) {
											label_contactcompany.setText("");
										}
										try {
											String gn = "";
											String mn = "";
											String sn = "";
											try {
												gn = con.getNameInfo().getGivenName();
											} catch (Exception e) {

											}
											try {
												mn = con.getNameInfo().getMiddleName();
											} catch (Exception e) {

											}
											try {
												sn = con.getNameInfo().getSurname();
											} catch (Exception e) {

											}

											String fn = gn + " " + mn + " " + sn;
											label_contactfullname.setText(fn);
										} catch (Exception e) {
											label_contactfullname.setText("");
										}
										try {
											label_contactemail.setText(
													con.getElectronicAddresses().getEmail1().getEmailAddress());
										} catch (Exception e) {
											label_contactemail.setText("");
										}
										try {
											label_contactphonenumber
													.setText(con.getTelephones().getMobileTelephoneNumber());
										} catch (Exception e) {
											label_contactphonenumber.setText("");
										}
										try {
											textArea_contact.setText(con.getPersonalInfo().getNotes());
										} catch (Exception e) {
											textArea_contact.setText("");
										}

										contatcheck = true;

									} else if (message.getMessageClass().equals("IPM.Appointment")
											|| message.getMessageClass().contains("IPM.Schedule.Meeting")) {
										CardLayout card1 = (CardLayout) innercardlayout.getLayout();
										card1.show(innercardlayout, "panel_Callendar");
										System.out.println("check");
										MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

										calendarcheck = true;
										try {
											label_Calendarsubject.setText(cal.getSubject());
										} catch (Exception e) {
											label_Calendarsubject.setText("");
										}
										try {
											label_calendarstartdate.setText(cal.getStartDate().toString());
										} catch (Exception e) {
											label_calendarstartdate.setText("");
										}
										try {
											label_Calendarenddate.setText(cal.getEndDate().toString());
										} catch (Exception e) {
											label_Calendarenddate.setText("");
										}

									} else {

										try {

											HTMLEditorKit kit = new HTMLEditorKit();
											editorPane.setEditorKit(kit);
											FileOutputStream os = new FileOutputStream(
													temppathm + File.separator + "previewHtml.html");
											message.save(os, EmlSaveOptions.getDefaultHtml());
											os.close();
											URL url = new URL(
													"file:///" + temppathm + File.separator + "previewHtml.html");
											editorPane.setPage(url);

										} catch (Error e) {
											mf.logger.warning("ERROR : " + e.getMessage() + System.lineSeparator());
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + System.lineSeparator());
											editorPane.setContentType("text/html");
											editorPane.setText("<html>Page not found.</html>");
										}

									}

									int k = 1;
									for (int j = 0; j < message.getAttachments().size(); j++) {
										MapiAttachment att = message.getAttachments().get_Item(j);

										String attFileName = att.getLongFileName();
										ImageIcon icon = null;

										if (attFileName.endsWith(".pdf")) {
											icon = new ImageIcon(Main_Frame.class.getResource("/pdf-icon.png"));
										} else if (attFileName.endsWith(".txt")) {
											icon = new ImageIcon(Main_Frame.class.getResource("/txt-icon.png"));
										} else if (attFileName.endsWith(".docx")) {
											icon = new ImageIcon(Main_Frame.class.getResource("/Doc-icon.png"));
										} else if (attFileName.endsWith(".zip")) {
											icon = new ImageIcon(Main_Frame.class.getResource("/zip-icon.png"));
										} else {
											icon = new ImageIcon(Main_Frame.class.getResource("/attachment-icon.png"));
										}
										JLabel imagelabl = new JLabel();
										imagelabl.setIcon(icon);

										DefaultTableModel modeli = (DefaultTableModel) table_1.getModel();
										modeli.addRow(
												new Object[] { "<html><b>" + k, "<html><b>" + attFileName, imagelabl });
										k++;
										// System.out.println(attFileName);

									}
								} else if (fileoptionm.equalsIgnoreCase("Nodes Storage (.nsf)")) {

								} else {
									MailMessage message = MailMessage.load(path2);

									// System.out.println("found");

									try {
										try {
											lblNew_setemail.setText(message.getFrom().toString());
										} catch (Exception e) {

										}
										try {
											lblNew_setsubject.setText(message.getSubject());
										} catch (Exception e) {

										}
										try {
											label_date.setText(message.getDate().toString());
										} catch (Exception e) {

										}
										HTMLEditorKit kit = new HTMLEditorKit();
										editorPane.setEditorKit(kit);
										FileOutputStream os = new FileOutputStream(
												temppathm + File.separator + "previewHtml.html");
										message.save(os, EmlSaveOptions.getDefaultHtml());
										os.close();
										URL url = new URL("file:///" + temppathm + File.separator + "previewHtml.html");
										editorPane.setPage(url);

										for (int j = 0; j < message.getAttachments().size(); j++) {
											Attachment att = message.getAttachments().get_Item(j);

											String attFileName = att.getName();
											ImageIcon icon = null;

											if (attFileName.endsWith(".pdf")) {
												icon = new ImageIcon(Main_Frame.class.getResource("/pdf-icon.png"));
											} else if (attFileName.endsWith(".txt")) {
												icon = new ImageIcon(Main_Frame.class.getResource("/txt-icon.png"));
											} else if (attFileName.endsWith(".docx")) {
												icon = new ImageIcon(Main_Frame.class.getResource("/Doc-icon.png"));
											} else if (attFileName.endsWith(".zip")) {
												icon = new ImageIcon(Main_Frame.class.getResource("/zip-icon.png"));
											} else {
												icon = new ImageIcon(
														Main_Frame.class.getResource("/attachment-icon.png"));
											}
											JLabel imagelabl = new JLabel();
											imagelabl.setIcon(icon);

											DefaultTableModel modeli = (DefaultTableModel) table_1.getModel();
											modeli.addRow(new Object[] { "<html><b>" + (j + 1),
													"<html><b>" + attFileName, imagelabl });
											// System.out.println(attFileName);
										}
									} catch (Exception e) {

										// e.printStackTrace();
									}
								}

							}
						}
					});

				} catch (Exception e) {

				}
			}
		});
		table_fileinformation.setModel(new DefaultTableModel(new Object[][] {},
				new String[] { "<html><b>From", "<html><b>Subject", "<html><b>Date", "<html><b>Attachment" }));
		table_fileinformation.getColumn("<html><b>Attachment").setCellRenderer(new Renderer());
		table_fileinformation.getTableHeader().setReorderingAllowed(false);
		scrollPane_2.setViewportView(table_fileinformation);

		JLabel lblNewLabel_2 = new JLabel("From");
		lblNewLabel_2.setFont(new Font("Tahoma", Font.BOLD, 13));
		lblNewLabel_2.setBounds(627, 4, 45, 23);
		panel_2.add(lblNewLabel_2);

		JLabel lblNewLabel_3 = new JLabel("Subject");
		lblNewLabel_3.setFont(new Font("Tahoma", Font.BOLD, 13));
		lblNewLabel_3.setBounds(854, 38, 78, 16);
		panel_2.add(lblNewLabel_3);

		JLabel lblDate = new JLabel("Date");
		lblDate.setFont(new Font("Tahoma", Font.BOLD, 13));
		lblDate.setBounds(857, 5, 45, 16);
		panel_2.add(lblDate);

		JPanel viewer = new JPanel();
		innercardlayout.add(viewer, "viewer");
		viewer.setLayout(null);

		scrollPane_3 = new JScrollPane();
		scrollPane_3.setBounds(0, 0, 448, 485);
		viewer.add(scrollPane_3);

		editorPane = new JEditorPane();
		scrollPane_3.setViewportView(editorPane);
		editorPane.setEditable(false);

		panel_Callendar = new JPanel();
		panel_Callendar.setBorder(new LineBorder(new Color(0, 0, 0)));
		panel_Callendar.setBackground(Color.WHITE);
		innercardlayout.add(panel_Callendar, "panel_Callendar");
		panel_Callendar.setLayout(null);

		label_calendarstartdate = new JLabel("");
		label_calendarstartdate.setBounds(78, 151, 351, 17);
		panel_Callendar.add(label_calendarstartdate);

		lblEndDate = new JLabel("End Date");
		lblEndDate.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblEndDate.setBounds(10, 199, 65, 17);
		panel_Callendar.add(lblEndDate);

		JLabel lblStartDate = new JLabel("Start Date");
		lblStartDate.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblStartDate.setBounds(10, 148, 65, 22);
		panel_Callendar.add(lblStartDate);

		JLabel lblSubject = new JLabel("Subject");
		lblSubject.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblSubject.setBounds(10, 92, 52, 28);
		panel_Callendar.add(lblSubject);

		label_Calendarsubject = new JLabel("");
		label_Calendarsubject.setBounds(85, 92, 344, 28);
		panel_Callendar.add(label_Calendarsubject);

		label_Calendaricon = new JLabel("");
		label_Calendaricon.setIcon(new ImageIcon(Main_Frame.class.getResource("/calender.png")));
		label_Calendaricon.setBounds(10, 11, 116, 77);
		panel_Callendar.add(label_Calendaricon);

		label_Calendarenddate = new JLabel("");
		label_Calendarenddate.setBounds(78, 199, 351, 22);
		panel_Callendar.add(label_Calendarenddate);

		panel_Contact = new JPanel();
		panel_Contact.setBorder(new LineBorder(new Color(0, 0, 0)));
		panel_Contact.setBackground(Color.WHITE);
		innercardlayout.add(panel_Contact, "panel_Contact");
		panel_Contact.setLayout(null);

		lblFullName = new JLabel("Full Name ");
		lblFullName.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblFullName.setBounds(10, 67, 64, 14);
		panel_Contact.add(lblFullName);

		label_contactfullname = new JLabel("");
		label_contactfullname.setBounds(83, 67, 215, 14);
		panel_Contact.add(label_contactfullname);

		lblEMailAd = new JLabel("E Mail :");
		lblEMailAd.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblEMailAd.setBounds(10, 92, 64, 21);
		panel_Contact.add(lblEMailAd);

		lblCompany = new JLabel("Company");
		lblCompany.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblCompany.setBounds(10, 124, 64, 14);
		panel_Contact.add(lblCompany);

		label_contactemail = new JLabel("");
		label_contactemail.setBounds(83, 95, 215, 18);
		panel_Contact.add(label_contactemail);

		label_contactcompany = new JLabel("");
		label_contactcompany.setBounds(83, 124, 215, 21);
		panel_Contact.add(label_contactcompany);

		lblPhoneNo = new JLabel("Phone No");
		lblPhoneNo.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblPhoneNo.setBounds(10, 149, 56, 21);
		panel_Contact.add(lblPhoneNo);

		label_contactphonenumber = new JLabel("");
		label_contactphonenumber.setBounds(80, 152, 218, 18);
		panel_Contact.add(label_contactphonenumber);

		textArea_contact = new JTextArea();
		textArea_contact.setBounds(10, 198, 419, 150);
		panel_Contact.add(textArea_contact);

		label_contacticon = new JLabel("");
		label_contacticon.setIcon(new ImageIcon(Main_Frame.class.getResource("/User-Chat-icon.png")));
		label_contacticon.setBounds(10, 11, 64, 51);
		panel_Contact.add(label_contacticon);

		lblNotes = new JLabel("Notes");
		lblNotes.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblNotes.setBounds(10, 172, 48, 21);
		panel_Contact.add(lblNotes);

		attachmenttable = new JPanel();
		innercardlayout.add(attachmenttable, "attachmenttable");
		attachmenttable.setLayout(null);

		scrollPane_4 = new JScrollPane();
		scrollPane_4.setBounds(0, 0, 448, 485);
		attachmenttable.add(scrollPane_4);

		Object[][] data1 = {};

		String[] cols1 = { "S.No", "File Name", "File Type" };

		DefaultTableModel tablemodel = new DefaultTableModel(data1, cols1) {

			private static final long serialVersionUID = 1L;

			public boolean isCellEditable(int row, int column) {

				return false;

			}

		};

		table_1 = new JTable(tablemodel);
		scrollPane_4.setViewportView(table_1);

		JLabel label_6 = new JLabel("");
		label_6.setIcon(new ImageIcon(Main_Frame.class.getResource("/bottom.png")));
		label_6.setBounds(0, 552, 1129, 66);
		panel_2.add(label_6);

		lblTotalMessageCount = new JLabel("Total Message Count :");
		lblTotalMessageCount.setBounds(298, 523, 324, 23);
		panel_2.add(lblTotalMessageCount);
		table_1.getColumn("File Type").setCellRenderer(new Renderer());

		panel_3 = new JPanel();
		panel_3.setBackground(Color.WHITE);
		Cardlayout.add(panel_3, "panel_3");
		panel_3.setLayout(null);

		comboBox_fileDestination_type = new JComboBox(Main_Frame.sfd);
		mf.imageMap_output = mf.createImageMap_output(mf.l_output);
		comboBox_fileDestination_type.setRenderer(mf.new ListRenderer_output());

		comboBox_fileDestination_type.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent arg0) {
				panel_3_.setVisible(false);

				panel_3_2.setVisible(false);

				panel_3_1_2.setVisible(false);

				panel_3_1_2.setVisible(false);
				lbl_splitpst.setVisible(false);
				chckbx_splitpst.setSelected(false);
				panel_3_1_2_1.setVisible(false);
				chckbxSavePdfAttachment.setVisible(false);
				label_15.setVisible(false);
				textField_domain_name_p3.setText("");
				output = false;
				tf_Destination_Location.setText(System.getProperty("user.home") + File.separator + "Desktop");
				textField_username_p3.setText("");
				chckbxSaveInSame.setSelected(false);
				passwordField_p3.setText("");
				lbl_progressreport.setText("");
				btn_converter_1.setEnabled(false);
				btn_converter_1.setToolTipText(null);
				lbl_splitpst.setVisible(false);
				chckbx_splitpst.setSelected(false);
				panel_progress.setVisible(true);
				tf_portNo_p3.setVisible(false);
				lblPortNo.setVisible(false);
				comboBox.setVisible(false);
				btn_signout_p3.setVisible(false);
				chckbx_convert_pdf_to_pdf.setVisible(false);
				label_pdf_to_pdf.setVisible(false);
				lblMakeSureYou.setVisible(true);
				lblEnableImap_p3.setVisible(true);
				lblTurnOffTwo_p3.setVisible(true);
				label_16.setVisible(false);
				chckbxSaveMboxIn.setVisible(false);
				chckbxRestoreToDefault.setVisible(false);
				panel_5.setVisible(false);
				panel_8.setVisible(false);

				if (arg0.getSource() == comboBox_fileDestination_type) {

					JComboBox cb = (JComboBox) arg0.getSource();

					filetype = (String) cb.getSelectedItem();

				}

				if (filetype.equalsIgnoreCase("GMAIL") || filetype.equalsIgnoreCase("YAHOO MAIL")
						|| filetype.equalsIgnoreCase("Icloud") || filetype.equalsIgnoreCase("GoDaddy email")
						|| filetype.equalsIgnoreCase("Hostgator email") || filetype.equalsIgnoreCase("Amazon Webmail")
						|| filetype.equalsIgnoreCase("OFFICE 365") || filetype.equalsIgnoreCase("AOL")
						|| filetype.equalsIgnoreCase("Live Exchange") || filetype.equalsIgnoreCase("Yandex Mail")
						|| filetype.equalsIgnoreCase("Zoho Mail") || filetype.equalsIgnoreCase("HOTMAIL")
						|| filetype.equalsIgnoreCase("IMAP")) {
					lblEnableImap_p3.setText("To Enable IMAP");
					lbl_splitpst.setVisible(false);
					chckbx_splitpst.setSelected(false);
					lblEnableImap_p3.setVisible(false);
					lblTurnOffTwo_p3.setText("<HTML><U>To access your " + filetype
							+ " account , you'll need to generate and use an app password.</U></HTML>");
					lblMakeSureYou.setText("Please  Click on The Link");
					lblNewLabel_5.setVisible(true);

					if (filetype.equalsIgnoreCase("GMAIL") || filetype.equalsIgnoreCase("Zoho Mail")) {
						lblEnableImap_p3.setVisible(true);
						lblTurnOffTwo_p3.setText("<HTML><U>To access your " + filetype
								+ " account , you'll need to generate and use an app password or"
								+ System.lineSeparator() + " turn on less secure app</U></HTML>");

					}

					if (filetype.equalsIgnoreCase("Live Exchange")) {
						panel_3_.setVisible(true);
						CardLayout card = (CardLayout) panel_3_.getLayout();
						card.show(panel_3_, "panel_3_1_2");
						lbl_Domain.setText("IP or Computer Name");
						panel_3_1_2_1.setVisible(true);
						lblMakeSureYou.setVisible(false);
						lblEnableImap_p3.setVisible(false);
						lblTurnOffTwo_p3.setVisible(false);
						lblNewLabel_5.setVisible(false);
						lblTurnOffTwo_p3.setText("");
						lblMakeSureYou.setText("");
						lblEnableImap_p3.setText("");

					} else if (filetype.equalsIgnoreCase("Amazon Webmail")) {
						panel_3_.setVisible(true);
						CardLayout card = (CardLayout) panel_3_.getLayout();
						card.show(panel_3_, "panel_3_1_2");
						lbl_Domain.setText("Amazon Domain Name");
						panel_3_1_2_1.setVisible(true);
						tf_portNo_p3.setVisible(true);
						lblPortNo.setVisible(true);
						lblTurnOffTwo_p3.setText("");
						lblMakeSureYou.setText("");
						lblEnableImap_p3.setText("");
						lblNewLabel_5.setVisible(false);
						lblMakeSureYou.setVisible(false);
						lblEnableImap_p3.setVisible(false);
						lblTurnOffTwo_p3.setVisible(false);
						lblNewLabel_5.setVisible(false);

					} else if (filetype.equalsIgnoreCase("Hostgator email")) {
						panel_3_.setVisible(true);
						CardLayout card = (CardLayout) panel_3_.getLayout();
						card.show(panel_3_, "panel_3_1_2");
						lbl_Domain.setText(" Hostgator HOST");
						panel_3_1_2_1.setVisible(true);
						tf_portNo_p3.setVisible(true);
						lblPortNo.setVisible(true);
						lblTurnOffTwo_p3.setText("");
						lblMakeSureYou.setText("");
						lblEnableImap_p3.setText("");
						lblNewLabel_5.setVisible(false);
						lblMakeSureYou.setVisible(false);
						lblEnableImap_p3.setVisible(false);
						lblTurnOffTwo_p3.setVisible(false);
						lblNewLabel_5.setVisible(false);

					} else if (filetype.equalsIgnoreCase("IMAP")) {
						panel_3_.setVisible(true);
						CardLayout card = (CardLayout) panel_3_.getLayout();
						card.show(panel_3_, "panel_3_1_2");
						lbl_Domain.setText("   IMAP HOST");
						panel_3_1_2_1.setVisible(true);
						tf_portNo_p3.setVisible(true);
						lblPortNo.setVisible(true);
						lblTurnOffTwo_p3.setText("");
						lblMakeSureYou.setText("");
						lblEnableImap_p3.setText("");
						lblNewLabel_5.setVisible(false);
						lblMakeSureYou.setVisible(false);
						lblEnableImap_p3.setVisible(false);
						lblTurnOffTwo_p3.setVisible(false);
						lblNewLabel_5.setVisible(false);

					}

					else {

						panel_3_.setVisible(true);
						panel.setVisible(true);

						if (filetype.equalsIgnoreCase("OFFICE 365") || filetype.equalsIgnoreCase("Live Exchange")
								|| filetype.equalsIgnoreCase("HOTMAIL")) {

							lblEnableImap_p3.setText("To Enable IMAP");

							lblEnableImap_p3.setVisible(false);
							lblTurnOffTwo_p3.setText("<HTML><U>To access your " + filetype
									+ " account , you'll need to generate and use an app password.</U></HTML>");
							lblMakeSureYou.setText("Please  Click on The Link");
							lblNewLabel_5.setVisible(false);

							panel.setVisible(true);
							if (fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")
									|| fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")
									|| fileoptionm.equalsIgnoreCase("OLM File (.olm)")) {
								chckbxRestoreToDefault.setVisible(true);
								// chckbxSaveInSame.setVisible(false);
								task_box.setVisible(true);
								panel_taskfilter.setVisible(true);
							}
							lblTurnOffTwo_p3.setText("To access your " + filetype
									+ " account , you'll need to generate and use an app password.");
						}

						CardLayout card = (CardLayout) panel_3_.getLayout();
						card.show(panel_3_, "panel_3_1_2");
					}
				} else {
					panel_progress.setVisible(true);
					panel_3_.setVisible(true);
					chckbx_splitpst.setVisible(false);
					lbl_splitpst.setVisible(false);
					if (filetype.equalsIgnoreCase("pst")) {
						// chckbxSavePdfAttachment.setVisible(true);
						chckbxSaveInSame.setVisible(true);
						chckbx_splitpst.setVisible(true);
						lbl_splitpst.setVisible(true);
					}
					if (filetype.equalsIgnoreCase("pdf")) {
						chckbxSavePdfAttachment.setVisible(true);
						chckbx_convert_pdf_to_pdf.setVisible(true);
						label_pdf_to_pdf.setVisible(true);
						label_15.setVisible(true);
					}

					if (fileoptionm.equalsIgnoreCase("MBOX") && filetype.equalsIgnoreCase("PST")) {
						chckbxSavePdfAttachment.setVisible(true);
						label_16.setVisible(true);
						chckbxSaveMboxIn.setVisible(true);

					}

					if (fileoptionm.equalsIgnoreCase("Maildir") && filetype.equalsIgnoreCase("PST")) {
						chckbxSavePdfAttachment.setVisible(false);
						chckbxRestoreToDefault.setVisible(true);
						panel_8.setVisible(true);
					}

					CardLayout card = (CardLayout) panel_3_.getLayout();
					card.show(panel_3_, "panel_3_1_1");

					if (!(fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")
							|| fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")
							|| fileoptionm.equalsIgnoreCase("OLM File (.olm)"))) {
						chckbxMaintainFolderStructure.setVisible(false);
						label_14.setVisible(false);
						task_box.setVisible(false);
						panel_taskfilter.setVisible(false);
						chckbxRestoreToDefault.setVisible(true);
					} else {
						task_box.setVisible(true);
						panel_taskfilter.setVisible(true);
					}

					panel_3_2.setVisible(true);
					btn_converter_1.setVisible(true);
					btn_converter_1.setEnabled(true);
					btn_converter_1.setToolTipText("click here to convert");

					if (filetype.equalsIgnoreCase("Opera Mail")) {

						String str = null;

						if (OS.contains("windows")) {
							str = System.getenv("APPDATA").replace("Roaming", "Local") + File.separator + "Opera Mail"
									+ File.separator + "Opera Mail" + File.separator + "Mail" + File.separator
									+ "store";
						} else {
							str = System.getProperty("user.home") + File.separator + "Library" + File.separator
									+ "Application Support" + File.separator + "Opera Mail" + File.separator + "mail";
						}

						System.out.println(str);

						if (new File(str).exists()) {

							tf_Destination_Location.setText(str);

						} else {
							String warn = filetype + " Not Installed Do you want to proced ?";
							int ans = JOptionPane.showConfirmDialog(mf, warn, messageboxtitle,
									JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE,
									new ImageIcon(Main_Frame.class.getResource("/about-icon-2.png")));
							if (ans == JOptionPane.YES_OPTION) {

							} else {
								SwingUtilities.invokeLater(new Runnable() {

									public void run() {
										comboBox_fileDestination_type.setSelectedItem("PST");
									}
								});
							}

						}

					} else if (filetype.equalsIgnoreCase("Thunderbird")) {

						String str = null;

						if (OS.contains("windows")) {
							str = System.getenv("APPDATA") + File.separator + "Thunderbird" + File.separator
									+ "Profiles";
						} else {
							str = System.getProperty("user.home") + File.separator + "Library" + File.separator
									+ "Thunderbird" + File.separator + "Profiles";
						}

						if (new File(str).exists()) {

							File[] f = new File(str).listFiles();
							for (File fl : f) {
								if (fl != null) {
									if (fl.isDirectory()) {
										String filename = fl.getName();
										String extension = filename.substring(filename.lastIndexOf(".") + 1,
												filename.length());
										String ext = "default";
										if (ext.equals(extension)) {
											// System.out.println(file);

											String defaultfolder = fl.getName();

											str = str + File.separator + defaultfolder + File.separator + "Mail"
													+ File.separator + "Local Folders";

											tf_Destination_Location.setText(str);
											break;
										} else {

										}
									}
								}
							}
						} else {
							String warn = filetype + " Not Installed Do you want to proced ?";
							int ans = JOptionPane.showConfirmDialog(mf, warn, messageboxtitle,
									JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE,
									new ImageIcon(Main_Frame.class.getResource("/about-icon-2.png")));
							if (ans == JOptionPane.YES_OPTION) {

							} else {
								SwingUtilities.invokeLater(new Runnable() {

									public void run() {
										comboBox_fileDestination_type.setSelectedItem("PST");
									}
								});
							}

						}

					}

					if (!(filetype.equalsIgnoreCase("PST") || filetype.equalsIgnoreCase("Thunderbird")
							|| filetype.equalsIgnoreCase("Opera Mail") || filetype.equalsIgnoreCase("OST")
							|| filetype.equalsIgnoreCase("MBOX") || filetype.equalsIgnoreCase("CSV"))) {
						comboBox.setVisible(true);
						panel_5.setVisible(true);
					}

				}

			}
		});
		comboBox_fileDestination_type.setBounds(317, 11, 463, 29);
		comboBox_fileDestination_type.setFont(new Font("Tahoma", Font.BOLD, 15));
		SwingUtilities.invokeLater(new Runnable() {

			@Override
			public void run() {
				comboBox_fileDestination_type.setSelectedItem("PST");
				chckbxSavePdfAttachment.setVisible(false);

			}
		});
		panel_3.add(comboBox_fileDestination_type);

		btn_previous_p3 = new JButton("");
		btn_previous_p3.setToolTipText("Click here to go back");
		btn_previous_p3.setBorderPainted(false);
		btn_previous_p3.setContentAreaFilled(false);
		btn_previous_p3.setDefaultCapable(false);
		btn_previous_p3.setFocusable(false);
		btn_previous_p3.setFocusTraversalKeysEnabled(false);
		btn_previous_p3.setFocusPainted(false);
		btn_previous_p3.setRolloverEnabled(false);
		btn_previous_p3.setRequestFocusEnabled(false);
		btn_previous_p3.setOpaque(false);
		btn_previous_p3.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				btn_previous_p3.setIcon(new ImageIcon(Main_Frame.class.getResource("/previous-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				btn_previous_p3.setIcon(new ImageIcon(Main_Frame.class.getResource("/previous-btn.png")));
			}
		});

		btn_previous_p3.setIcon(new ImageIcon(Main_Frame.class.getResource("/previous-btn.png")));
		btn_previous_p3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				hm.clear();
				label_calendarstartdate.setText("");

				label_Calendarsubject.setText("");
				label_Calendarenddate.setText("");
				lblNew_setemail.setText("");

				lblNew_setsubject.setText("");

				label_date.setText("");
				editorPane.setText("");

				try {
					DefaultTableModel model = (DefaultTableModel) table_fileinformation.getModel();

					while (model.getRowCount() > 0) {

						for (int i = 0; i < model.getRowCount(); ++i) {

							model.removeRow(i);
						}
					}

					DefaultTableModel model1 = (DefaultTableModel) table_1.getModel();

					while (model1.getRowCount() > 0) {

						for (int i = 0; i < model1.getRowCount(); ++i) {

							model1.removeRow(i);
						}
					}

					if (output) {
						if (filetype.equals("OFFICE 365") || filetype.equals("Live Exchange")
								|| filetype.equals("Hotmail")) {
							clientforexchange_output.dispose();

						} else {

							iconnforimap_output.dispose();
						}
					}
				} catch (Exception e1) {

				}
				comboBox_fileDestination_type.setEnabled(true);
				CardLayout card = (CardLayout) Cardlayout.getLayout();
				card.show(Cardlayout, "panel_2");
			}
		});
		btn_previous_p3.setBounds(803, 563, 123, 38);
		panel_3.add(btn_previous_p3);
		btn_previous_p3.setFont(new Font("Tahoma", Font.BOLD, 12));

		btn_signout_p3 = new JButton("");
		btn_signout_p3.setToolTipText("Click here to sign out");
		btn_signout_p3.setFocusable(false);
		btn_signout_p3.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				btn_signout_p3.setIcon(new ImageIcon(Main_Frame.class.getResource("/sing-out-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				btn_signout_p3.setIcon(new ImageIcon(Main_Frame.class.getResource("/sing-out-btn.png")));
			}
		});

		btn_signout_p3.setIcon(new ImageIcon(Main_Frame.class.getResource("/sing-out-btn.png")));
		btn_signout_p3.setFocusTraversalKeysEnabled(false);
		btn_signout_p3.setFocusPainted(false);
		btn_signout_p3.setDefaultCapable(false);
		btn_signout_p3.setContentAreaFilled(false);
		btn_signout_p3.setBorderPainted(false);
		btn_signout_p3.setRolloverEnabled(false);
		btn_signout_p3.setRequestFocusEnabled(false);
		btn_signout_p3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				try {
					String warn = "Do you want to sign out?";

					int ans = JOptionPane.showConfirmDialog(mf, warn, messageboxtitle, JOptionPane.YES_NO_OPTION,
							JOptionPane.INFORMATION_MESSAGE,
							new ImageIcon(Main_Frame.class.getResource("/about-icon-2.png")));
					if (ans == JOptionPane.YES_OPTION) {

						if (filetype.equals("OFFICE 365") || filetype.equals("Live Exchange")
								|| filetype.equals("Hotmail")) {
							try {
								clientforexchange_output.dispose();
							} catch (Exception e) {

							}

						} else {

							try {
								iconnforimap_output.dispose();
							} catch (Exception e) {

							}
						}

						textField_domain_name_p3.setText("");
						passwordField_p3.setText("");
						textField_domain_name_p3.setText("");
						btn_signout_p3.setVisible(false);
						btn_converter_1.setEnabled(false);
						btn_converter_1.setToolTipText(null);

						CardLayout card = (CardLayout) panel_3_.getLayout();
						card.show(panel_3_, "panel_3_1_2");
					}

				} catch (Error e) {
					mf.logger.warning("ERROR : " + e.getMessage() + System.lineSeparator());
				} catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + System.lineSeparator());
					return;
				} finally {
					comboBox_fileDestination_type.setEnabled(true);
				}
			}
		});
		btn_signout_p3.setBounds(923, 6, 142, 38);
		btn_signout_p3.setVisible(false);
		panel_3.add(btn_signout_p3);

		btn_converter_1 = new JButton("");
		btn_converter_1.setToolTipText("Click here to Convert");
		btn_converter_1.setEnabled(false);
		btn_converter_1.setToolTipText(null);

		btn_converter_1.setRequestFocusEnabled(false);
		btn_converter_1.setOpaque(false);
		btn_converter_1.setFocusTraversalKeysEnabled(false);
		btn_converter_1.setFocusable(false);
		btn_converter_1.setFocusPainted(false);
		btn_converter_1.setContentAreaFilled(false);
		btn_converter_1.setBorderPainted(false);
		btn_converter_1.setDefaultCapable(false);
		btn_converter_1.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				btn_converter_1.setIcon(new ImageIcon(Main_Frame.class.getResource("/convert-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				btn_converter_1.setIcon(new ImageIcon(Main_Frame.class.getResource("/convert-btn.png")));
			}
		});

		btn_converter_1.setIcon(new ImageIcon(Main_Frame.class.getResource("/convert-btn.png")));
		btn_converter_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				textField_customfolder.setEditable(false);
				//chckbxMigrateOrBackup.setEnabled(false);	
				chckbx_splitpst.setEnabled(false);
				count_destination = 0;

				if (filetype.equalsIgnoreCase("pdf") && chckbxSavePdfAttachment.isSelected()) {
					mf.chckbxSavePdfAttachment.setSelected(true);
				} else if (filetype.equalsIgnoreCase("pdf") && (!chckbxSavePdfAttachment.isSelected())) {

					mf.chckbxSavePdfAttachment.setSelected(false);
				}

				if (chckbx_calender_box.isSelected()) {
					try {
						Calendar calendarstartdate = dateChooser_calender_start.getCalendar();
						Calendar calendarenddate = dateChooser_calendar_end.getCalendar();
						calendarstartdate.set(Calendar.HOUR_OF_DAY, 00);
						calendarstartdate.set(Calendar.MINUTE, 00);
						calendarstartdate.set(Calendar.SECOND, 00);
						calendarenddate.set(Calendar.HOUR_OF_DAY, 23);
						calendarenddate.set(Calendar.MINUTE, 59);
						calendarenddate.set(Calendar.SECOND, 59);

						Calenderfilterstartdate = calendarstartdate.getTime();
						Calenderfilterenddate = calendarenddate.getTime();
					} catch (Exception e1) {
						JOptionPane.showMessageDialog(mf, "Please Enter the date in Calendar filter before Continuing",
								messageboxtitle, JOptionPane.ERROR_MESSAGE,
								new ImageIcon(Main_Frame.class.getResource("/information.png")));

						throw new NullPointerException();
					}
				}
				if (chckbx_Mail_Filter.isSelected()) {
					try {

						Calendar mailstartdate = dateChooser_mail_fromdate.getCalendar();
						Calendar mailenddate = dateChooser_mail_tilldate.getCalendar();
						mailstartdate.set(Calendar.HOUR_OF_DAY, 00);
						mailstartdate.set(Calendar.MINUTE, 00);
						mailstartdate.set(Calendar.SECOND, 00);
						mailenddate.set(Calendar.HOUR_OF_DAY, 23);
						mailenddate.set(Calendar.MINUTE, 59);
						mailenddate.set(Calendar.SECOND, 59);

						mailfilterstartdate = mailstartdate.getTime();
						mailfilterenddate = mailenddate.getTime();
					} catch (Exception e1) {
						JOptionPane.showMessageDialog(mf, "Please Enter the date in Mail filter before Continuing",
								messageboxtitle, JOptionPane.ERROR_MESSAGE,
								new ImageIcon(Main_Frame.class.getResource("/information.png")));

						throw new NullPointerException();
					}

				}
				if (task_box.isSelected()) {
					try {

						Calendar taskstartdate = dateChooser_task_start_date.getCalendar();
						Calendar taskenddate = dateChooser_task_end_date.getCalendar();
						taskstartdate.set(Calendar.HOUR_OF_DAY, 00);
						taskstartdate.set(Calendar.MINUTE, 00);
						taskstartdate.set(Calendar.SECOND, 00);
						taskenddate.set(Calendar.HOUR_OF_DAY, 23);
						taskenddate.set(Calendar.MINUTE, 59);
						taskenddate.set(Calendar.SECOND, 59);

						taskfilterstartdate = taskstartdate.getTime();
						taskfilterenddate = taskenddate.getTime();
					} catch (Exception e1) {
						JOptionPane.showMessageDialog(mf, "Please Enter the date in task filter before Continuing",
								messageboxtitle, JOptionPane.ERROR_MESSAGE,
								new ImageIcon(Main_Frame.class.getResource("/information.png")));

						throw new NullPointerException();
					}

				}
				if (chckbxCustomFolderName.isSelected() && textField_customfolder.getText().isEmpty()) {

					JOptionPane.showMessageDialog(mf, "Please Enter the name of folder before Continuing",
							messageboxtitle, JOptionPane.ERROR_MESSAGE,
							new ImageIcon(Main_Frame.class.getResource("/information.png")));

					throw new NullPointerException();

				}
				Desktop desktop = Desktop.getDesktop();
				th = new Thread(new Runnable() {

					@Override
					public void run() {
						try {
							mf.chckbxRemoveDuplicacy.setSelected(chckbxRemoveDuplicacy.isSelected());
							mf.chckbx_convert_pdf_to_pdf.setSelected(chckbx_convert_pdf_to_pdf.isSelected());
							chckbxCustomFolderName.setEnabled(false);
							btn_Destination.setEnabled(false);
							btn_previous_p3.setEnabled(false);
							chckbxSaveInSame.setEnabled(false);
							btnStop.setVisible(true);
							chckbxMigrateOrBackup.setEnabled(false);
							//chckbxMigrateOrBackup.setEnabled(true);
							comboBox_fileDestination_type.setEnabled(false);
							btn_Destination.setEnabled(false);
							btn_previous_p3.setEnabled(false);
							lbl_progressreport.setText("");
							dateChooser_calender_start.setEnabled(false);
							chckbxRemoveDuplicacy.setEnabled(false);
							dateChooser_calendar_end.setEnabled(false);
							dateChooser_mail_fromdate.setEnabled(false);
							chckbxSaveMboxIn.setEnabled(false);
							dateChooser_mail_tilldate.setEnabled(false);
							dateChooser_task_start_date.setEnabled(false);
							chckbxRestoreToDefault.setEnabled(false);
							dateChooser_task_end_date.setEnabled(false);
							btn_signout_p3.setVisible(false);
							panel_5.setVisible(false);
							btn_Destination.setEnabled(false);
							btn_previous_p3.setEnabled(false);
							btn_converter_1.setEnabled(false);
							btn_converter_1.setToolTipText(null);
							btnStop.setVisible(true);
							lbl_progressreport.setText("");
							chckbx_Mail_Filter.setEnabled(false);
							chckbx_calender_box.setEnabled(false);
							chckbx_convert_pdf_to_pdf.setEnabled(false);
							comboBox.setVisible(false);
							chckbxSavePdfAttachment.setEnabled(false);
							task_box.setEnabled(false);
							long starttime = System.currentTimeMillis();
							chckbxMaintainFolderStructure.setEnabled(false);
							String destinationfile = "";
							String match = "";

							spinner_sizespinner.setEnabled(false);
							comboBox_setsize.setEnabled(false);
							spinner_sizespinner.updateUI();
							maxsize = 0;

							if (chckbx_splitpst.isSelected()) {
								if (comboBox_setsize.getSelectedIndex() == 0) {
									Object o = spinner_sizespinner.getValue();
									Number n = (Number) o;
									maxsize = (n.longValue()) * (1000 * 1000);

								} else if (comboBox_setsize.getSelectedIndex() == 1) {
									Object o = spinner_sizespinner.getValue();
									Number n = (Number) o;
									maxsize = (n.longValue()) * (1000 * 1000 * 1000);
								}
							}
							Calendar cal = Calendar.getInstance();
							Main_Frame.comboBox.setSelectedIndex(comboBox.getSelectedIndex());
							if (checkconvertagain) {

								if (!(filetype.equalsIgnoreCase("GMAIL") || filetype.equalsIgnoreCase("YAHOO MAIL")
										|| filetype.equalsIgnoreCase("AOL")
										|| filetype.equalsIgnoreCase("Amazon Webmail")
										|| filetype.equalsIgnoreCase("Live Exchange")
										|| filetype.equalsIgnoreCase("Yandex Mail")
										|| filetype.equalsIgnoreCase("Icloud")
										|| filetype.equalsIgnoreCase("GoDaddy email")
										|| filetype.equalsIgnoreCase("Hostgator email")
										|| filetype.equalsIgnoreCase("Zoho Mail")
										|| filetype.equalsIgnoreCase("OFFICE 365")
										|| filetype.equalsIgnoreCase("Hotmail") || filetype.equalsIgnoreCase("IMAP"))) {

									if (chckbxCustomFolderName.isSelected()) {

										String customerfolder = textField_customfolder.getText().replace("//s", "");

										customerfolder = getRidOfIllegalFileNameCharacters(customerfolder);

										f = new File(tf_Destination_Location.getText() + File.separator + customerfolder
												+ filetype);
										if (!f.isFile()) {
											if (filetype.equalsIgnoreCase("Thunderbird")) {
												f = new File(tf_Destination_Location.getText() + File.separator
														+ customerfolder + ".sbd" + File.separator + fname + ".sbd");
												new MboxrdStorageWriter(tf_Destination_Location.getText()
														+ File.separator + customerfolder, false);
												f.mkdirs();
												new MboxrdStorageWriter(
														tf_Destination_Location.getText() + File.separator
																+ customerfolder + ".sbd" + File.separator + fname,
														false);

											}
											f.mkdirs();

											destination_path = f.getAbsolutePath();
										} else {

											f = new File(tf_Destination_Location.getText() + File.separator
													+ customerfolder + "(" + calendertime + ")" + filetype + "_"
													+ comboBox.getSelectedItem().toString());

											if (filetype.equalsIgnoreCase("Thunderbird")) {
												f = new File(tf_Destination_Location.getText() + File.separator
														+ customerfolder + "(" + calendertime + ")" + filetype + "_"
														+ comboBox.getSelectedItem().toString() + ".sbd"
														+ File.separator + fname + ".sbd");
												new MboxrdStorageWriter(tf_Destination_Location.getText()
														+ File.separator + customerfolder + "(" + calendertime + ")"
														+ filetype + "_" + comboBox.getSelectedItem().toString(),
														false);

											}

											f.mkdirs();

											destination_path = f.getAbsolutePath();

										}

									} else {
										fname = fileoptionm;
										f = new File(tf_Destination_Location.getText() + File.separator + calendertime
												+ File.separator + fname + filetype + "_"
												+ comboBox.getSelectedItem().toString());
										if (filetype.equalsIgnoreCase("Thunderbird")) {
											f = new File(tf_Destination_Location.getText() + File.separator
													+ calendertime + ".sbd" + File.separator + fname + filetype + "_"
													+ comboBox.getSelectedItem().toString() + ".sbd" + File.separator
													+ fname + ".sbd");
											f.mkdirs();
											new MboxrdStorageWriter(
													tf_Destination_Location.getText() + File.separator + calendertime,
													false);

											new MboxrdStorageWriter(tf_Destination_Location.getText() + File.separator
													+ calendertime + File.separator + fname + filetype + "_"
													+ comboBox.getSelectedItem().toString(), false);

										}
										f.mkdirs();
										destination_path = f.getAbsolutePath();
										destinationfile = f.getAbsolutePath();
									}

								}

							} else {

								if (!(filetype.equalsIgnoreCase("GMAIL") || filetype.equalsIgnoreCase("YAHOO MAIL")
										|| filetype.equalsIgnoreCase("AOL") || filetype.equalsIgnoreCase("Icloud")
										|| filetype.equalsIgnoreCase("GoDaddy email")
										|| filetype.equalsIgnoreCase("Hostgator email")
										|| filetype.equalsIgnoreCase("Amazon Webmail")
										|| filetype.equalsIgnoreCase("Live Exchange")
										|| filetype.equalsIgnoreCase("Yandex Mail")
										|| filetype.equalsIgnoreCase("Zoho Mail")
										|| filetype.equalsIgnoreCase("OFFICE 365")
										|| filetype.equalsIgnoreCase("Hotmail") || filetype.equalsIgnoreCase("IMAP"))) {

									if (chckbxCustomFolderName.isSelected()) {

										String customerfolder = textField_customfolder.getText().replace("//s", "");

										customerfolder = getRidOfIllegalFileNameCharacters(customerfolder);

										f = new File(
												tf_Destination_Location.getText() + File.separator + customerfolder);
										if (!f.isFile()) {

											if (filetype.equalsIgnoreCase("Thunderbird")) {
												f = new File(tf_Destination_Location.getText() + File.separator
														+ customerfolder + ".sbd");
												new MboxrdStorageWriter(tf_Destination_Location.getText()
														+ File.separator + customerfolder, false);
												;

											}

											f.mkdirs();

											destination_path = f.getAbsolutePath();
										} else {
											f = new File(tf_Destination_Location.getText() + File.separator
													+ customerfolder + "(" + calendertime + ")");
											if (filetype.equalsIgnoreCase("Thunderbird")) {
												f = new File(tf_Destination_Location.getText() + File.separator
														+ customerfolder + "(" + calendertime + ")" + ".sbd");
												new MboxrdStorageWriter(tf_Destination_Location.getText()
														+ File.separator + customerfolder + "(" + calendertime + ")",
														false);
											}
											f.mkdirs();

											destination_path = f.getAbsolutePath();

										}

									} else {

										fname = fileoptionm;

										f = new File(tf_Destination_Location.getText() + File.separator + calendertime
												+ File.separator + fname);
										if (filetype.equalsIgnoreCase("Thunderbird")) {
											f = new File(tf_Destination_Location.getText() + File.separator
													+ calendertime + ".sbd" + File.separator + fname + ".sbd");
											f.mkdirs();
											new MboxrdStorageWriter(
													tf_Destination_Location.getText() + File.separator + calendertime,
													false);

											new MboxrdStorageWriter(tf_Destination_Location.getText() + File.separator
													+ calendertime + ".sbd" + File.separator + fname, false);
										}
										f.mkdirs();
										destination_path = f.getAbsolutePath();
										destinationfile = f.getAbsolutePath();
									}
								}

							}

							if (chckbx_Mail_Filter.isSelected()
									&& (mailfilterenddate == null || mailfilterstartdate == null)) {
								JOptionPane.showMessageDialog(mf, "Please Select Start and End Date", messageboxtitle,
										JOptionPane.ERROR_MESSAGE,
										new ImageIcon(Main_Frame.class.getResource("/information.png")));
							} else if (chckbx_calender_box.isSelected()
									&& (Calenderfilterenddate == null || Calenderfilterstartdate == null)) {
								JOptionPane.showMessageDialog(mf, "Please Select Start and End Date", messageboxtitle,
										JOptionPane.ERROR_MESSAGE,
										new ImageIcon(Main_Frame.class.getResource("/information.png")));
							} else {

								if (filetype.equalsIgnoreCase("GMAIL") || filetype.equalsIgnoreCase("Amazon Webmail")
										|| filetype.equalsIgnoreCase("YAHOO MAIL") || filetype.equalsIgnoreCase("AOL")
										|| filetype.equalsIgnoreCase("Yandex Mail")
										|| filetype.equalsIgnoreCase("Icloud")
										|| filetype.equalsIgnoreCase("GoDaddy email")

										|| filetype.equalsIgnoreCase("Zoho Mail")) {

									if (filetype.equalsIgnoreCase("GoDaddy email")) {

										calendertime = calendertime.replaceAll("[^a-zA-Z0-9]", "");
										fname = fname.replaceAll("[^a-zA-Z0-9]", "");

									}
									if (!chckbxRestoreToDefault.isSelected()) {
										if (chckbxCustomFolderName.isSelected()) {
											String customerfolder = textField_customfolder.getText().replace("//s", "");

											customerfolder = getRidOfIllegalFileNameCharacters(customerfolder);
											if (filetype.equalsIgnoreCase("GoDaddy email")) {
												customerfolder = customerfolder.replaceAll("[^a-zA-Z0-9]", "");

											}
											try {
												try {
													clientforimap_output.createFolder(iconnforimap_output,
															customerfolder);
												} catch (Exception e2) {
													connectionHandle1();
													clientforimap_output.createFolder(iconnforimap_output,
															customerfolder);
												}

												clientforimap_output.selectFolder(iconnforimap_output, customerfolder);
												path = customerfolder;

											} catch (Exception e) {

												clientforimap_output.createFolder(iconnforimap_output,
														customerfolder + "(" + calendertime + ")");

												clientforimap_output.selectFolder(iconnforimap_output,
														customerfolder + "(" + calendertime + ")");
												path = customerfolder + "(" + calendertime + ")";

											}
										} else {

											calendertime = getRidOfIllegalFileNameCharacters(cal.getTime().toString());
											try {
												clientforimap_output.createFolder(iconnforimap_output, calendertime);
											} catch (Exception e2) {
												connectionHandle1();
												clientforimap_output.createFolder(iconnforimap_output, calendertime);
											}

											clientforimap_output.selectFolder(iconnforimap_output, calendertime);

											path = calendertime;

										}
									}
								} else if (filetype.equalsIgnoreCase("IMAP")
										|| filetype.equalsIgnoreCase("Hostgator email")) {

									if (chckbxCustomFolderName.isSelected()) {
										String customerfolder = textField_customfolder.getText().replace("//s", "");

										customerfolder = getRidOfIllegalFileNameCharacters(customerfolder);
										try {

											try {
												clientforimap_output.createFolder(iconnforimap_output,
														"INBOX" + "." + customerfolder);
											} catch (Exception e2) {
												connectionHandle1();
												clientforimap_output.createFolder(iconnforimap_output,
														"INBOX" + "." + customerfolder);
											}

											clientforimap_output.selectFolder(iconnforimap_output,
													"INBOX" + "." + customerfolder);
											path = "INBOX" + "." + customerfolder;

										} catch (Exception e) {

											clientforimap_output.createFolder(iconnforimap_output,
													"INBOX" + "." + customerfolder + "(" + calendertime + ")");

											clientforimap_output.selectFolder(iconnforimap_output,
													"INBOX" + "." + customerfolder + "(" + calendertime + ")");
											path = "INBOX" + "." + customerfolder + "(" + calendertime + ")";

										}
									} else {

										calendertime = getRidOfIllegalFileNameCharacters(cal.getTime().toString());

										try {
											clientforimap_output.createFolder(iconnforimap_output,
													"INBOX" + "." + calendertime);
										} catch (Exception e2) {
											connectionHandle1();
											clientforimap_output.createFolder(iconnforimap_output,
													"INBOX" + "." + calendertime);
										}

										clientforimap_output.selectFolder(iconnforimap_output,
												"INBOX" + "." + calendertime);

										path = "INBOX" + "." + calendertime;

									}

								} else if (filetype.equalsIgnoreCase("OFFICE 365")
										|| filetype.equalsIgnoreCase("Live Exchange")
										|| filetype.equalsIgnoreCase("Hotmail")) {
									if (!chckbxRestoreToDefault.isSelected()) {
										if (chckbxCustomFolderName.isSelected()) {
											String customerfolder = textField_customfolder.getText().replace("//s", "");

											customerfolder = getRidOfIllegalFileNameCharacters(customerfolder);
											try {

												Folderuri = clientforexchange_output.createFolder(customerfolder)
														.getUri();
												fa = Folderuri;

											} catch (Exception e) {

												Folderuri = clientforexchange_output
														.createFolder(customerfolder + "(" + calendertime + ")")
														.getUri();
												fa = Folderuri;

											}
										} else {

											Folderuri = clientforexchange_output.createFolder(calendertime).getUri();

											fa = Folderuri;

										}
									}
								}
								String finalpath = destination_path;
								Progressbar.setVisible(true);
								long totalcount = 0;
								mf.logger.info("Convertion into " + fileoptionm + "Start Time : " + cal.getTime()
										+ System.lineSeparator());
								Main_Frame.count_destination = 0;
								for (int i = 0; i < filesfin.length; i++) {
//									if (stop) {
//										break;
//									}
									if (stop) {
										break;
									}
									count_destination = 0;
									file = new File(filesfin[i].replace("<html><b>", ""));
									destination_path = finalpath;

									fname = file.getName();

									mf.logger.info("file name " + fname + "Start Time : " + cal.getTime()
											+ System.lineSeparator());
									if (!(filetype.equalsIgnoreCase("GMAIL") || filetype.equalsIgnoreCase("Yandex Mail")
											|| filetype.equalsIgnoreCase("Zoho Mail")
											|| filetype.equalsIgnoreCase("Icloud")
											|| filetype.equalsIgnoreCase("GoDaddy email")
											|| filetype.equalsIgnoreCase("Hostgator email")
											|| filetype.equalsIgnoreCase("Amazon Webmail")
											|| filetype.equalsIgnoreCase("YAHOO MAIL")
											|| filetype.equalsIgnoreCase("AOL") || filetype.equalsIgnoreCase("IMAP"))) {
										path = "";
									}

									if (table.getValueAt(i, 3).toString().replace("<html><b>", "")
											.equalsIgnoreCase("File")) {

										for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//											if (stop) {
//												break;
//											}
											if (stop) {
												break;
											}
											if (entry.getKey().trim()
													.equalsIgnoreCase(filesfin[i].replace("<html><b>", ""))) {

												if (fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")
														|| fileoptionm
																.equalsIgnoreCase("Exchange Offline Storage (.ost)")
														|| fileoptionm.equalsIgnoreCase("OLM File (.olm)")) {
													pstfolderlist = new ArrayList<String>();

													pstfolderlist.addAll(entry.getValue());
												}

												filepath = file.getAbsolutePath();
												// System.out.println(filepath);

												fname = file.getName().replace(".mbx", "").replace(".mbox", "")
														.replace(".pst", "").replace(".ost", "").replace(".nsf", "")
														.replace(".eml", "").replace(".olm", "");
												fname = getRidOfIllegalFileNameCharacters(fname);
												fname = fname.trim();
												destination_path = destination_path + File.separator + fname;
												if (filetype.equalsIgnoreCase("Thunderbird")) {
													destination_path = destination_path + ".sbd";

												}

												if (fileoptionm.equalsIgnoreCase("MBOX")) {

													if (filetype.equalsIgnoreCase("EML")
															|| filetype.equalsIgnoreCase("MSG")
															|| filetype.equalsIgnoreCase("EMLX")
															|| filetype.equalsIgnoreCase("HTML")
															|| filetype.equalsIgnoreCase("MHTML")) {
														new File(destination_path).mkdirs();
														ConvertMbox_file();

													} else if (filetype.equalsIgnoreCase("OFFICE 365")
															|| filetype.equalsIgnoreCase("Live Exchange")
															|| filetype.equalsIgnoreCase("HOTMAIL")) {
														label_11.setIcon(new ImageIcon(
																Main_Frame.class.getResource("/download.png")));
														Folderuri = clientforexchange_output
																.createFolder(Folderuri, fname).getUri();

														ConvertMbox_office365();

														Folderuri = fa;

													} else if (filetype.equalsIgnoreCase("Thunderbird")
															|| filetype.equalsIgnoreCase("Opera Mail")) {

													} else if (filetype.equalsIgnoreCase("IMAP")
															|| filetype.equalsIgnoreCase("Hostgator email")) {
														label_11.setIcon(new ImageIcon(
																Main_Frame.class.getResource("/download.png")));
														match = path;
														path = path + "." + fname;

														clientforimap_output.createFolder(iconnforimap_output, path);
														clientforimap_output.selectFolder(iconnforimap_output, path);

														ConvertMbox_imap();
														path = match;
													} else if (filetype.equalsIgnoreCase("YAHOO MAIL")
															|| filetype.equalsIgnoreCase("AOL")
															|| filetype.equalsIgnoreCase("Amazon Webmail")
															|| filetype.equalsIgnoreCase("GMAIL")
															|| filetype.equalsIgnoreCase("Icloud")
															|| filetype.equalsIgnoreCase("GoDaddy email")

															|| filetype.equalsIgnoreCase("Yandex Mail")
															|| filetype.equalsIgnoreCase("Zoho Mail")) {
														label_11.setIcon(new ImageIcon(
																Main_Frame.class.getResource("/download.png")));
														match = path;
														if (filetype.equalsIgnoreCase("GoDaddy email")) {
															fname = fname.replaceAll("[^a-zA-Z0-9]", "");

														}
														path = path + "/" + fname;
														clientforimap_output.createFolder(iconnforimap_output, path);
														clientforimap_output.selectFolder(iconnforimap_output, path);

														ConvertMbox_gmail();
														path = path.replace("/" + fname, "");
														path = match;
													} else if (filetype.equalsIgnoreCase("CSV")) {
														new File(destination_path + File.separator + fname).mkdirs();
														path = fname;
														foldername4 = fname;
														ConvertMbox_CSV();

													} else if (filetype.equalsIgnoreCase("PST")) {

														if (chckbxSaveMboxIn.isSelected()) {
															if (checkmboxpstost) {
																destination_path = destination_path
																		.replace(File.separator + fname, "");
																new File(destination_path).mkdirs();

																pst = PersonalStorage.create(destination_path
																		+ File.separator + "Mbox" + ".pst",
																		FileFormatVersion.Unicode);
																pst.getStore().changeDisplayName("Mbox");
																checkmboxpstost = false;
															}
															info = pst.getRootFolder().addSubFolder(fname);
															try {
																ConvertMbox_pst();
															} catch (Exception e) {
																e.printStackTrace();
															}

														} else {
															new File(destination_path).mkdirs();
															pst = PersonalStorage.create(
																	destination_path + File.separator + fname + ".pst",
																	FileFormatVersion.Unicode);
															info = pst.getRootFolder().addSubFolder(fname);
															try {
																ConvertMbox_pst();
															} catch (Exception e) {
																e.printStackTrace();
															}

															pst.dispose();
														}

													} else if (filetype.equalsIgnoreCase("OST")) {
														if (chckbxSaveMboxIn.isSelected()) {
															if (checkmboxpstost) {
																destination_path = destination_path
																		.replace(File.separator + fname, "");
																new File(destination_path).mkdirs();

																pst = PersonalStorage.create(destination_path
																		+ File.separator + "Mbox" + ".ost",
																		FileFormatVersion.Unicode);
																pst.getStore().changeDisplayName("Mbox");
																checkmboxpstost = false;
															}
															info = pst.getRootFolder().addSubFolder(fname);
															try {
																ConvertMbox_pst();
															} catch (Exception e) {
																e.printStackTrace();
															}

														} else {
															new File(destination_path).mkdirs();
															pst = PersonalStorage.create(
																	destination_path + File.separator + fname + ".ost",
																	FileFormatVersion.Unicode);
															info = pst.getRootFolder().addSubFolder(fname);

															ConvertMbox_word();

															pst.dispose();
														}

													} else {
														new File(destination_path).mkdirs();
														ConvertMbox_word();

													}

												} else if (fileoptionm
														.equalsIgnoreCase("Exchange Offline Storage (.ost)")) {

													if (filetype.equalsIgnoreCase("EML")
															|| filetype.equalsIgnoreCase("MSG")
															|| filetype.equalsIgnoreCase("EMLX")
															|| filetype.equalsIgnoreCase("HTML")
															|| filetype.equalsIgnoreCase("MHTML")) {
														new File(destination_path).mkdirs();
														ConvertPSTOST_file();

													} else if (filetype.equalsIgnoreCase("VCF")
															|| filetype.equalsIgnoreCase("ICS")) {

														ConvertPSTOST_vcfics();

													} else if (filetype.equalsIgnoreCase("OFFICE 365")
															|| filetype.equalsIgnoreCase("Live Exchange")
															|| filetype.equalsIgnoreCase("HOTMAIL")) {
														label_11.setIcon(new ImageIcon(
																Main_Frame.class.getResource("/download.png")));

														if (chckbxRestoreToDefault.isSelected()) {
															ConvertPST_defaultrestore();
														} else {
															Folderuri = clientforexchange_output
																	.createFolder(Folderuri, fname).getUri();
															ConvertPSTOST_365();
															Folderuri = fa;
														}

													} else if (filetype.equalsIgnoreCase("IMAP")
															|| filetype.equalsIgnoreCase("Hostgator email")) {
														label_11.setIcon(new ImageIcon(
																Main_Frame.class.getResource("/download.png")));
														match = path;
														path = path + "." + fname;

														clientforimap_output.createFolder(iconnforimap_output, path);
														clientforimap_output.selectFolder(iconnforimap_output, path);
														ConvertPSTOST_imap();
														path = match;

													} else if (filetype.equalsIgnoreCase("YAHOO MAIL")
															|| filetype.equalsIgnoreCase("AOL")
															|| filetype.equalsIgnoreCase("Amazon Webmail")
															|| filetype.equalsIgnoreCase("GMAIL")
															|| filetype.equalsIgnoreCase("Icloud")
															|| filetype.equalsIgnoreCase("GoDaddy email")

															|| filetype.equalsIgnoreCase("Yandex Mail")
															|| filetype.equalsIgnoreCase("Zoho Mail")) {

														label_11.setIcon(new ImageIcon(
																Main_Frame.class.getResource("/download.png")));
														match = path;
														if (filetype.equalsIgnoreCase("GoDaddy email")) {
															fname = fname.replaceAll("[^a-zA-Z0-9]", "");

														}
														path = path + "/" + fname;

														clientforimap_output.createFolder(iconnforimap_output, path);
														clientforimap_output.selectFolder(iconnforimap_output, path);
														ConvertPSTOST_gmail();
														path = path.replace("/" + fname, "");
														path = match;
													} else if (filetype.equalsIgnoreCase("CSV")) {
														new File(destination_path).mkdirs();
														ConvertPSTOST_csv();

													} else if (filetype.equalsIgnoreCase("PST")) {
														new File(destination_path).mkdirs();
														ost = PersonalStorage.create(
																destination_path + File.separator + fname + ".pst",
																FileFormatVersion.Unicode);
														ost.getStore().changeDisplayName(fname);
														pst = PersonalStorage.fromFile(filepath);
														ConvertPST_ost();
														ost.dispose();
													} else if (filetype.equalsIgnoreCase("MBOX")
															|| filetype.equalsIgnoreCase("Thunderbird")
															|| filetype.equalsIgnoreCase("Opera Mail")) {
														new File(destination_path).mkdirs();
														if (filetype.equalsIgnoreCase("Thunderbird")) {

															new MboxrdStorageWriter(
																	destination_path.replace(fname + ".sbd", "")
																			+ fname,
																	false);
														}
														ConvertPSTOST_mbox();
													} else {
														new File(destination_path).mkdirs();
														ConvertPSTOST_word();
													}

												}

												else if (fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")) {

													if (filetype.equalsIgnoreCase("EML")
															|| filetype.equalsIgnoreCase("MSG")
															|| filetype.equalsIgnoreCase("EMLX")
															|| filetype.equalsIgnoreCase("HTML")
															|| filetype.equalsIgnoreCase("MHTML")) {
														new File(destination_path).mkdirs();
														ConvertPSTOST_file();

													} else if (filetype.equalsIgnoreCase("VCF")
															|| filetype.equalsIgnoreCase("ICS")) {

														ConvertPSTOST_vcfics();

													} else if (filetype.equalsIgnoreCase("IMAP")
															|| filetype.equalsIgnoreCase("Hostgator email")) {
														label_11.setIcon(new ImageIcon(
																Main_Frame.class.getResource("/download.png")));
														match = path;
														path = path + "." + fname;

														clientforimap_output.createFolder(iconnforimap_output, path);
														clientforimap_output.selectFolder(iconnforimap_output, path);
														ConvertPSTOST_imap();
														path = match;
													} else if (filetype.equalsIgnoreCase("OFFICE 365")
															|| filetype.equalsIgnoreCase("Live Exchange")
															|| filetype.equalsIgnoreCase("HOTMAIL")) {
														label_11.setIcon(new ImageIcon(
																Main_Frame.class.getResource("/download.png")));
														Folderuri = clientforexchange_output
																.createFolder(Folderuri, fname).getUri();
														ConvertPSTOST_365();
														Folderuri = fa;

													} else if (filetype.equalsIgnoreCase("GMAIL")
															|| filetype.equalsIgnoreCase("YAHOO MAIL")
															|| filetype.equalsIgnoreCase("AOL")
															|| filetype.equalsIgnoreCase("Icloud")
															|| filetype.equalsIgnoreCase("GoDaddy email")

															|| filetype.equalsIgnoreCase("Amazon Webmail")
															|| filetype.equalsIgnoreCase("Yandex Mail")
															|| filetype.equalsIgnoreCase("Zoho Mail")) {

														label_11.setIcon(new ImageIcon(
																Main_Frame.class.getResource("/download.png")));
														match = path;
														if (filetype.equalsIgnoreCase("GoDaddy email")) {
															fname = fname.replaceAll("[^a-zA-Z0-9]", "");

														}
														path = path + "/" + fname;

														clientforimap_output.createFolder(iconnforimap_output, path);
														clientforimap_output.selectFolder(iconnforimap_output, path);
														ConvertPSTOST_gmail();
														path = match;
													} else if (filetype.equalsIgnoreCase("CSV")) {
														new File(destination_path).mkdirs();

														// System.out.println("on convert button action perform");

														ConvertPSTOST_csv();

													} else if (filetype.equalsIgnoreCase("OST")) {
														new File(destination_path).mkdirs();
														ost = PersonalStorage.create(
																destination_path + File.separator + fname + ".ost",
																FileFormatVersion.Unicode);
														ost.getStore().changeDisplayName(fname);
														pst = PersonalStorage.fromFile(filepath);
														ConvertPST_ost();
														ost.dispose();

													} else if (filetype.equalsIgnoreCase("PST")) {
														new File(destination_path).mkdirs();
														ost = PersonalStorage.create(
																destination_path + File.separator + fname + ".pst",
																FileFormatVersion.Unicode);
														ost.getStore().changeDisplayName(fname);
														pst = PersonalStorage.fromFile(filepath);
														ConvertPST_ost();
														ost.dispose();
													} else if (filetype.equalsIgnoreCase("MBOX")
															|| filetype.equalsIgnoreCase("Thunderbird")
															|| filetype.equalsIgnoreCase("Opera Mail")) {
														new File(destination_path).mkdirs();
														if (filetype.equalsIgnoreCase("Thunderbird")) {

															new MboxrdStorageWriter(
																	destination_path.replace(fname + ".sbd", "")
																			+ fname,
																	false);
														}
														ConvertPSTOST_mbox();
													} else {
														new File(destination_path).mkdirs();
														ConvertPSTOST_word();

													}
													destination_path = destination_path.replace(File.separator + fname,
															"");
												} else if (fileoptionm.equalsIgnoreCase("OLM File (.olm)")) {
													// progressBar_message_p3.setVisible(true);

													if (filetype.equalsIgnoreCase("EML")
															|| filetype.equalsIgnoreCase("MSG")
															|| filetype.equalsIgnoreCase("EMLX")
															|| filetype.equalsIgnoreCase("HTML")
															|| filetype.equalsIgnoreCase("MHTML")) {
														new File(destination_path).mkdirs();
														ConvertOLM_file();

													} else if (filetype.equalsIgnoreCase("VCF")
															|| filetype.equalsIgnoreCase("ICS")) {

														ConvertOLM_vcfics();

													} else if (filetype.equalsIgnoreCase("OFFICE 365")
															|| filetype.equalsIgnoreCase("Live Exchange")
															|| filetype.equalsIgnoreCase("HOTMAIL")) {
														label_11.setIcon(new ImageIcon(
																Main_Frame.class.getResource("/download.png")));
														Folderuri = clientforexchange_output
																.createFolder(Folderuri, fname).getUri();
														ConvertOLM_exchange();
														Folderuri = fa;

													} else if (filetype.equalsIgnoreCase("YAHOO MAIL")
															|| filetype.equalsIgnoreCase("GMAIL")
															|| filetype.equalsIgnoreCase("Icloud")
															|| filetype.equalsIgnoreCase("GoDaddy email")

															|| filetype.equalsIgnoreCase("Amazon Webmail")
															|| filetype.equalsIgnoreCase("AOL")
															|| filetype.equalsIgnoreCase("Yandex Mail")
															|| filetype.equalsIgnoreCase("Zoho Mail")) {
														match = path;
														label_11.setIcon(new ImageIcon(
																Main_Frame.class.getResource("/download.png")));
														if (filetype.equalsIgnoreCase("GoDaddy email")) {
															fname = fname.replaceAll("[^a-zA-Z0-9]", "");

														}
														path = path + "/" + fname;

														clientforimap_output.createFolder(iconnforimap_output, path);
														clientforimap_output.selectFolder(iconnforimap_output, path);
														ConvertOLM_gmail();
														path = match;

													} else if (filetype.equalsIgnoreCase("IMAP")
															|| filetype.equalsIgnoreCase("Hostgator email")) {
														label_11.setIcon(new ImageIcon(
																Main_Frame.class.getResource("/download.png")));
														match = path;
														path = path + "." + fname;

														clientforimap_output.createFolder(iconnforimap_output, path);
														clientforimap_output.selectFolder(iconnforimap_output, path);
														ConvertOLM_imap();
														path = match;
													} else if (filetype.equalsIgnoreCase("CSV")) {

														new File(destination_path).mkdirs();
														ConvertOLM_CSV();

													} else if (filetype.equalsIgnoreCase("PST")) {
														new File(destination_path).mkdirs();
														pst = PersonalStorage.create(
																destination_path + File.separator + fname + ".pst",
																FileFormatVersion.Unicode);
														pst.getStore().changeDisplayName(fname);
														ConvertOLM_pst();
														pst.dispose();

													} else if (filetype.equalsIgnoreCase("OST")) {
														new File(destination_path).mkdirs();
														pst = PersonalStorage.create(
																destination_path + File.separator + fname + ".ost",
																FileFormatVersion.Unicode);
														pst.getStore().changeDisplayName(fname);
														ConvertOLM_pst();
														pst.dispose();
													} else if (filetype.equalsIgnoreCase("MBOX")
															|| filetype.equalsIgnoreCase("Thunderbird")
															|| filetype.equalsIgnoreCase("Opera Mail")) {
														new File(destination_path).mkdirs();
														if (filetype.equalsIgnoreCase("Thunderbird")) {

															new MboxrdStorageWriter(
																	destination_path.replace(fname + ".sbd", "")
																			+ fname,
																	false);
														}

														ConvertOLM_mbox();
													} else {
														new File(destination_path).mkdirs();
														ConvertOLM_word();
													}
													destination_path = destination_path.replace(File.separator + fname,
															"");
												} else {

													if (demo) {
														if (count_eml_msg_emlx >= All_Data.demo_count) {
															break;
														}

													}
													destination_path = destination_path
															.replace(File.separator + fname + filetype, "")
															.replace(File.separator + fname, "");

													if (filetype.equalsIgnoreCase("EML")
															|| filetype.equalsIgnoreCase("MSG")
															|| filetype.equalsIgnoreCase("EMLX")
															|| filetype.equalsIgnoreCase("HTML")
															|| filetype.equalsIgnoreCase("MHTML")) {
														new File(destination_path.replaceAll("\\p{C}", "-")).mkdirs();
														ConvertEml_MSG_EMLX_file();

													} else if (filetype.equalsIgnoreCase("OFFICE 365")
															|| filetype.equalsIgnoreCase("Live Exchange")
															|| filetype.equalsIgnoreCase("HOTMAIL")) {
														label_11.setIcon(new ImageIcon(
																Main_Frame.class.getResource("/download.png")));

														ConvertEml_MSG_EMLX_office365();

													} else if (filetype.equalsIgnoreCase("YAHOO MAIL")
															|| filetype.equalsIgnoreCase("AOL")
															|| filetype.equalsIgnoreCase("Amazon Webmail")
															|| filetype.equalsIgnoreCase("GMAIL")
															|| filetype.equalsIgnoreCase("Icloud")
															|| filetype.equalsIgnoreCase("GoDaddy email")

															|| filetype.equalsIgnoreCase("Yandex Mail")
															|| filetype.equalsIgnoreCase("Zoho Mail")) {
														label_11.setIcon(new ImageIcon(
																Main_Frame.class.getResource("/download.png")));
														System.out.println(path);

														clientforimap_output.selectFolder(path);

														ConvertEml_MSG_EMLX_gmail();

													} else if (filetype.equalsIgnoreCase("IMAP")
															|| filetype.equalsIgnoreCase("Hostgator email")) {
														label_11.setIcon(new ImageIcon(
																Main_Frame.class.getResource("/download.png")));

														clientforimap_output.selectFolder(path);
														ConvertEml_MSG_EMLX_imap();

													} else if (filetype.equalsIgnoreCase("CSV")) {
														destination_path = destination_path.replace(fname, "");
														File f = new File(destination_path + File.separator
																+ getRidOfIllegalFileNameCharacters(fileoptionm)
																+ ".csv");
														if (!f.isFile()) {
															new File(destination_path).mkdirs();
															File file1 = new File(destination_path + File.separator
																	+ getRidOfIllegalFileNameCharacters(fileoptionm)
																	+ ".csv");
															FileWriter outputfile = new FileWriter(file1);

															writer = new CSVWriter(outputfile);

															String[] header = { "Date", "Subject", "Body", "From", "To",
																	"CC:" };

															writer.writeNext(header);
														}
														ConvertEml_MSG_EMLX_CSV(writer);

													} else if (filetype.equalsIgnoreCase("PST")) {
														destination_path = destination_path.replace(fname, "");
														File f = new File(destination_path + File.separator
																+ getRidOfIllegalFileNameCharacters(fileoptionm)
																+ ".pst");
														if (!f.isFile()) {
															new File(destination_path).mkdirs();
															pstfilename = destination_path + File.separator
																	+ getRidOfIllegalFileNameCharacters(fileoptionm)
																	+ ".pst";
															pst = PersonalStorage.create(pstfilename,
																	FileFormatVersion.Unicode);
															pst.getStore().changeDisplayName(fileoptionm);
															info = pst.getRootFolder().addSubFolder(fileoptionm);
														}
														ConvertEml_MSG_EMLX_pst();

													} else if (filetype.equalsIgnoreCase("OST")) {
														destination_path = destination_path.replace(fname, "");
														File f = new File(destination_path + File.separator
																+ getRidOfIllegalFileNameCharacters(fileoptionm)
																+ ".ost");
														if (!f.isFile()) {
															new File(destination_path).mkdirs();
															pst = PersonalStorage.create(
																	destination_path + File.separator
																			+ getRidOfIllegalFileNameCharacters(
																					fileoptionm)
																			+ ".ost",
																	FileFormatVersion.Unicode);
															pst.getStore().changeDisplayName(fileoptionm);
															info = pst.getRootFolder().addSubFolder(fileoptionm);
														}
														ConvertEml_MSG_EMLX_pst();

													} else if (filetype.equalsIgnoreCase("MBOX")
															|| filetype.equalsIgnoreCase("Thunderbird")
															|| filetype.equalsIgnoreCase("Opera Mail")) {

														File f = new File(destination_path + File.separator
																+ getRidOfIllegalFileNameCharacters(fileoptionm)
																+ ".mbx");
														if (!f.isFile()) {
															new File(destination_path).mkdirs();
															wr = new MboxrdStorageWriter(destination_path
																	+ File.separator
																	+ getRidOfIllegalFileNameCharacters(fileoptionm)
																	+ ".mbx", false);
														}
														ConvertEml_MSG_EMLX_mbox(wr);

													} else {
														new File(destination_path.replaceAll("\\p{C}", "-")).mkdirs();
														ConvertEml_MSG_EMLX_word();

													}

												}
												destination_path = destinationfile;

											}
										}
									} else if (table.getValueAt(i, 3).toString().replace("<html><b>", "")
											.equalsIgnoreCase("Folder")) {

										parent = file.getParent();

										if (fileoptionm.equalsIgnoreCase("MBOX")) {
											// progressBar_message_p3.setVisible(true);
											if (filetype.equalsIgnoreCase("EML") || filetype.equalsIgnoreCase("MSG")
													|| filetype.equalsIgnoreCase("EMLX")
													|| filetype.equalsIgnoreCase("HTML")
													|| filetype.equalsIgnoreCase("MHTML")) {

												ConvertMboxfoldertofile(file);

											} else if (filetype.equalsIgnoreCase("OFFICE 365")
													|| filetype.equalsIgnoreCase("Live Exchange")
													|| filetype.equalsIgnoreCase("HOTMAIL")) {
												label_11.setIcon(
														new ImageIcon(Main_Frame.class.getResource("/download.png")));
												Folderuri = clientforexchange_output.createFolder(Folderuri, fname)
														.getUri();
												ConvertMboxfolder_exchange(file);
												Folderuri = fa;
											} else if (filetype.equalsIgnoreCase("YAHOO MAIL")
													|| filetype.equalsIgnoreCase("AOL")
													|| filetype.equalsIgnoreCase("Amazon Webmail")
													|| filetype.equalsIgnoreCase("GMAIL")
													|| filetype.equalsIgnoreCase("Icloud")
													|| filetype.equalsIgnoreCase("GoDaddy email")

													|| filetype.equalsIgnoreCase("Yandex Mail")
													|| filetype.equalsIgnoreCase("Zoho Mail")) {
												label_11.setIcon(
														new ImageIcon(Main_Frame.class.getResource("/download.png")));
												match = path;
												path = path + "/" + fname;

												clientforimap_output.createFolder(iconnforimap_output, path);
												clientforimap_output.selectFolder(iconnforimap_output, path);
												ConvertMboxfolderto_gmail(file);
												path = match;

											} else if (filetype.equalsIgnoreCase("IMAP")
													|| filetype.equalsIgnoreCase("Hostgator email")) {
												label_11.setIcon(
														new ImageIcon(Main_Frame.class.getResource("/download.png")));
												match = path;

												clientforimap_output.createFolder(iconnforimap_output, path);
												clientforimap_output.selectFolder(iconnforimap_output, path);
												ConvertMboxfolderto_imap(file);
												path = match;

											} else if (filetype.equalsIgnoreCase("CSV")) {
												ConvertMboxfoldertoCSV(file);

											} else if (filetype.equalsIgnoreCase("PST")) {

												new File(destination_path + File.separator + fname).mkdirs();

												ConvertMboxfoldertoPSTOST(file);

												destination_path = destination_path.replace(File.separator + fname, "");
											} else if (filetype.equalsIgnoreCase("OST")) {
												destination_path = destination_path + File.separator + fname;
												new File(destination_path).mkdirs();

												ConvertMboxfoldertoPSTOST(file);
												destination_path = destination_path.replace(File.separator + fname, "");
											} else {
												ConvertMboxfoldertoword(file);

											}

										}

										else if (fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")) {

											// progressBar_message_p3.setVisible(true);

											if (filetype.equalsIgnoreCase("EML") || filetype.equalsIgnoreCase("MSG")
													|| filetype.equalsIgnoreCase("EMLX")
													|| filetype.equalsIgnoreCase("HTML")
													|| filetype.equalsIgnoreCase("MHTML")) {
												Converteml_PSTOST_folder_file(file);

											} else if (filetype.equalsIgnoreCase("VCF")
													|| filetype.equalsIgnoreCase("ICS")) {

												Converteml_PSTOST_folder_vcfics(file);

											} else if (filetype.equalsIgnoreCase("OFFICE 365")
													|| filetype.equalsIgnoreCase("Live Exchange")
													|| filetype.equalsIgnoreCase("HOTMAIL")) {
												label_11.setIcon(
														new ImageIcon(Main_Frame.class.getResource("/download.png")));

												fa = Folderuri;
												Folderuri = clientforexchange_output.createFolder(Folderuri, fname)
														.getUri();
												ConvertPSTOST_folder_exchange(file);
												Folderuri = fa;

											} else if (filetype.equalsIgnoreCase("YAHOO MAIL")
													|| filetype.equalsIgnoreCase("AOL")
													|| filetype.equalsIgnoreCase("GMAIL")
													|| filetype.equalsIgnoreCase("Icloud")
													|| filetype.equalsIgnoreCase("GoDaddy email")

													|| filetype.equalsIgnoreCase("Amazon Webmail")
													|| filetype.equalsIgnoreCase("Yandex Mail")
													|| filetype.equalsIgnoreCase("Zoho Mail")) {
												label_11.setIcon(
														new ImageIcon(Main_Frame.class.getResource("/download.png")));
												match = path;
												path = path + "/" + fname;

												clientforimap_output.createFolder(iconnforimap_output, path);
												clientforimap_output.selectFolder(iconnforimap_output, path);

												ConvertPSTOST_folder_gmail(file);
												path = match;

											} else if (filetype.equalsIgnoreCase("IMAP")
													|| filetype.equalsIgnoreCase("Hostgator email")) {
												label_11.setIcon(
														new ImageIcon(Main_Frame.class.getResource("/download.png")));
												match = path;
												path = path + "." + fname;

												clientforimap_output.createFolder(iconnforimap_output, path);
												clientforimap_output.selectFolder(iconnforimap_output, path);
												ConvertPSTOST_folder_imap(file);

												path = match;

											} else if (filetype.equalsIgnoreCase("CSV")) {
												Converteml_PSTOST_folder_CSV(file);

											} else if (filetype.equalsIgnoreCase("PST")) {

												Converteml_PSTOST_folder_PSTOST(file);
											}

											else if (filetype.equalsIgnoreCase("MBOX")
													|| filetype.equalsIgnoreCase("Thunderbird")
													|| filetype.equalsIgnoreCase("Opera Mail")) {
												Converteml_PSTOST_folder_MBox(file);
											} else {
												Converteml_PSTOST_folder_word(file);
											}

										}

										else if (fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")) {

											// progressBar_message_p3.setVisible(true);

											if (filetype.equalsIgnoreCase("EML") || filetype.equalsIgnoreCase("MSG")
													|| filetype.equalsIgnoreCase("EMLX")
													|| filetype.equalsIgnoreCase("HTML")
													|| filetype.equalsIgnoreCase("MHTML")
													|| filetype.equalsIgnoreCase("THUNDERBIRD")) {

												Converteml_PSTOST_folder_file(file);
											} else if (filetype.equalsIgnoreCase("VCF")
													|| filetype.equalsIgnoreCase("ICS")) {

												Converteml_PSTOST_folder_vcfics(file);

											} else if (filetype.equalsIgnoreCase("OFFICE 365")
													|| filetype.equalsIgnoreCase("Live Exchange")
													|| filetype.equalsIgnoreCase("HOTMAIL")) {
												label_11.setIcon(
														new ImageIcon(Main_Frame.class.getResource("/download.png")));
												Folderuri = clientforexchange_output.createFolder(Folderuri, fname)
														.getUri();
												ConvertPSTOST_folder_exchange(file);
												Folderuri = fa;
											} else if (filetype.equalsIgnoreCase("YAHOO MAIL")
													|| filetype.equalsIgnoreCase("AOL")
													|| filetype.equalsIgnoreCase("GMAIL")
													|| filetype.equalsIgnoreCase("Icloud")
													|| filetype.equalsIgnoreCase("GoDaddy email")

													|| filetype.equalsIgnoreCase("Amazon Webmail")
													|| filetype.equalsIgnoreCase("Yandex Mail")
													|| filetype.equalsIgnoreCase("Zoho Mail")) {
												label_11.setIcon(
														new ImageIcon(Main_Frame.class.getResource("/download.png")));
												match = path;
												path = path + "/" + fname;

												clientforimap_output.createFolder(iconnforimap_output, path);
												clientforimap_output.selectFolder(iconnforimap_output, path);

												ConvertPSTOST_folder_gmail(file);
												path = match;

											} else if (filetype.equalsIgnoreCase("IMAP")
													|| filetype.equalsIgnoreCase("Hostgator email")) {
												label_11.setIcon(
														new ImageIcon(Main_Frame.class.getResource("/download.png")));
												match = path;
												path = path + "." + fname;

												clientforimap_output.createFolder(iconnforimap_output, path);
												clientforimap_output.selectFolder(iconnforimap_output, path);
												ConvertPSTOST_folder_imap(file);

												path = match;

											} else if (filetype.equalsIgnoreCase("CSV")) {

												Converteml_PSTOST_folder_CSV(file);

											} else if (filetype.equalsIgnoreCase("OST")) {

												Converteml_PSTOST_folder_PSTOST(file);

											} else if (filetype.equalsIgnoreCase("MBOX")
													|| filetype.equalsIgnoreCase("Thunderbird")
													|| filetype.equalsIgnoreCase("Opera Mail")) {
												Converteml_PSTOST_folder_MBox(file);

											} else {
												Converteml_PSTOST_folder_word(file);

											}

										}

										else if (fileoptionm.equalsIgnoreCase("OLM File (.olm)")) {
											// progressBar_message_p3.setVisible(true);
											if (filetype.equalsIgnoreCase("EML") || filetype.equalsIgnoreCase("MSG")
													|| filetype.equalsIgnoreCase("EMLX")
													|| filetype.equalsIgnoreCase("HTML")
													|| filetype.equalsIgnoreCase("MHTML")) {
												Convertolmfoldertofile(file);

											} else if (filetype.equalsIgnoreCase("VCF")
													|| filetype.equalsIgnoreCase("ICS")) {

												Convertolmfoldertovcfics(file);

											} else if (filetype.equalsIgnoreCase("OFFICE 365")
													|| filetype.equalsIgnoreCase("Live Exchange")
													|| filetype.equalsIgnoreCase("HOTMAIL")) {
												label_11.setIcon(
														new ImageIcon(Main_Frame.class.getResource("/download.png")));
												Folderuri = clientforexchange_output.createFolder(Folderuri, fname)
														.getUri();
												Convertolmfolder_exchange(file);
												Folderuri = fa;
											} else if (filetype.equalsIgnoreCase("YAHOO MAIL")
													|| filetype.equalsIgnoreCase("GMAIL")
													|| filetype.equalsIgnoreCase("Icloud")
													|| filetype.equalsIgnoreCase("GoDaddy email")

													|| filetype.equalsIgnoreCase("AOL")
													|| filetype.equalsIgnoreCase("Amazon Webmail")
													|| filetype.equalsIgnoreCase("Yandex Mail")
													|| filetype.equalsIgnoreCase("Zoho Mail")) {
												label_11.setIcon(
														new ImageIcon(Main_Frame.class.getResource("/download.png")));
												match = path;
												path = path + "/" + fname;

												clientforimap_output.createFolder(iconnforimap_output, path);
												clientforimap_output.selectFolder(iconnforimap_output, path);

												Convertolmfolderto_gmail(file);
												path = match;

											} else if (filetype.equalsIgnoreCase("IMAP")
													|| filetype.equalsIgnoreCase("Hostgator email")) {
												label_11.setIcon(
														new ImageIcon(Main_Frame.class.getResource("/download.png")));
												match = path;
												path = path + "." + fname;

												clientforimap_output.createFolder(iconnforimap_output, path);
												clientforimap_output.selectFolder(iconnforimap_output, path);
												Convertolmfolderto_imap(file);

												path = match;

											} else if (filetype.equalsIgnoreCase("CSV")) {
												ConvertolmfoldertoCSV(file);

											} else if (filetype.equalsIgnoreCase("PST")) {
												destination_path = destination_path + File.separator + fname;
												new File(destination_path).mkdirs();

												ConvertolmfoldertoPSTOST(file);
												destination_path = destination_path.replace(File.separator + fname, "");

											} else if (filetype.equalsIgnoreCase("OST")) {
												destination_path = destination_path + File.separator + fname;
												new File(destination_path).mkdirs();

												ConvertolmfoldertoPSTOST(file);
												destination_path = destination_path.replace(File.separator + fname, "");

											} else if (filetype.equalsIgnoreCase("MBOX")
													|| filetype.equalsIgnoreCase("Thunderbird")
													|| filetype.equalsIgnoreCase("Opera Mail")) {
												Convertolmfoldertombox(file);

											} else {
												Convertolmfoldertoword(file);

											}

										} else {

											// progressBar_message_p3.setVisible(true);
											if (filetype.equalsIgnoreCase("EML") || filetype.equalsIgnoreCase("MSG")
													|| filetype.equalsIgnoreCase("EMLX")
													|| filetype.equalsIgnoreCase("HTML")
													|| filetype.equalsIgnoreCase("MHTML")
													|| filetype.equalsIgnoreCase("THUNDERBIRD")) {
												long democount = 0;
												Converteml_emlx_msg_folder_file(file, democount);

											}

											else if (filetype.equalsIgnoreCase("OFFICE 365")
													|| filetype.equalsIgnoreCase("Live Exchange")
													|| filetype.equalsIgnoreCase("HOTMAIL")) {
												label_11.setIcon(
														new ImageIcon(Main_Frame.class.getResource("/download.png")));
												Folderuri = clientforexchange_output.createFolder(Folderuri, fname)
														.getUri();
												long democount = 0;
												Converteml_emlx_msg_folder_exchange(file, democount);
												Folderuri = fa;

											} else if (filetype.equalsIgnoreCase("YAHOO MAIL")
													|| filetype.equalsIgnoreCase("GMAIL")
													|| filetype.equalsIgnoreCase("Icloud")
													|| filetype.equalsIgnoreCase("GoDaddy email")

													|| filetype.equalsIgnoreCase("AOL")
													|| filetype.equalsIgnoreCase("Amazon Webmail")
													|| filetype.equalsIgnoreCase("Yandex Mail")
													|| filetype.equalsIgnoreCase("Zoho Mail")) {
												label_11.setIcon(
														new ImageIcon(Main_Frame.class.getResource("/download.png")));
												path = path + "/" + fname;

												clientforimap_output.createFolder(iconnforimap_output, path);
												clientforimap_output.selectFolder(iconnforimap_output, path);
												long democount = 0;
												Converteml_emlx_msg_folder_gmail(file, democount);
												path = path.replace("/" + fname, "");

											} else if (filetype.equalsIgnoreCase("IMAP")
													|| filetype.equalsIgnoreCase("Hostgator email")) {
												label_11.setIcon(
														new ImageIcon(Main_Frame.class.getResource("/download.png")));
												path = path + "." + fname;

												clientforimap_output.createFolder(iconnforimap_output, path);
												clientforimap_output.selectFolder(iconnforimap_output, path);
												long democount = 0;
												Converteml_emlx_msg_folder_imap(file, democount);

												path = path.replace("." + fname, "");

											} else if (filetype.equalsIgnoreCase("CSV")) {

												new File(destination_path).mkdirs();
												File file1 = new File(
														destination_path + File.separator + fname + ".csv");
												FileWriter outputfile = new FileWriter(file1);

												writer = new CSVWriter(outputfile);

												String[] header = { "Date", "Subject", "Body", "From", "To", "CC:" };

												writer.writeNext(header);
												long democount = 0;
												Converteml_emlx_msg_folder_CSV(file, writer, democount);
												writer.close();

											} else if (filetype.equalsIgnoreCase("PST")) {
												if (chckbx_seperatepst.isSelected()) {

													File[] fils = file.listFiles();

													for (int j = 0; j < fils.length; j++) {

														File filsss = fils[j];
														if (filsss.isDirectory()) {
															File[] filss = filsss.listFiles();
															if (!(filss.length == 0)) {
																for (int k = 0; k < filss.length; k++) {

																	File Filssss = filss[i];
																	fname = Filssss.getName();
																	parent = Filssss.getPath();

																	File f = new File(destination_path + File.separator
																			+ fname + ".pst");
																	if (!f.isFile()) {
																		pst = PersonalStorage.create(
																				destination_path + File.separator
																						+ fname + ".pst",
																				FileFormatVersion.Unicode);

																	}

																	long democount = 0;
																	if (chckbxRestoreToDefault.isSelected()) {
																		pst.getStore().changeDisplayName(fname);
																		Convertmaildir_folder_PSTOST(Filssss,
																				democount);
																	} else {
																		info = pst.getRootFolder().addSubFolder(fname,
																				true);
																		Converteml_emlx_msg_folder_PSTOST(Filssss,
																				democount);
																	}

																	if (i == filesfin.length - 1)
																		pst.dispose();

																	destination_path = destination_path
																			.replace(File.separator + fname, "");

																}
															} else {

																fname = filsss.getName();
																parent = filsss.getPath();

																File f = new File(destination_path + File.separator
																		+ fname + ".pst");
																if (!f.isFile()) {
																	pst = PersonalStorage.create(
																			destination_path + File.separator + fname
																					+ ".pst",
																			FileFormatVersion.Unicode);

																}

																long democount = 0;
																if (chckbxRestoreToDefault.isSelected()) {
																	pst.getStore().changeDisplayName(fname);
																	Convertmaildir_folder_PSTOST(filsss, democount);
																} else {
																	info = pst.getRootFolder().addSubFolder(fname,
																			true);
																	Converteml_emlx_msg_folder_PSTOST(filsss,
																			democount);
																}

																if (i == filesfin.length - 1)
																	pst.dispose();

																destination_path = destination_path
																		.replace(File.separator + fname, "");

															}

														}
													}

												} else {
													File f = new File(
															destination_path + File.separator + fname + ".pst");
													if (!f.isFile()) {
														pst = PersonalStorage.create(
																destination_path + File.separator + fname + ".pst",
																FileFormatVersion.Unicode);

													}

													long democount = 0;
													if (chckbxRestoreToDefault.isSelected()) {
														pst.getStore().changeDisplayName(fname);
														Convertmaildir_folder_PSTOST(file, democount);
													} else {
														info = pst.getRootFolder().addSubFolder(fname, true);
														Converteml_emlx_msg_folder_PSTOST(file, democount);
													}

													if (i == filesfin.length - 1)
														pst.dispose();

													destination_path = destination_path.replace(File.separator + fname,
															"");
												}
											} else if (filetype.equalsIgnoreCase("OST")) {
												// creating a pst/ost file
												File f = new File(destination_path + File.separator + fname + ".ost");
												if (!f.isFile()) {
													pst = PersonalStorage.create(
															destination_path + File.separator + fname + ".ost",
															FileFormatVersion.Unicode);
													pst.getStore().changeDisplayName(fileoptionm);

												}

												info = pst.getRootFolder().addSubFolder(fname, true);
												long democount = 0;
												Converteml_emlx_msg_folder_PSTOST(file, democount);

												if (i == filesfin.length - 1)
													pst.dispose();

												destination_path = destination_path.replace(File.separator + fname, "");

											} else if (filetype.equalsIgnoreCase("MBOX")) {
												new File(destination_path).mkdirs();
												wr = new MboxrdStorageWriter(
														destination_path + File.separator + fname + ".mbx", false);
												long democount = 0;
												Converteml_emlx_msg_folder_mbox(file, wr, democount);
												wr.dispose();
											} else {
												long democount = 0;
												Converteml_emlx_msg_folder_word(file, democount);
											}

										}

										if (filetype.equalsIgnoreCase("YAHOO MAIL")
												|| filetype.equalsIgnoreCase("GMAIL")
												|| filetype.equalsIgnoreCase("OFFICE 365") || filetype.equals("AOL")
												|| filetype.equalsIgnoreCase("Hotmail")
												|| filetype.equalsIgnoreCase("Icloud")
												|| filetype.equalsIgnoreCase("GoDaddy email")
												|| filetype.equalsIgnoreCase("Hostgator email")
												|| filetype.equalsIgnoreCase("Yandex Mail")
												|| filetype.equalsIgnoreCase("Amazon Webmail")
												|| filetype.equalsIgnoreCase("Zoho Mail")
												|| filetype.equalsIgnoreCase("Live Exchange")
												|| filetype.equalsIgnoreCase("IMAP")) {

											if (filetype.equalsIgnoreCase("YAHOO MAIL")) {
												destination_path = "http://login.yahoo.com";
											} else if (filetype.equalsIgnoreCase("GMAIL")) {
												destination_path = "https://mail.google.com";
											} else if (filetype.equals("AOL")) {
												destination_path = "https://login.aol.com";
											} else if (filetype.equalsIgnoreCase("Zoho Mail")) {

												destination_path = "https://accounts.zoho.in/signin?servicename=VirtualOffice&signupurl=https://www.zoho.in/mail/zohomail-pricing.html&serviceurl=https://mail.zoho.in";

											} else if (filetype.equalsIgnoreCase("Yandex Mail")) {

												destination_path = "https://mail.yandex.com/?uid=1213147137#tabs/relevant";

											} else if (filetype.equalsIgnoreCase("Amazon Webmail")) {

												destination_path = "Amazon Webmail";
											} else if (filetype.equalsIgnoreCase("GoDaddy email")) {

												destination_path = "https://sso.godaddy.com/login?app=email&realm=pass";

											} else if (filetype.equalsIgnoreCase("Icloud")) {

												destination_path = "https://www.icloud.com/mail";

											} else if (filetype.equalsIgnoreCase("Hostgator email")) {

												destination_path = "https://www.hostgator.in/login.php";

											} else if (filetype.equals("IMAP")) {
												destination_path = "IMAP";
											} else if (filetype.equals("Hotmail")) {
												destination_path = "https://outlook.live.com";
											} else if (filetype.equals("Live Exchange")) {
												destination_path = "Live Exchange";
											} else {
												destination_path = "https://outlook.office365.com";
											}
										}

									}
									String duration = Duration(starttime).toString();
									mode = (DefaultTableModel) table_fileConvertionreport_panel4.getModel();
									mode.addRow(new Object[] { fileoptionm, filetype, fname, Status, duration,
											count_destination, destination_path });
									destination_path = destination_path.replace(File.separator + fname, "");
									totalcount = totalcount + count_destination;
									mf.logger.info("File Saved " + count_destination + System.lineSeparator()
											+ "End Time : " + cal.getTime() + System.lineSeparator()
											+ "**********************************************************");

								}

								mode = (DefaultTableModel) table_fileConvertionreport_panel4.getModel();

								mode.addRow(new Object[] { "Total Message", "", "", "", "", totalcount, "" });
								mf.logger.info("File Saved " + totalcount + System.lineSeparator() + "End Time : "
										+ cal.getTime() + System.lineSeparator()
										+ "*****************************END*****************************");

							}

							destination_path = destination_path.replace(File.separator + fname, "");
							if (filetype.equalsIgnoreCase("THUNDERBIRD")) {
								JOptionPane.showMessageDialog(mf,
										"Please open the converted file from " + destination_path + " Thunderbird",
										messageboxtitle, JOptionPane.INFORMATION_MESSAGE);
							}
							if (filetype.equalsIgnoreCase("YAHOO MAIL") || filetype.equalsIgnoreCase("GMAIL")
									|| filetype.equalsIgnoreCase("OFFICE 365") || filetype.equals("AOL")
									|| filetype.equalsIgnoreCase("Live Exchange")
									|| filetype.equalsIgnoreCase("Zoho Mail") || filetype.equalsIgnoreCase("Icloud")
									|| filetype.equalsIgnoreCase("GoDaddy email")
									|| filetype.equalsIgnoreCase("Hostgator email")
									|| filetype.equalsIgnoreCase("Amazon Webmail")
									|| filetype.equalsIgnoreCase("Yandex Mail") || filetype.equalsIgnoreCase("hotmail")
									|| filetype.equalsIgnoreCase("IMAP")) {
								if (Desktop.isDesktopSupported()
										&& Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {

									if (filetype.equalsIgnoreCase("YAHOO MAIL")) {

										Desktop.getDesktop().browse(new URI("http://login.yahoo.com"));
										reportpath = "http://login.yahoo.com";
									} else if (filetype.equalsIgnoreCase("Zoho Mail")) {

										reportpath = "https://accounts.zoho.in/signin?servicename=VirtualOffice&signupurl=https://www.zoho.in/mail/zohomail-pricing.html&serviceurl=https://mail.zoho.in";
										openBrowser(reportpath);
									} else if (filetype.equalsIgnoreCase("GoDaddy email")) {

										reportpath = "https://sso.godaddy.com/login?app=email&realm=pass";
										openBrowser(reportpath);
									} else if (filetype.equalsIgnoreCase("Icloud")) {

										reportpath = "https://www.icloud.com/mail";
										openBrowser(reportpath);
									} else if (filetype.equalsIgnoreCase("Hostgator email")) {

										reportpath = "https://www.hostgator.in/login.php";
										openBrowser(reportpath);
									} else if (filetype.equalsIgnoreCase("GMAIL")) {

										Desktop.getDesktop().browse(new URI("https://mail.google.com"));
										reportpath = "https://mail.google.com";
									} else if (filetype.equalsIgnoreCase("Yandex Mail")) {

										reportpath = "https://mail.yandex.com/?uid=1213147137#tabs/relevant";
										openBrowser(reportpath);
									} else if (filetype.equals("AOL")) {

										Desktop.getDesktop().browse(new URI("https://login.aol.com"));
										reportpath = "https://login.aol.com";
									} else if (filetype.equalsIgnoreCase("Live Exchange")) {

										JOptionPane.showMessageDialog(mf,
												"Please open the converted file from Live Exchange", messageboxtitle,
												JOptionPane.INFORMATION_MESSAGE);
									} else if (filetype.equalsIgnoreCase("Hotmail")) {

										Desktop.getDesktop().browse(new URI("https://outlook.live.com"));
										reportpath = "https://outlook.live.com";
									} else if (filetype.equalsIgnoreCase("IMAP")) {

										JOptionPane.showMessageDialog(mf, "Please open the converted file from  IMAP",
												messageboxtitle, JOptionPane.INFORMATION_MESSAGE);
									} else if (filetype.equalsIgnoreCase("Amazon Webmail")) {

										JOptionPane.showMessageDialog(mf,
												"Please open the converted file from  Amazon Webmail", messageboxtitle,
												JOptionPane.INFORMATION_MESSAGE);
									} else {

										Desktop.getDesktop().browse(new URI("https://outlook.office365.com"));
										reportpath = "https://outlook.office365.com";
									}
								}

							} else {

								desktop.open(f);
								reportpath = f.getAbsolutePath();

							}

						} catch (Exception e) {

						} finally {
							Progressbar.setVisible(false);
							CardLayout card = (CardLayout) Cardlayout.getLayout();
							card.show(Cardlayout, "panel_4");
							count_eml_msg_emlx = 0;

							JOptionPane.showMessageDialog(main_multiplefile.this, "Process has Completed",
									messageboxtitle, JOptionPane.ERROR_MESSAGE,
									new ImageIcon(Main_Frame.class.getResource("/information.png")));
							// progressBar_message_p3.setVisible(false);
							try {
								if (filetype.equalsIgnoreCase("MBOX")) {
									if (!(wr == null)) {
										wr.dispose();
									}
								} else if (filetype.equalsIgnoreCase("OST") || filetype.equalsIgnoreCase("PST")) {
									if (!(pst == null)) {
										pst.dispose();

									}

								} else if (filetype.equalsIgnoreCase("CSV")) {
									if (!(writer == null)) {
										try {
											writer.close();
										} catch (IOException e) {

											e.printStackTrace();
										}
									}
								}
							} catch (Exception e) {

							}
							checky = true;
						}
					}
				});

				th.start();

			}
		});

		btn_converter_1.setBounds(923, 563, 136, 38);
		panel_3.add(btn_converter_1);
		btn_converter_1.setFont(new Font("Tahoma", Font.BOLD, 12));

		panel_3_2 = new JPanel();
		panel_3_2.setBorder(new TitledBorder(null, "", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		panel_3_2.setBackground(Color.WHITE);
		panel_3_2.setBounds(10, 400, 1055, 58);
		panel_3.add(panel_3_2, "panel_3_2");
		panel_3_2.setLayout(null);
		panel_3_2.setVisible(false);

		tf_Destination_Location = new JTextField();
		tf_Destination_Location.setBounds(64, 24, 785, 20);
		panel_3_2.add(tf_Destination_Location);
		tf_Destination_Location.setEditable(false);
		tf_Destination_Location.setColumns(10);

		btn_Destination = new JButton("");
		btn_Destination.setToolTipText("click here to go path to save");
		btn_Destination.setRolloverEnabled(false);
		btn_Destination.setRequestFocusEnabled(false);
		btn_Destination.setOpaque(false);
		btn_Destination.setFocusable(false);
		btn_Destination.setFocusTraversalKeysEnabled(false);
		btn_Destination.setFocusPainted(false);
		btn_Destination.setDefaultCapable(false);
		btn_Destination.setContentAreaFilled(false);
		btn_Destination.setBorderPainted(false);
		btn_Destination.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				btn_Destination.setIcon(new ImageIcon(Main_Frame.class.getResource("/path-to-save-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				btn_Destination.setIcon(new ImageIcon(Main_Frame.class.getResource("/path-to-save-btn.png")));
			}
		});

		btn_Destination.setIcon(new ImageIcon(Main_Frame.class.getResource("/path-to-save-btn.png")));
		btn_Destination.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					destinationPath();
				} catch (Exception e1) {

					e1.printStackTrace();
				}

			}
		});
		btn_Destination.setBounds(870, 12, 150, 38);
		panel_3_2.add(btn_Destination);
		btn_Destination.setFont(new Font("Tahoma", Font.BOLD, 12));

		progressBar_message_p3 = new JProgressBar();
		progressBar_message_p3.setBackground(Color.WHITE);
		progressBar_message_p3.setBounds(10, 464, 6, 7);
		// progressBar_message_p3.setVisible(false);

		// panel_3.add(progressBar_message_p3);

		panel_3_ = new JPanel();
		panel_3_.setBounds(12, 46, 1053, 336);
		panel_3.add(panel_3_);
		panel_3_.setLayout(new CardLayout(0, 0));

		panel_3_1_1 = new JPanel();
		panel_3_1_1.setBorder(new TitledBorder(null, "", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		panel_3_1_1.setBackground(Color.WHITE);
		panel_3_.add(panel_3_1_1, "panel_3_1_1");
		panel_3_1_1.setLayout(null);

		JPanel panel_mailfilter = new JPanel();
		panel_mailfilter.setBorder(new TitledBorder(null, "", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		panel_mailfilter.setBackground(Color.WHITE);
		panel_mailfilter.setBounds(547, 32, 496, 36);
		panel_3_1_1.add(panel_mailfilter);
		panel_mailfilter.setLayout(null);

		dateChooser_mail_fromdate = new JDateChooser();
		dateChooser_mail_fromdate.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				dateChooser_mail_fromdate.setIcon(new ImageIcon(Main_Frame.class.getResource("/cal-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				dateChooser_mail_fromdate.setIcon(new ImageIcon(Main_Frame.class.getResource("/cal-btn.png")));
			}
		});
		dateChooser_mail_fromdate.setIcon(new ImageIcon(Main_Frame.class.getResource("/cal-btn.png")));
		dateChooser_mail_fromdate.getCalendarButton().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				Calendar cal2 = Calendar.getInstance();

				cal2.set(Calendar.HOUR_OF_DAY, 00);
				cal2.set(Calendar.MINUTE, 00);
				cal2.set(Calendar.SECOND, 00);
				Date startdate = cal2.getTime();
				dateChooser_mail_fromdate.setMaxSelectableDate(startdate);
			}
		});
		dateChooser_mail_fromdate.setBounds(91, 11, 111, 22);
		dateChooser_mail_fromdate.getCalendarButton().setFont(new Font("Tahoma", Font.BOLD, 15));
		dateChooser_mail_fromdate.setEnabled(false);
		panel_mailfilter.add(dateChooser_mail_fromdate);

		dateChooser_mail_tilldate = new JDateChooser();
		dateChooser_mail_tilldate.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				dateChooser_mail_tilldate.setIcon(new ImageIcon(Main_Frame.class.getResource("/cal-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				dateChooser_mail_tilldate.setIcon(new ImageIcon(Main_Frame.class.getResource("/cal-btn.png")));
			}
		});
		dateChooser_mail_tilldate.setIcon(new ImageIcon(Main_Frame.class.getResource("/cal-btn.png")));
		dateChooser_mail_tilldate.getCalendarButton().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Calendar cal3 = Calendar.getInstance();
				cal3.set(Calendar.HOUR_OF_DAY, 23);
				cal3.set(Calendar.MINUTE, 59);
				cal3.set(Calendar.SECOND, 59);
				Date enddate = cal3.getTime();
				dateChooser_mail_tilldate.setMaxSelectableDate(enddate);
				try {
					Calendar calendarstartdate = dateChooser_mail_fromdate.getCalendar();
					calendarstartdate.set(Calendar.HOUR_OF_DAY, 00);
					calendarstartdate.set(Calendar.MINUTE, 00);
					calendarstartdate.set(Calendar.SECOND, 00);
					dateChooser_mail_tilldate.setMinSelectableDate(calendarstartdate.getTime());
				} catch (Exception e1) {
					return;
				}
			}
		});
		dateChooser_mail_tilldate.getCalendarButton().setFont(new Font("Tahoma", Font.BOLD, 15));
		dateChooser_mail_tilldate.setEnabled(false);
		dateChooser_mail_tilldate.setBounds(336, 11, 111, 19);
		panel_mailfilter.add(dateChooser_mail_tilldate);

		JLabel label_3 = new JLabel("End Date\r\n");
		label_3.setBounds(222, 11, 96, 19);
		panel_mailfilter.add(label_3);
		label_3.setFont(new Font("Tahoma", Font.PLAIN, 11));

		JLabel label_1 = new JLabel("Start Date");
		label_1.setFont(new Font("Tahoma", Font.BOLD, 13));
		label_1.setBounds(10, 11, 71, 20);
		panel_mailfilter.add(label_1);
		label_3.setFont(new Font("Tahoma", Font.BOLD, 15));

		JPanel panel_checkboxcalenderfilter = new JPanel();
		panel_checkboxcalenderfilter.setBackground(Color.WHITE);
		panel_checkboxcalenderfilter.setBounds(12, 86, 119, 36);
		// panel_3_1_1.add(panel_checkboxcalenderfilter);
		panel_checkboxcalenderfilter.setLayout(null);

		JPanel panel_Calender = new JPanel();
		panel_Calender.setBackground(Color.WHITE);
		panel_Calender.setBounds(12, 119, 1050, 53);
		// panel_3_1_1.add(panel_Calender);
		panel_Calender.setLayout(null);

		chckbx_calender_box = new JCheckBox("Calendar Filter");
		chckbx_calender_box.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent arg0) {
				if (arg0.getStateChange() == ItemEvent.SELECTED) {
					panel_Calender.setEnabled(true);
					dateChooser_calendar_end.setEnabled(true);
					dateChooser_calender_start.setEnabled(true);
				} else {
					panel_Calender.setEnabled(false);
					dateChooser_calendar_end.setEnabled(false);
					dateChooser_calender_start.setEnabled(false);
				}
			}
		});
		chckbx_calender_box.setBackground(Color.WHITE);
		chckbx_calender_box.setBounds(0, 9, 113, 25);
		panel_checkboxcalenderfilter.add(chckbx_calender_box);

		dateChooser_calender_start = new JDateChooser();
		dateChooser_calender_start.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				dateChooser_calender_start.setIcon(new ImageIcon(Main_Frame.class.getResource("/cal-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				dateChooser_calender_start.setIcon(new ImageIcon(Main_Frame.class.getResource("/cal-btn.png")));
			}
		});
		dateChooser_calender_start.setIcon(new ImageIcon(Main_Frame.class.getResource("/cal-btn.png")));
		dateChooser_calender_start.getCalendarButton().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Calendar cal2 = Calendar.getInstance();

				cal2.set(Calendar.HOUR_OF_DAY, 00);
				cal2.set(Calendar.MINUTE, 00);
				cal2.set(Calendar.SECOND, 00);
				Date startdate = cal2.getTime();
				dateChooser_calender_start.setMaxSelectableDate(startdate);
			}
		});
		dateChooser_calender_start.getCalendarButton().setFont(new Font("Tahoma", Font.BOLD, 15));
		dateChooser_calender_start.setEnabled(false);
		dateChooser_calender_start.setBounds(101, 25, 168, 20);
		panel_Calender.add(dateChooser_calender_start);

		dateChooser_calendar_end = new JDateChooser();
		dateChooser_calendar_end.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				dateChooser_calendar_end.setIcon(new ImageIcon(Main_Frame.class.getResource("/cal-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				dateChooser_calendar_end.setIcon(new ImageIcon(Main_Frame.class.getResource("/cal-btn.png")));
			}
		});
		dateChooser_calendar_end.setIcon(new ImageIcon(Main_Frame.class.getResource("/cal-btn.png")));
		dateChooser_calendar_end.getCalendarButton().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Calendar cal3 = Calendar.getInstance();
				cal3.set(Calendar.HOUR_OF_DAY, 23);
				cal3.set(Calendar.MINUTE, 59);
				cal3.set(Calendar.SECOND, 59);
				Date enddate = cal3.getTime();
				dateChooser_calendar_end.setMaxSelectableDate(enddate);
				try {
					Calendar calendarstartdate = dateChooser_mail_fromdate.getCalendar();
					calendarstartdate.set(Calendar.HOUR_OF_DAY, 00);
					calendarstartdate.set(Calendar.MINUTE, 00);
					calendarstartdate.set(Calendar.SECOND, 00);
					dateChooser_calendar_end.setMinSelectableDate(calendarstartdate.getTime());
				} catch (Exception e1) {
					return;
				}
			}
		});
		dateChooser_calendar_end.setBounds(893, 25, 147, 19);
		panel_Calender.add(dateChooser_calendar_end);
		dateChooser_calendar_end.getCalendarButton().setFont(new Font("Tahoma", Font.BOLD, 15));
		dateChooser_calendar_end.setEnabled(false);

		JLabel label = new JLabel("End Date");
		label.setBounds(815, 25, 79, 19);
		panel_Calender.add(label);
		label.setFont(new Font("Tahoma", Font.BOLD, 15));

		JLabel label_2 = new JLabel("Start Date");
		label_2.setBounds(12, 25, 91, 20);
		panel_Calender.add(label_2);
		label_2.setFont(new Font("Tahoma", Font.BOLD, 15));

		panel_taskfilter = new JPanel();
		panel_taskfilter.setBorder(new TitledBorder(null, "", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		panel_taskfilter.setBackground(Color.WHITE);
		panel_taskfilter.setBounds(547, 105, 496, 47);
		panel_3_1_1.add(panel_taskfilter);
		panel_taskfilter.setLayout(null);
		JLabel label_8 = new JLabel("Start Date");
		label_8.setFont(new Font("Tahoma", Font.BOLD, 13));
		label_8.setBounds(10, 11, 75, 20);
		panel_taskfilter.add(label_8);

		JLabel label_9 = new JLabel("End Date");
		label_9.setFont(new Font("Tahoma", Font.BOLD, 14));
		label_9.setBounds(225, 12, 92, 19);
		panel_taskfilter.add(label_9);

		dateChooser_task_start_date = new JDateChooser();
		dateChooser_task_start_date.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				dateChooser_task_start_date.setIcon(new ImageIcon(Main_Frame.class.getResource("/cal-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				dateChooser_task_start_date.setIcon(new ImageIcon(Main_Frame.class.getResource("/cal-btn.png")));
			}
		});
		dateChooser_task_start_date.setIcon(new ImageIcon(Main_Frame.class.getResource("/cal-btn.png")));
		dateChooser_task_start_date.getCalendarButton().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Calendar cal2 = Calendar.getInstance();
				cal2.set(Calendar.HOUR_OF_DAY, 00);
				cal2.set(Calendar.MINUTE, 00);
				cal2.set(Calendar.SECOND, 00);
				Date startdate = cal2.getTime();
				dateChooser_task_start_date.setMaxSelectableDate(startdate);

			}
		});
		dateChooser_task_start_date.setEnabled(false);
		dateChooser_task_start_date.setBounds(95, 9, 109, 22);
		panel_taskfilter.add(dateChooser_task_start_date);

		dateChooser_task_end_date = new JDateChooser();
		dateChooser_task_end_date.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				dateChooser_task_end_date.setIcon(new ImageIcon(Main_Frame.class.getResource("/cal-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				dateChooser_task_end_date.setIcon(new ImageIcon(Main_Frame.class.getResource("/cal-btn.png")));
			}
		});
		dateChooser_task_end_date.setIcon(new ImageIcon(Main_Frame.class.getResource("/cal-btn.png")));
		dateChooser_task_start_date.getCalendarButton().addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Calendar cal3 = Calendar.getInstance();
				cal3.set(Calendar.HOUR_OF_DAY, 23);
				cal3.set(Calendar.MINUTE, 59);
				cal3.set(Calendar.SECOND, 59);
				Date enddate = cal3.getTime();
				dateChooser_task_end_date.setMaxSelectableDate(enddate);
				try {
					Calendar calendarstartdate = dateChooser_mail_fromdate.getCalendar();
					calendarstartdate.set(Calendar.HOUR_OF_DAY, 00);
					calendarstartdate.set(Calendar.MINUTE, 00);
					calendarstartdate.set(Calendar.SECOND, 00);
					dateChooser_task_end_date.setMinSelectableDate(calendarstartdate.getTime());
				} catch (Exception e1) {
					return;
				}
			}
		});
		dateChooser_task_end_date.setEnabled(false);
		dateChooser_task_end_date.setBounds(333, 6, 116, 22);
		panel_taskfilter.add(dateChooser_task_end_date);

		task_box = new JCheckBox("Task Filter");
		task_box.setToolTipText("click here to task filter");
		task_box.setRolloverEnabled(false);
		task_box.setRequestFocusEnabled(false);
		task_box.setOpaque(false);
		task_box.setFocusable(false);
		task_box.setFocusPainted(false);
		task_box.setContentAreaFilled(false);
		task_box.setFont(new Font("Tahoma", Font.BOLD, 12));
		task_box.setBounds(547, 82, 113, 16);
		panel_3_1_1.add(task_box);
		task_box.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent arg0) {
				if (arg0.getStateChange() == ItemEvent.SELECTED) {

					dateChooser_task_end_date.setEnabled(true);
					dateChooser_task_start_date.setEnabled(true);
				} else {

					dateChooser_task_end_date.setEnabled(false);
					dateChooser_task_start_date.setEnabled(false);
				}
			}
		});
		task_box.setBackground(Color.WHITE);

		chckbx_Mail_Filter = new JCheckBox("Mail Filter");
		chckbx_Mail_Filter.setToolTipText("click here to mail filter");
		chckbx_Mail_Filter.setRolloverEnabled(false);
		chckbx_Mail_Filter.setRequestFocusEnabled(false);
		chckbx_Mail_Filter.setOpaque(false);
		chckbx_Mail_Filter.setFocusable(false);
		chckbx_Mail_Filter.setFocusPainted(false);
		chckbx_Mail_Filter.setContentAreaFilled(false);
		chckbx_Mail_Filter.setFont(new Font("Tahoma", Font.BOLD, 12));
		chckbx_Mail_Filter.setBounds(547, 7, 113, 25);
		panel_3_1_1.add(chckbx_Mail_Filter);
		chckbx_Mail_Filter.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent arg0) {
				if (arg0.getStateChange() == ItemEvent.SELECTED) {
					panel_mailfilter.setEnabled(true);
					dateChooser_mail_fromdate.setEnabled(true);
					dateChooser_mail_tilldate.setEnabled(true);
				}

				else {
					panel_mailfilter.setEnabled(false);
					dateChooser_mail_fromdate.setEnabled(false);
					dateChooser_mail_tilldate.setEnabled(false);
				}

			}
		});

		chckbx_Mail_Filter.setBackground(Color.WHITE);

		panel_5 = new JPanel();
		panel_5.setBorder(new TitledBorder(null, "", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		panel_5.setBackground(Color.WHITE);
		panel_5.setBounds(547, 227, 496, 38);
		panel_5.setVisible(false);
		panel_3_1_1.add(panel_5);
		panel_5.setLayout(null);

		JPopupMenu menu = mf.menu;

		comboBox = new JComboBox<String>();
		comboBox.setBounds(192, 11, 209, 16);
		panel_5.add(comboBox);
		comboBox.addItem("Subject");
		comboBox.addItem("Subject_Date(DD-MM-YYYY)");
		comboBox.addItem("Subject_Date(MM-DD-YYYY)");
		comboBox.addItem("Subject_Date(YYYY-MM-DD)");
		comboBox.addItem("Subject_Date(YYYY-DD-MM)");
		comboBox.addItem("(DD-MM-YYYY)Date_Subject");
		comboBox.addItem("(MM-DD-YYYY)Date_Subject");
		comboBox.addItem("(YYYY-MM-DD)Date_Subject");
		comboBox.addItem("(YYYY-DD-MM)Date_Subject");
		comboBox.addItem("From_Subject_Date(DD-MM-YYYY)");
		comboBox.addItem("From_Subject_Date(MM-DD-YYYY)");
		comboBox.addItem("From_Subject_Date(YYYY-MM-DD)");
		comboBox.addItem("From_Subject_Date(YYYY-DD-MM)");
		comboBox.addItem("(DD-MM-YYYY)Date_From_Subject");
		comboBox.addItem("(MM-DD-YYYY)Date_From_Subject");
		comboBox.addItem("(YYYY-MM-DD)Date_From_Subject");
		comboBox.addItem("(YYYY-DD-MM)Date_From_Subject");

		panel_5.add(comboBox);

		comboBox.setVisible(false);

		panel_3_1_2 = new JPanel();
		panel_3_1_2.setBorder(new TitledBorder(null, "", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		panel_3_1_2.setBackground(Color.WHITE);
		panel_3_.add(panel_3_1_2, "panel_3_1_2");
		panel_3_1_2.setLayout(null);

		lblLive_Chat_p3 = new JLabel("More Help");
		lblLive_Chat_p3.setForeground(Color.RED);
		lblLive_Chat_p3.setCursor(cursor);
		lblLive_Chat_p3.setFont(new Font("Tahoma", Font.PLAIN, 14));
		lblLive_Chat_p3.setBounds(884, 16, 66, 25);
		lblLive_Chat_p3.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {

				openBrowser("http://messenger.providesupport.com/messenger/0pi295uz3ga080c7lxqxxuaoxr.html");

			}
		});

		panel_3_1_2.add(lblLive_Chat_p3);

		lbl_connecting_p3 = new JLabel("");
		lbl_connecting_p3.setBounds(447, 201, 85, 32);
		panel_3_1_2.add(lbl_connecting_p3);
		lbl_connecting_p3.setIcon(new ImageIcon(Main_Frame.class.getResource("/loading.gif")));
		lbl_connecting_p3.setVisible(false);

		JLabel lblNewLabel = new JLabel("User Name");
		lblNewLabel.setFont(new Font("Tahoma", Font.BOLD, 14));
		lblNewLabel.setBounds(29, 16, 85, 25);
		panel_3_1_2.add(lblNewLabel);

		JLabel lblNewLabel_1 = new JLabel("Password ");
		lblNewLabel_1.setFont(new Font("Tahoma", Font.BOLD, 14));
		lblNewLabel_1.setBounds(29, 43, 77, 25);
		panel_3_1_2.add(lblNewLabel_1);

		textField_username_p3 = new JTextField();
		textField_username_p3.setHorizontalAlignment(JTextField.CENTER);
		textField_username_p3.setComponentPopupMenu(menu);
		textField_username_p3.setBounds(332, 13, 379, 25);
		panel_3_1_2.add(textField_username_p3);
		textField_username_p3.setColumns(10);

		passwordField_p3 = new JPasswordField();
		passwordField_p3.setHorizontalAlignment(JTextField.CENTER);
		passwordField_p3.setComponentPopupMenu(menu);
		passwordField_p3.setBounds(332, 49, 379, 25);
		panel_3_1_2.add(passwordField_p3);

		JCheckBox chckbxShowPassword_p3 = new JCheckBox("Show Password");
		chckbxShowPassword_p3.setRolloverEnabled(false);
		chckbxShowPassword_p3.setRequestFocusEnabled(false);
		chckbxShowPassword_p3.setOpaque(false);
		chckbxShowPassword_p3.setFocusable(false);
		chckbxShowPassword_p3.setFocusPainted(false);
		chckbxShowPassword_p3.setContentAreaFilled(false);
		chckbxShowPassword_p3.setBackground(Color.WHITE);
		chckbxShowPassword_p3.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent arg0) {
				if (arg0.getStateChange() == ItemEvent.SELECTED) {
					passwordField_p3.setEchoChar((char) 0);
				}

				else {
					passwordField_p3.setEchoChar('*');
				}
			}
		});
		chckbxShowPassword_p3.setFont(new Font("Tahoma", Font.BOLD, 13));
		chckbxShowPassword_p3.setBounds(743, 48, 143, 25);
		panel_3_1_2.add(chckbxShowPassword_p3);

		JButton btn_Sign_p3 = new JButton("");
		btn_Sign_p3.setToolTipText("Click here to sign in");
		btn_Sign_p3.setDefaultCapable(false);
		btn_Sign_p3.setBorderPainted(false);
		btn_Sign_p3.setRolloverEnabled(false);
		btn_Sign_p3.setRequestFocusEnabled(false);
		btn_Sign_p3.setOpaque(false);
		btn_Sign_p3.setFocusable(false);
		btn_Sign_p3.setFocusTraversalKeysEnabled(false);
		btn_Sign_p3.setFocusPainted(false);
		btn_Sign_p3.setContentAreaFilled(false);
		btn_Sign_p3.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				btn_Sign_p3.setIcon(new ImageIcon(Main_Frame.class.getResource("/sign-in-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				btn_Sign_p3.setIcon(new ImageIcon(Main_Frame.class.getResource("/sign-in-btn.png")));
			}
		});

		btn_Sign_p3.setIcon(new ImageIcon(Main_Frame.class.getResource("/sign-in-btn.png")));

		btn_Sign_p3.setBounds(786, 187, 123, 38);
		panel_3_1_2.add(btn_Sign_p3);
		btn_Sign_p3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				try {
					domain_p3 = textField_domain_name_p3.getText().replaceAll("//s", "");
					domain_p3 = domain_p3.trim();
				} catch (Exception a) {
					domain_p3 = "";
				}
				try {
					username_p3 = textField_username_p3.getText().replaceAll("//s", "");
					username_p3 = username_p3.trim();
				} catch (Exception a) {
					username_p3 = "";
				}
				try {
					password_p3 = new String(passwordField_p3.getPassword());
					password_p3 = password_p3.trim();
				} catch (Exception a) {
					password_p3 = "";
				}
				try {
					portnofiletype = Integer.parseInt(tf_portNo_p3.getText().replaceAll("//s", ""));
				} catch (Exception a) {

				}
				chckbxShowPassword_p3.setEnabled(false);
				tf_portNo_p3.setEnabled(false);
				comboBox_fileDestination_type.setEnabled(false);
				passwordField_p3.setEnabled(false);
				textField_username_p3.setEnabled(false);
				textField_domain_name_p3.setEnabled(false);
				if (username_p3.equalsIgnoreCase("") || password_p3.equalsIgnoreCase("")) {

					if (username_p3.equalsIgnoreCase("") && password_p3.equalsIgnoreCase("")) {
						JOptionPane.showMessageDialog(mf, "User name and Password fields can not be empty",
								messageboxtitle, JOptionPane.ERROR_MESSAGE,
								new ImageIcon(Main_Frame.class.getResource("/information.png")));

					} else if (username_p3.equalsIgnoreCase("")) {

						JOptionPane.showMessageDialog(mf, "User name field can not be empty", messageboxtitle,
								JOptionPane.ERROR_MESSAGE,
								new ImageIcon(Main_Frame.class.getResource("/information.png")));

					} else if (password_p3.equalsIgnoreCase("")) {

						JOptionPane.showMessageDialog(mf, "Password field can not be empty", messageboxtitle,
								JOptionPane.ERROR_MESSAGE,
								new ImageIcon(Main_Frame.class.getResource("/information.png")));

					}
					btn_signout_p3.setVisible(true);
					chckbxShowPassword_p3.setEnabled(true);
					comboBox_fileDestination_type.setEnabled(true);
					passwordField_p3.setEnabled(true);
					textField_username_p3.setEnabled(true);
					textField_domain_name_p3.setEnabled(true);

				} else if (filetype.equalsIgnoreCase("Live Exchange") && domain_p3.equalsIgnoreCase("")) {

					JOptionPane.showMessageDialog(mf, "Computer Name or IP Address field can not be empty",
							messageboxtitle, JOptionPane.ERROR_MESSAGE,
							new ImageIcon(Main_Frame.class.getResource("/information.png")));
					comboBox_FiletypeChooser.setEnabled(true);

					btn_next_pane2.setEnabled(true);
					btn_signout_p3.setVisible(true);
					comboBox_fileDestination_type.setEnabled(true);
					passwordField_p3.setEnabled(true);
					textField_username_p3.setEnabled(true);
					chckbxShowPassword_p3.setEnabled(true);
					textField_domain_name_p3.setEnabled(true);

				} else if (filetype.equalsIgnoreCase("IMAP") && domain_p3.equalsIgnoreCase("")) {

					JOptionPane.showMessageDialog(mf, "IMAP Host field can not be empty", messageboxtitle,
							JOptionPane.ERROR_MESSAGE, new ImageIcon(Main_Frame.class.getResource("/information.png")));
					comboBox_FiletypeChooser.setEnabled(true);

					btn_next_pane2.setEnabled(true);
					btn_signout_p3.setVisible(true);
					comboBox_fileDestination_type.setEnabled(true);
					passwordField_p3.setEnabled(true);
					textField_username_p3.setEnabled(true);
					chckbxShowPassword_p3.setEnabled(true);
					textField_domain_name_p3.setEnabled(true);

				} else if (filetype.equalsIgnoreCase("IMAP") && tf_portNo_p3.getText().isEmpty()) {

					JOptionPane.showMessageDialog(mf, "Port No field cann't be empty", messageboxtitle,
							JOptionPane.ERROR_MESSAGE, new ImageIcon(Main_Frame.class.getResource("/information.png")));
					comboBox_FiletypeChooser.setEnabled(true);
					btn_signout_p3.setVisible(true);
					comboBox_fileDestination_type.setEnabled(true);
					passwordField_p3.setEnabled(true);
					textField_username_p3.setEnabled(true);
					chckbxShowPassword_p3.setEnabled(true);
					textField_domain_name_p3.setEnabled(true);

					btn_next_pane2.setEnabled(true);

				} else if (!(isValid(username_p3))) {

					JOptionPane.showMessageDialog(mf, "Please enter a valid username", messageboxtitle,
							JOptionPane.ERROR_MESSAGE, new ImageIcon(Main_Frame.class.getResource("/information.png")));
					btn_signout_p3.setVisible(true);
					btn_signout_p3.setVisible(true);
					comboBox_fileDestination_type.setEnabled(true);
					passwordField_p3.setEnabled(true);
					textField_username_p3.setEnabled(true);
					chckbxShowPassword_p3.setEnabled(true);
					textField_domain_name_p3.setEnabled(true);
				} else {

					th = new Thread(new Runnable() {

						@Override
						public void run() {
							lbl_connecting_p3.setVisible(true);

							try {

								btn_previous_p3.setEnabled(false);
								btn_converter_1.setEnabled(false);
								btn_converter_1.setToolTipText(null);

								if (filetype.equalsIgnoreCase("OFFICE 365")) {
									conntiontooffice365_output();
									chckbxSaveInSame.setVisible(false);
									chckbx_splitpst.setVisible(false);
								}
								if (filetype.equalsIgnoreCase("HOTMAIL")) {
									conntiontohotmail_output();
									chckbxSaveInSame.setVisible(false);
									chckbx_splitpst.setVisible(false);

								} else if (filetype.equalsIgnoreCase("Yandex Mail")) {
									connectiontoYandex_output();
									chckbxSaveInSame.setVisible(false);
									chckbx_splitpst.setVisible(false);

								} else if (filetype.equalsIgnoreCase("Zoho Mail")) {
									connectiontozoho_output();
									chckbxSaveInSame.setVisible(false);
									chckbx_splitpst.setVisible(false);

								} else if (filetype.equalsIgnoreCase("Amazon Webmail")) {
									connectiontoinaws_output();
									chckbxSaveInSame.setVisible(false);
									chckbx_splitpst.setVisible(false);

								} else if (filetype.equalsIgnoreCase("Hostgator email")) {
									connectiontoHostgator_output();
									chckbxSaveInSame.setVisible(false);
									chckbx_splitpst.setVisible(false);

								} else if (filetype.equalsIgnoreCase("Icloud")) {
									connectiontoicloud_output();
									chckbxSaveInSame.setVisible(false);
									chckbx_splitpst.setVisible(false);

								} else if (filetype.equalsIgnoreCase("GoDaddy email")) {
									connectiontoGoDaddy_output();
									chckbxSaveInSame.setVisible(false);
									chckbx_splitpst.setVisible(false);

								} else if (filetype.equalsIgnoreCase("GMAIL")) {
									connectiontogmail_output();
									chckbxSaveInSame.setVisible(false);
									chckbx_splitpst.setVisible(false);

								} else if (filetype.equalsIgnoreCase("Live Exchange")) {
									connectionwithexchangeserver_output();
									chckbxSaveInSame.setVisible(false);
									chckbx_splitpst.setVisible(false);

								} else if (filetype.equalsIgnoreCase("IMAP")) {
									connectiontoimap_output();
									chckbxSaveInSame.setVisible(false);
									chckbx_splitpst.setVisible(false);
								} else if (filetype.equalsIgnoreCase("YAHOO MAIL")) {
									connectiontoyahoo_output();
									chckbxSaveInSame.setVisible(false);
									chckbx_splitpst.setVisible(false);

								} else if (filetype.equalsIgnoreCase("AOL")) {
									connectiontoaol_output();
									chckbxSaveInSame.setVisible(false);
									chckbx_splitpst.setVisible(false);

								}
								panel_3_1_2.setVisible(false);
								panel_3_1_2.setVisible(true);

//								chckbxSaveInSame.setVisible(true);
//								chckbx_splitpst.setVisible(true);

								CardLayout card = (CardLayout) panel_3_.getLayout();
								card.show(panel_3_, "panel_3_1_1");

								textField_customfolder.setEditable(false);
								btn_signout_p3.setVisible(true);
								btn_converter_1.setEnabled(true);
								btn_converter_1.setVisible(true);
								btn_converter_1.setToolTipText("Click here to Convert ");
								output = true;

							} catch (Exception e) {
								if (filetype.equalsIgnoreCase("Gmail")) {
									if (e.getMessage().contains(
											"AE_1_2_0002 NO [AUTHENTICATIONFAILED] Invalid credentials (Failure)")) {
										JOptionPane.showMessageDialog(mf,
												"Connection Not Estalished with Gmail please check your Credantial OR Otherwise allow 3rd party app to acess your account",
												messageboxtitle, JOptionPane.ERROR_MESSAGE,
												new ImageIcon(Main_Frame.class.getResource("/information.png")));
									} else if (e.getMessage().contains(" Application-specific password required: ")) {
										JOptionPane.showMessageDialog(mf, "Application specific password required",
												messageboxtitle, JOptionPane.ERROR_MESSAGE,
												new ImageIcon(Main_Frame.class.getResource("/information.png")));
									} else {
										JOptionPane.showMessageDialog(mf, "Connection not established", messageboxtitle,
												JOptionPane.ERROR_MESSAGE,
												new ImageIcon(Main_Frame.class.getResource("/information.png")));
									}
								} else if (filetype.equalsIgnoreCase("Yahoo Mail")) {
									if (e.getMessage().contains(
											"AE_3_2_0002 NO [AUTHORIZATIONFAILED] LOGIN Invalid credentials")) {
										JOptionPane.showMessageDialog(mf,
												"Connection Not Estalished with Yahoo Mail please check your Credantial Otherwise allow 3rd party app to acess your account",
												messageboxtitle, JOptionPane.ERROR_MESSAGE,
												new ImageIcon(Main_Frame.class.getResource("/information.png")));
									} else if (e.getMessage().contains(" Application-specific password required: ")) {
										JOptionPane.showMessageDialog(mf, "Application specific password required",
												messageboxtitle, JOptionPane.ERROR_MESSAGE,
												new ImageIcon(Main_Frame.class.getResource("/information.png")));
									} else {
										JOptionPane.showMessageDialog(mf, "Connection not established", messageboxtitle,
												JOptionPane.ERROR_MESSAGE,
												new ImageIcon(Main_Frame.class.getResource("/information.png")));
									}
								} else if (e.getMessage().contains(" Application-specific password required: ")) {
									JOptionPane.showMessageDialog(mf, "Application specific password required",
											messageboxtitle, JOptionPane.ERROR_MESSAGE,
											new ImageIcon(Main_Frame.class.getResource("/information.png")));
								} else {
									JOptionPane.showMessageDialog(mf, "Connection not established", messageboxtitle,
											JOptionPane.ERROR_MESSAGE,
											new ImageIcon(Main_Frame.class.getResource("/information.png")));
								}

							} finally {
								lbl_connecting_p3.setVisible(false);

								tf_portNo_p3.setEnabled(true);

								passwordField_p3.setEnabled(true);
								textField_username_p3.setEnabled(true);
								textField_domain_name_p3.setEnabled(true);
								chckbxShowPassword_p3.setEnabled(true);
								btn_previous_p3.setEnabled(true);

							}

						}
					});
					th.start();

				}
			}
		});
		btn_Sign_p3.setFont(new Font("Tahoma", Font.BOLD, 14));

		panel_3_1_2_1 = new JPanel();
		panel_3_1_2_1.setBackground(Color.WHITE);
		panel_3_1_2_1.setBounds(10, 84, 710, 53);
		panel_3_1_2.add(panel_3_1_2_1);
		panel_3_1_2_1.setVisible(false);
		panel_3_1_2_1.setLayout(null);

		textField_domain_name_p3 = new JTextField();
		textField_domain_name_p3.setHorizontalAlignment(JTextField.CENTER);
		textField_domain_name_p3.setComponentPopupMenu(menu);
		textField_domain_name_p3.setBounds(320, 15, 383, 26);
		panel_3_1_2_1.add(textField_domain_name_p3);
		textField_domain_name_p3.setColumns(10);

		lbl_Domain = new JLabel("");
		lbl_Domain.setBounds(9, 15, 281, 27);
		panel_3_1_2_1.add(lbl_Domain);
		lbl_Domain.setFont(new Font("Tahoma", Font.BOLD, 14));

		lblPortNo = new JLabel("PORT NO");
		lblPortNo.setFont(new Font("Tahoma", Font.BOLD, 14));
		lblPortNo.setBounds(29, 148, 158, 32);
		panel_3_1_2.add(lblPortNo);

		tf_portNo_p3 = new JTextField();
		tf_portNo_p3.setFont(new Font("Tahoma", Font.PLAIN, 11));
		tf_portNo_p3.setHorizontalAlignment(JTextField.CENTER);
		tf_portNo_p3.setBounds(332, 148, 379, 32);
		tf_portNo_p3.setText(Integer.toString(993));
		panel_3_1_2.add(tf_portNo_p3);
		tf_portNo_p3.setColumns(10);

		panel = new JPanel();
		panel.setBorder(new TitledBorder(null, "", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		panel.setBackground(Color.WHITE);
		panel.setBounds(29, 272, 1014, 53);
		panel_3_1_2.add(panel);
		panel.setLayout(null);

		lblMakeSureYou = new JLabel("Please  Click on The Link");
		lblMakeSureYou.setForeground(Color.BLUE);
		lblMakeSureYou.setBounds(10, 11, 188, 32);
		panel.add(lblMakeSureYou);
		lblMakeSureYou.setFont(new Font("Tahoma", Font.BOLD, 14));

		lblEnableImap_p3 = new JLabel("<HTML><U>To Enable IMAP</U></HTML>");
		lblEnableImap_p3.setBounds(757, 17, 77, 25);
		lblEnableImap_p3.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				mf.openbrowserenableimap(filetype);
			}
		});
		panel.add(lblEnableImap_p3);
		lblEnableImap_p3.setForeground(Color.RED);
		lblEnableImap_p3.setCursor(cursor);
		lblEnableImap_p3.setFont(new Font("Tahoma", Font.PLAIN, 11));

		lblTurnOffTwo_p3 = new JLabel("Turn Off Two Step Verification");
		lblTurnOffTwo_p3.setBounds(208, 8, 516, 35);
		lblTurnOffTwo_p3.setCursor(cursor);
		panel.add(lblTurnOffTwo_p3);
		lblTurnOffTwo_p3.setForeground(Color.RED);
		lblTurnOffTwo_p3.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				mf.openbrowserturntwostepoff(filetype);

			}
		});
		lblTurnOffTwo_p3.setFont(new Font("Tahoma", Font.PLAIN, 11));

		lblNewLabel_5 = new JLabel("(Use third party App Password)");
		lblNewLabel_5.setForeground(Color.RED);
		lblNewLabel_5.setBounds(10, 62, 325, 18);
		panel_3_1_2.add(lblNewLabel_5);

		lblemailAddress = new JLabel("(Email Address)");
		lblemailAddress.setForeground(Color.RED);
		lblemailAddress.setBounds(120, 23, 158, 18);
		panel_3_1_2.add(lblemailAddress);

		JLabel label_5 = new JLabel("");
		label_5.setIcon(new ImageIcon(Main_Frame.class.getResource("/bottom.png")));
		label_5.setBounds(0, 542, 1075, 89);
		panel_3.add(label_5);

		panel_progress = new JPanel();
		panel_progress.setBorder(new TitledBorder(null, "", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		panel_progress.setBackground(Color.WHITE);
		panel_progress.setBounds(10, 461, 1055, 89);
		panel_3.add(panel_progress);
		panel_progress.setLayout(null);

		btnStop = new JButton("");
		btnStop.setBounds(869, 0, 123, 38);
		panel_progress.add(btnStop);
		btnStop.setContentAreaFilled(false);
		btnStop.setBorderPainted(false);
		btnStop.setBackground(Color.WHITE);
		btnStop.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				btnStop.setIcon(new ImageIcon(Main_Frame.class.getResource("/stop-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				btnStop.setIcon(new ImageIcon(Main_Frame.class.getResource("/stop-btn.png")));
			}
		});

		btnStop.setIcon(new ImageIcon(Main_Frame.class.getResource("/stop-btn.png")));
		btnStop.setRolloverEnabled(false);
		btnStop.setVisible(false);
		btnStop.setRequestFocusEnabled(false);
		btnStop.setOpaque(false);
		btnStop.setFocusable(false);
		btnStop.setFocusTraversalKeysEnabled(false);
		btnStop.setFocusPainted(false);
		btnStop.setDefaultCapable(false);
		SwingUtilities.invokeLater(new Runnable() {

			@Override
			public void run() {
				comboBox.setSelectedItem("Subject");

				lblnamingconvention = new JLabel("Naming Convention");
				lblnamingconvention.setFont(new Font("Tahoma", Font.BOLD, 11));
				lblnamingconvention.setBounds(10, 12, 161, 14);
				panel_5.add(lblnamingconvention);

			}
		});

		Progressbar = new JLabel("");
		Progressbar.setBounds(10, 5, 836, 33);
		panel_progress.add(Progressbar);
		Progressbar.setVisible(false);
		Progressbar.setIcon(new ImageIcon(Main_Frame.class.getResource("/progress-bar.gif")));

		lbl_progressreport = new JLabel("");
		lbl_progressreport.setBounds(10, 49, 892, 29);

		panel_progress.add(lbl_progressreport);

		JPanel panel_duplicacy = new JPanel();
		panel_duplicacy.setBorder(new TitledBorder(null, "", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		panel_duplicacy.setBackground(Color.WHITE);
		panel_duplicacy.setBounds(10, 7, 527, 318);
		panel_3_1_1.add(panel_duplicacy);
		panel_duplicacy.setLayout(null);

		chckbxRemoveDuplicacy = new JCheckBox("Remove Duplicate Mail On basis of To, From, Subject, Bcc, Body\r\n");
		chckbxRemoveDuplicacy.setToolTipText("click here to Remove Duplicate mail on the basic of to ,from,subject..");
		chckbxRemoveDuplicacy.setRolloverEnabled(false);
		chckbxRemoveDuplicacy.setRequestFocusEnabled(false);
		chckbxRemoveDuplicacy.setOpaque(false);
		chckbxRemoveDuplicacy.setFocusable(false);
		chckbxRemoveDuplicacy.setFocusPainted(false);
		chckbxRemoveDuplicacy.setContentAreaFilled(false);
		chckbxRemoveDuplicacy.setForeground(Color.RED);
		chckbxRemoveDuplicacy.setFont(new Font("Tahoma", Font.BOLD, 10));
		chckbxRemoveDuplicacy.setBackground(Color.WHITE);
		chckbxRemoveDuplicacy.setBounds(6, 7, 391, 23);
		panel_duplicacy.add(chckbxRemoveDuplicacy);

		lbl_splitpst = new JLabel("");
		lbl_splitpst.setVisible(false);
		lbl_splitpst.setIcon(new ImageIcon(Main_Frame.class.getResource("/infolabel.png")));
		lbl_splitpst.setToolTipText("Split resultant PST file according to size.");
		lbl_splitpst.setBounds(425, 195, 26, 23);
		panel_duplicacy.add(lbl_splitpst);

		chckbx_splitpst = new JCheckBox("Split Resultant PST\r\n");
		chckbx_splitpst.setToolTipText("Split resultant PST file according to size.");
		chckbx_splitpst.setVisible(false);
		chckbx_splitpst.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				if (chckbx_splitpst.isSelected()) {

					spinner_sizespinner.setVisible(true);
					comboBox_setsize.setVisible(true);
					spinner_sizespinner.setEnabled(true);
					comboBox_setsize.setEnabled(true);

				} else {

					spinner_sizespinner.setVisible(false);
					comboBox_setsize.setVisible(false);
					spinner_sizespinner.setEnabled(false);
					comboBox_setsize.setEnabled(false);

				}

			}
		});
		chckbx_splitpst.setForeground(Color.RED);
		chckbx_splitpst.setFont(new Font("Tahoma", Font.BOLD, 10));
		chckbx_splitpst.setBackground(Color.WHITE);
		chckbx_splitpst.setBounds(6, 195, 147, 23);
		panel_duplicacy.add(chckbx_splitpst);

		spinner_sizespinner = new JSpinner();
		spinner_sizespinner.setVisible(false);
		spinner_sizespinner.setFont(new Font("Calibri", Font.PLAIN, 14));
		spinner_sizespinner.setBackground(Color.WHITE);
		spinner_sizespinner.setFont(new Font("Calibri", Font.PLAIN, 14));
		spinner_sizespinner.setEditor(new JSpinner.DefaultEditor(spinner_sizespinner));
		spinner_sizespinner.setBackground(Color.WHITE);
		spinner_sizespinner.setBounds(175, 198, 52, 20);
		SpinnerModel sm = new SpinnerNumberModel(5, 1, 900, 1);

		spinner_sizespinner.setModel(sm);
		spinner_sizespinner.setValue(1);

		spinner_sizespinner.setEditor(new JSpinner.DefaultEditor(spinner_sizespinner));
		panel_duplicacy.add(spinner_sizespinner);

		comboBox_setsize = new JComboBox();
		comboBox_setsize.setVisible(false);
		comboBox_setsize.setFont(new Font("Calibri", Font.PLAIN, 14));
		comboBox_setsize.setBackground(Color.WHITE);
		comboBox_setsize.setFont(new Font("Calibri", Font.PLAIN, 14));
		comboBox_setsize.setBackground(Color.WHITE);
		comboBox_setsize.addItem("MB");
		comboBox_setsize.addItem("GB");
		comboBox_setsize.setSelectedItem(0);
		comboBox_setsize.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (comboBox_setsize.getSelectedIndex() == 0) {
					spinner_sizespinner.setEditor(new JSpinner.NumberEditor(spinner_sizespinner));
					SpinnerModel sm = new SpinnerNumberModel(1, 1, 900, 1);
					spinner_sizespinner.setModel(sm);

					spinner_sizespinner.setValue(sm.getValue());
					spinner_sizespinner.setEditor(new JSpinner.DefaultEditor(spinner_sizespinner));
				} else if (comboBox_setsize.getSelectedIndex() == 1) {
					spinner_sizespinner.setEditor(new JSpinner.NumberEditor(spinner_sizespinner));
					SpinnerModel sm = new SpinnerNumberModel(1, 1, 20, 1);
					spinner_sizespinner.setModel(sm);
					spinner_sizespinner.setValue(sm.getValue());
					spinner_sizespinner.setEditor(new JSpinner.DefaultEditor(spinner_sizespinner));
				}
			}
		});
		// bysizesplitcomboBox.setBounds(249, 16, 74, 20);
		comboBox_setsize.setBounds(248, 198, 87, 20);
		panel_duplicacy.add(comboBox_setsize);

		chckbxMaintainFolderStructure = new JCheckBox("Maintain Folder Hierarchy");
		chckbxMaintainFolderStructure.setToolTipText("click here to maintain folder");
		chckbxMaintainFolderStructure.setRolloverEnabled(false);
		chckbxMaintainFolderStructure.setRequestFocusEnabled(false);
		chckbxMaintainFolderStructure.setOpaque(false);
		chckbxMaintainFolderStructure.setFocusable(false);
		chckbxMaintainFolderStructure.setFocusPainted(false);
		chckbxMaintainFolderStructure.setContentAreaFilled(false);
		chckbxMaintainFolderStructure.setForeground(Color.RED);
		chckbxMaintainFolderStructure.setBounds(6, 59, 344, 25);
		panel_duplicacy.add(chckbxMaintainFolderStructure);
		chckbxMaintainFolderStructure.setFont(new Font("Tahoma", Font.BOLD, 10));
		chckbxMaintainFolderStructure.setBackground(Color.WHITE);

		chckbxSaveInSame = new JCheckBox("Save in Same(Source and Destination Folder are same)");
		chckbxSaveInSame.setToolTipText("click here to save in same ");

		chckbxSaveInSame.setRolloverEnabled(false);
		chckbxSaveInSame.setRequestFocusEnabled(false);
		chckbxSaveInSame.setOpaque(false);
		chckbxSaveInSame.setFocusable(false);
		chckbxSaveInSame.setFocusPainted(false);
		chckbxSaveInSame.setContentAreaFilled(false);
		chckbxSaveInSame.setFont(new Font("Tahoma", Font.BOLD, 10));
		chckbxSaveInSame.setBackground(Color.WHITE);
		chckbxSaveInSame.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent arg0) {

				if (arg0.getStateChange() == ItemEvent.SELECTED) {

					destination = tf_Destination_Location.getText();
					btn_Destination.setEnabled(false);

					btn_Destination.setToolTipText(null);
					// tf_Destination_Location.setText(filepath(new File(parent)));
					tf_Destination_Location.setText(filepath(new File(filepath)));
				}

				else {
					btn_Destination.setEnabled(true);
					btn_Destination.setToolTipText("click here to go path to save");
					tf_Destination_Location.setText(destination);
				}
			}
		});
		chckbxSaveInSame.setForeground(new Color(255, 0, 0));
		chckbxSaveInSame.setBounds(6, 33, 391, 23);
		panel_duplicacy.add(chckbxSaveInSame);

		chckbxSavePdfAttachment = new JCheckBox("Save Pdf attachment separately");
		chckbxSavePdfAttachment.setToolTipText("click here to save pdf attachment ");
		chckbxSavePdfAttachment.setRolloverEnabled(false);
		chckbxSavePdfAttachment.setRequestFocusEnabled(false);
		chckbxSavePdfAttachment.setOpaque(false);
		chckbxSavePdfAttachment.setFocusable(false);
		chckbxSavePdfAttachment.setFocusPainted(false);
		chckbxSavePdfAttachment.setContentAreaFilled(false);
		chckbxSavePdfAttachment.setForeground(Color.RED);
		chckbxSavePdfAttachment.setVisible(false);
		chckbxSavePdfAttachment.setFont(new Font("Tahoma", Font.BOLD, 10));
		chckbxSavePdfAttachment.setBackground(Color.WHITE);
		chckbxSavePdfAttachment.setBounds(6, 87, 365, 23);
		panel_duplicacy.add(chckbxSavePdfAttachment);

		label_12 = new JLabel("");
		label_12.setIcon(new ImageIcon(Main_Frame.class.getResource("/infolabel.png")));
		label_12.setToolTipText("All the replicated or duplicated emails will get deleted " + System.lineSeparator()
				+ "on the basis of To, From, Subject, Bcc, and Body.");
		label_12.setBounds(425, 7, 26, 23);
		panel_duplicacy.add(label_12);

		label_13 = new JLabel("");
		label_13.setIcon(new ImageIcon(Main_Frame.class.getResource("/infolabel.png")));
		label_13.setToolTipText("All the resultant data will get saved at the " + System.lineSeparator()
				+ "location of the source file.");

		label_13.setBounds(425, 33, 26, 23);
		panel_duplicacy.add(label_13);

		label_14 = new JLabel("");
		label_14.setIcon(new ImageIcon(Main_Frame.class.getResource("/infolabel.png")));
		label_14.setToolTipText("Maintain the folder hierarchy of your mailbox.");

		label_14.setBounds(425, 59, 26, 23);
		panel_duplicacy.add(label_14);

		label_15 = new JLabel("");
		label_15.setIcon(new ImageIcon(Main_Frame.class.getResource("/infolabel.png")));
		label_15.setToolTipText(
				"Save all the email attachments separately in a  " + System.lineSeparator() + "folder.");

		label_15.setBounds(425, 87, 26, 23);
		panel_duplicacy.add(label_15);

		chckbxSaveMboxIn = new JCheckBox("Save Mbox in same PST/OST");
		chckbxSaveMboxIn.setToolTipText("Click here to save in same pst/ost");
		chckbxSaveMboxIn.setRolloverEnabled(false);
		chckbxSaveMboxIn.setRequestFocusEnabled(false);
		chckbxSaveMboxIn.setOpaque(false);
		chckbxSaveMboxIn.setFocusable(false);
		chckbxSaveMboxIn.setFocusPainted(false);
		chckbxSaveMboxIn.setContentAreaFilled(false);
		chckbxSaveMboxIn.setForeground(Color.RED);
		chckbxSaveMboxIn.setVisible(false);
		chckbxSaveMboxIn.setFont(new Font("Tahoma", Font.BOLD, 10));
		chckbxSaveMboxIn.setBackground(Color.WHITE);
		chckbxSaveMboxIn.setBounds(6, 113, 187, 23);
		panel_duplicacy.add(chckbxSaveMboxIn);

		label_16 = new JLabel("");
		label_16.setIcon(new ImageIcon(Main_Frame.class.getResource("/infolabel.png")));
		label_16.setToolTipText("Save all Mbox file in same PST and Ost");
		label_16.setBounds(425, 113, 26, 23);
		label_16.setVisible(false);
		label_16.setBounds(425, 113, 26, 23);
		panel_duplicacy.add(label_16);

		chckbxMigrateOrBackup = new JCheckBox("Migrate or Backup Emails Without Attachment files");
		chckbxMigrateOrBackup.setToolTipText("click here to migrate or backup email without attachment file");
		chckbxMigrateOrBackup.setRolloverEnabled(false);
		chckbxMigrateOrBackup.setRequestFocusEnabled(false);
		chckbxMigrateOrBackup.setOpaque(false);
		chckbxMigrateOrBackup.setFocusable(false);
		chckbxMigrateOrBackup.setFocusPainted(false);
		chckbxMigrateOrBackup.setContentAreaFilled(false);
		// chckbxSavePdfAttachment.setVisible(true);
		chckbxMigrateOrBackup.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent arg0) {
//				chckbxSavePdfAttachment.setVisible(true);
//				if (chckbxMigrateOrBackup.isSelected()) {
//
//					chckbxSavePdfAttachment.setVisible(false);
//				} else {
//
//					if (filetype.equalsIgnoreCase("pdf"))
//						chckbxSavePdfAttachment.setVisible(true);
//				}

				if (filetype.equalsIgnoreCase("pdf")) {
					chckbxSavePdfAttachment.setVisible(true);
				} else {
					chckbxSavePdfAttachment.setVisible(false);
				}
			}
		});
		chckbxMigrateOrBackup.setFont(new Font("Tahoma", Font.BOLD, 10));

		chckbxMigrateOrBackup.setForeground(Color.RED);
		chckbxMigrateOrBackup.setBackground(Color.WHITE);
		chckbxMigrateOrBackup.setBounds(6, 139, 414, 23);
		panel_duplicacy.add(chckbxMigrateOrBackup);

		label_17 = new JLabel("");
		label_17.setIcon(new ImageIcon(Main_Frame.class.getResource("/infolabel.png")));
		label_17.setToolTipText(
				"Check the option, If you want to migrate or backup emails without their attachment files.");

		label_17.setBounds(425, 143, 26, 23);
		panel_duplicacy.add(label_17);

		chckbx_convert_pdf_to_pdf = new JCheckBox("Convert Attachments to PDF Format");
		chckbx_convert_pdf_to_pdf.setToolTipText("click here to Convert attachments to pdf formet");
		chckbx_convert_pdf_to_pdf.setRolloverEnabled(false);
		chckbx_convert_pdf_to_pdf.setRequestFocusEnabled(false);
		chckbx_convert_pdf_to_pdf.setOpaque(false);
		chckbx_convert_pdf_to_pdf.setFocusable(false);
		chckbx_convert_pdf_to_pdf.setFocusPainted(false);
		chckbx_convert_pdf_to_pdf.setContentAreaFilled(false);
		chckbx_convert_pdf_to_pdf.setFont(new Font("Tahoma", Font.BOLD, 10));
		chckbx_convert_pdf_to_pdf.setForeground(Color.RED);
		// chckbx_convert_pdf_to_pdf.setFont(new Font("Tahoma", Font.PLAIN, 10));
		chckbx_convert_pdf_to_pdf.setBackground(Color.WHITE);
		chckbx_convert_pdf_to_pdf.setBounds(6, 165, 256, 23);
		chckbx_convert_pdf_to_pdf.setVisible(false);
		chckbx_convert_pdf_to_pdf.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent arg0) {
				if (chckbx_convert_pdf_to_pdf.isSelected()) {
					chckbxSavePdfAttachment.setSelected(false);
				} else {
					if (filetype.equalsIgnoreCase("pdf"))
						chckbxSavePdfAttachment.setSelected(true);
				}
			}
		});

		chckbx_convert_pdf_to_pdf.setBounds(6, 165, 414, 23);
		panel_duplicacy.add(chckbx_convert_pdf_to_pdf);

		label_pdf_to_pdf = new JLabel("");
		label_pdf_to_pdf.setIcon(new ImageIcon(Main_Frame.class.getResource("/infolabel.png")));
		label_pdf_to_pdf.setToolTipText("It helps to convert the contained attachments of PDF files to PDF format.");
		label_pdf_to_pdf.setBounds(425, 169, 41, 25);
		panel_duplicacy.add(label_pdf_to_pdf);

		panel_6 = new JPanel();
		panel_6.setBackground(Color.WHITE);
		panel_6.setBorder(new TitledBorder(null, "", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		panel_6.setBounds(547, 276, 496, 43);
		panel_3_1_1.add(panel_6);
		panel_6.setLayout(null);

		JLabel lblNewLabel_10 = new JLabel("");
		lblNewLabel_10.setToolTipText("Add the name by which the folder will be created " + "\r\n"
				+ " it must not contain these characters :\\?/|*<>\t");
		lblNewLabel_10.setIcon(new ImageIcon(Main_Frame.class.getResource("/infolabel.png")));
		lblNewLabel_10.setBounds(458, 10, 24, 25);
		panel_6.add(lblNewLabel_10);

		textField_customfolder = new JTextField();
		textField_customfolder.addKeyListener(new KeyAdapter() {
			public void keyReleased(KeyEvent event) {

				String content = textField_customfolder.getText();
				if (content.contains(":") || content.contains(":") || content.contains("\\") || content.contains("?")
						|| content.contains("/") || content.contains("|") || content.contains("*")
						|| content.contains("<") || content.contains(">") || content.contains("\t")
						|| content.contains("//s") || content.contains("\"")) {
					textField_customfolder.setText(getRidOfIllegalFileNameCharacters(content).trim());
				}
			}
		});
		textField_customfolder.setBounds(179, 10, 255, 26);
		textField_customfolder.setEditable(false);
		panel_6.add(textField_customfolder);
		textField_customfolder.setColumns(10);

		chckbxCustomFolderName = new JCheckBox("Custom Folder Name");
		chckbxCustomFolderName.setRolloverEnabled(false);
		chckbxCustomFolderName.setRequestFocusEnabled(false);
		chckbxCustomFolderName.setOpaque(false);
		chckbxCustomFolderName.setFocusable(false);
		chckbxCustomFolderName.setFocusPainted(false);
		chckbxCustomFolderName.setContentAreaFilled(false);
		chckbxCustomFolderName.setBounds(6, 11, 167, 23);
		panel_6.add(chckbxCustomFolderName);
		chckbxCustomFolderName.setFont(new Font("Tahoma", Font.BOLD, 11));
		chckbxCustomFolderName.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent arg0) {
				if (arg0.getStateChange() == ItemEvent.SELECTED) {
					textField_customfolder.setEditable(true);
				}

				else {
					textField_customfolder.setEditable(false);
				}
			}
		});

		chckbxCustomFolderName.setBackground(Color.WHITE);

		panel_8 = new JPanel();
		panel_8.setBorder(new TitledBorder(null, "", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		panel_8.setBackground(Color.WHITE);
		panel_8.setBounds(547, 163, 496, 43);
		panel_3_1_1.add(panel_8);
		panel_8.setVisible(false);
		panel_8.setLayout(null);

		chckbxRestoreToDefault = new JCheckBox("Restore to Default Folder");
		chckbxRestoreToDefault.setRolloverEnabled(false);
		chckbxRestoreToDefault.setRequestFocusEnabled(false);
		chckbxRestoreToDefault.setOpaque(false);
		chckbxRestoreToDefault.setFocusable(false);
		chckbxRestoreToDefault.setFocusPainted(false);
		chckbxRestoreToDefault.setContentAreaFilled(false);
		chckbxRestoreToDefault.setFont(new Font("Tahoma", Font.BOLD, 11));
		chckbxRestoreToDefault.setBackground(Color.WHITE);
		chckbxRestoreToDefault.setBounds(6, 7, 202, 23);
		panel_8.add(chckbxRestoreToDefault);

		chckbx_seperatepst = new JCheckBox("Seperate  PST");
		chckbx_seperatepst.setFont(new Font("Tahoma", Font.BOLD, 11));
		chckbx_seperatepst.setBackground(Color.WHITE);
		chckbx_seperatepst.setBounds(261, 7, 117, 23);
		panel_8.add(chckbx_seperatepst);

		label_11 = new JLabel("");
		label_11.setBounds(926, 40, 76, 38);
		panel_progress.add(label_11);

		JLabel lblSavesbackupmigrateAs = new JLabel("        Saves/Backup/Migrate As :");
		lblSavesbackupmigrateAs.setForeground(Color.BLUE);
		lblSavesbackupmigrateAs.setFont(new Font("Tahoma", Font.BOLD, 13));
		lblSavesbackupmigrateAs.setBounds(66, 11, 241, 29);
		panel_3.add(lblSavesbackupmigrateAs);

		btnStop.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				String warn = "Do you want to stop the process?";
				int ans = JOptionPane.showConfirmDialog(main_multiplefile.this, warn, messageboxtitle,
						JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE,
						new ImageIcon(Main_Frame.class.getResource("/about-icon-2.png")));
				if (ans == JOptionPane.YES_OPTION) {
					// th.interrupt();
					stop = true;
				}

			}
		});

		panel_4 = new JPanel();
		panel_4.setBackground(Color.WHITE);
		Cardlayout.add(panel_4, "panel_4");
		panel_4.setLayout(null);

		JScrollPane scrollPane_table_panel4 = new JScrollPane();
		scrollPane_table_panel4.setBounds(12, 13, 1063, 340);
		panel_4.add(scrollPane_table_panel4);

		table_fileConvertionreport_panel4 = new JTable() {
			/**
			 *
			 */
			private static final long serialVersionUID = 1L;

			public boolean isCellEditable(int row, int column) {

				return false;
			}
		};

		table_fileConvertionreport_panel4.setModel(new DefaultTableModel(new Object[][] {},

				new String[] { "From", "To", "File Name", "Status", "Duration", "Message count", "Path " }));
		scrollPane_table_panel4.setViewportView(table_fileConvertionreport_panel4);
		table_fileConvertionreport_panel4.getColumnModel().getColumn(2).setPreferredWidth(126);
		btnDowloadReport = new JButton("");

		btnDowloadReport_1 = new JButton("");
		btnDowloadReport_1.setToolTipText("Click here to show Download Report");
		btnDowloadReport_1.setRolloverEnabled(false);
		btnDowloadReport_1.setRequestFocusEnabled(false);
		btnDowloadReport_1.setOpaque(false);
		btnDowloadReport_1.setFocusable(false);
		btnDowloadReport_1.setFocusTraversalKeysEnabled(false);
		btnDowloadReport_1.setFocusPainted(false);
		btnDowloadReport_1.setDefaultCapable(false);
		btnDowloadReport_1.setContentAreaFilled(false);
		btnDowloadReport_1.setBorderPainted(false);
		btnDowloadReport_1.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				btnDowloadReport.setIcon(new ImageIcon(Main_Frame.class.getResource("/download-report-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				btnDowloadReport.setIcon(new ImageIcon(Main_Frame.class.getResource("/download-report-btn.png")));
			}
		});

		btnDowloadReport_1.setIcon(new ImageIcon(Main_Frame.class.getResource("/download-report-btn.png")));

		btnDowloadReport_1.addActionListener(new ActionListener() {

			public void actionPerformed(ActionEvent arg0) {
				cal = Calendar.getInstance();
				calendertime = getRidOfIllegalFileNameCharacters(cal.getTime().toString());
				reportpath = logpathm;
				new File(reportpath + File.separator + messageboxtitle + " report").mkdirs();

				File file = new File(reportpath + File.separator + messageboxtitle + " report" + File.separator
						+ calendertime + "report.csv");

				try {
					FileWriter outputfile = new FileWriter(file);

					CSVWriter writer = new CSVWriter(outputfile);

					String[] header = { "From", "To", "File Name", "Status", "Duration", "Message Count", "Path" };

					writer.writeNext(header);

					for (int i = 0; i < table_fileConvertionreport_panel4.getRowCount(); i++) {
						String g1 = "";
						try {
							g1 = table_fileConvertionreport_panel4.getValueAt(i, 0).toString();
						} catch (Exception e) {

						}
						String g2 = "";
						try {
							g2 = table_fileConvertionreport_panel4.getValueAt(i, 1).toString();
						} catch (Exception e) {

						}
						String g3 = "";
						try {
							g3 = table_fileConvertionreport_panel4.getValueAt(i, 2).toString();
						} catch (Exception e) {

						}
						String g4 = "";
						try {
							g4 = table_fileConvertionreport_panel4.getValueAt(i, 3).toString();
						} catch (Exception e) {

						}
						String g5 = "";
						try {
							g5 = table_fileConvertionreport_panel4.getValueAt(i, 4).toString();
						} catch (Exception e) {

						}
						String g6 = "";
						try {
							g6 = table_fileConvertionreport_panel4.getValueAt(i, 5).toString();
						} catch (Exception e) {

						}

						String g7 = "";
						try {
							g7 = table_fileConvertionreport_panel4.getValueAt(i, 6).toString();
						} catch (Exception e) {

						}

						String[] data1 = { g1, g2, g3, g4, g5, g6, g7 };

						writer.writeNext(data1);
					}

					writer.close();
					file.setReadOnly();
					Desktop desktop = Desktop.getDesktop();
					desktop.open(file);

				} catch (Exception e) {

					e.printStackTrace();
				}
			}
		});
		btnDowloadReport_1.setFont(new Font("Tahoma", Font.BOLD, 15));
		btnDowloadReport_1.setBounds(443, 458, 156, 38);
		panel_4.add(btnDowloadReport_1);

		JButton btnConvertAgain = new JButton("");
		btnConvertAgain.setToolTipText("Click here to Convert Again");
		btnConvertAgain.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent arg0) {
				btnConvertAgain.setIcon(new ImageIcon(Main_Frame.class.getResource("/convert-again-hvr-btn.png")));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				btnConvertAgain.setIcon(new ImageIcon(Main_Frame.class.getResource("/convert-again-btn.png")));
			}
		});
		btnConvertAgain.setIcon(new ImageIcon(Main_Frame.class.getResource("/convert-again-btn.png")));
		btnConvertAgain.setBorderPainted(false);
		btnConvertAgain.setContentAreaFilled(false);
		btnConvertAgain.setDefaultCapable(false);
		btnConvertAgain.setFocusTraversalKeysEnabled(false);
		btnConvertAgain.setFocusable(false);
		btnConvertAgain.setOpaque(false);
		btnConvertAgain.setRolloverEnabled(false);
		btnConvertAgain.setRequestFocusEnabled(false);
		btnConvertAgain.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				filetype = "";
				path = "";
				chckbx_splitpst.setEnabled(true);
				chckbxMigrateOrBackup.setEnabled(true);
				checkconvertagain = true;
				chckbxMigrateOrBackup.setVisible(true);
				stop = false;
				btnStop.setVisible(false);
				chckbxSavePdfAttachment.setEnabled(true);
				btn_Destination.setEnabled(true);
				btn_Destination.setToolTipText("click here to go path to save");
				btn_previous_p3.setEnabled(true);
				chckbxSaveInSame.setEnabled(true);
				comboBox_fileDestination_type.setEnabled(true);
				btn_Destination.setEnabled(true);
				btn_previous_p3.setEnabled(true);
				lbl_progressreport.setText("");
				dateChooser_calender_start.setEnabled(true);
				chckbx_convert_pdf_to_pdf.setEnabled(true);
				chckbxRemoveDuplicacy.setEnabled(true);
				dateChooser_calendar_end.setEnabled(true);
				dateChooser_mail_fromdate.setEnabled(false);
				dateChooser_mail_tilldate.setEnabled(false);
				dateChooser_task_start_date.setEnabled(false);
				dateChooser_task_end_date.setEnabled(false);
				chckbxCustomFolderName.setEnabled(true);
				btn_Destination.setEnabled(true);
				btn_previous_p3.setEnabled(true);
				checkmboxpstost = true;
				chckbxRestoreToDefault.setEnabled(true);
				chckbxSaveMboxIn.setEnabled(true);
				btn_signout_p3.setVisible(false);
				label_11.setVisible(false);
				chckbx_Mail_Filter.setEnabled(true);
				chckbx_calender_box.setEnabled(true);
				task_box.setEnabled(true);
				chckbxMaintainFolderStructure.setEnabled(true);
				btn_converter_1.setEnabled(true);
				btn_converter_1.setToolTipText("click here to convert");
				CardLayout card = (CardLayout) Cardlayout.getLayout();
				card.show(Cardlayout, "panel_3");

			}
		});
		btnConvertAgain.setFont(new Font("Tahoma", Font.BOLD, 14));
		btnConvertAgain.setBounds(442, 556, 156, 38);
		panel_4.add(btnConvertAgain);

		JLabel label_7 = new JLabel("");
		label_7.setIcon(new ImageIcon(Main_Frame.class.getResource("/bottom.png")));
		label_7.setBounds(0, 545, 1075, 73);
		panel_4.add(label_7);

		JLabel label_4 = new JLabel("");
		label_4.setIcon(new ImageIcon(Main_Frame.class.getResource("/topbar.png")));
		label_4.setBounds(0, 0, 1096, 71);
		contentPane.add(label_4);
	}

	void filter_file() throws Exception {

		jFileChooser = new JFileChooser(System.getProperty("user.home") + File.separator + "Desktop");
		files = null;

		jFileChooser.setMultiSelectionEnabled(true);
		jFileChooser.setAcceptAllFileFilterUsed(false);
		// jFileChooser.setAcceptAllFileFilterUsed(false);
		FileNameExtensionFilter filter;
		if (fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")) {

			filter = new FileNameExtensionFilter(".ost", "ost");

			jFileChooser.addChoosableFileFilter(filter);

		} else if (fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")) {

			filter = new FileNameExtensionFilter(".pst", "pst");

			jFileChooser.addChoosableFileFilter(filter);

		} else if (fileoptionm.equalsIgnoreCase("DBX")) {

			filter = new FileNameExtensionFilter(".dbx", "DBX");

			jFileChooser.addChoosableFileFilter(filter);

		} else if (fileoptionm.equalsIgnoreCase("EML File (.eml)")) {
			filter = new FileNameExtensionFilter(".eml", "eml");

			jFileChooser.addChoosableFileFilter(filter);

		} else if (fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")) {
			filter = new FileNameExtensionFilter(".emlx", "emlx");

			jFileChooser.addChoosableFileFilter(filter);

		} else if (fileoptionm.equalsIgnoreCase("Message File (.msg)")) {
			filter = new FileNameExtensionFilter(".msg", "msg");

			jFileChooser.addChoosableFileFilter(filter);

		} else if (fileoptionm.equalsIgnoreCase("MBOX")) {

			jFileChooser.setFileFilter(new FileNameExtensionFilter(".mbox", "mbx", "mbox"));
			jFileChooser.setAcceptAllFileFilterUsed(true);

		} else if (fileoptionm.equalsIgnoreCase("Maildir")) {

			jFileChooser.setAcceptAllFileFilterUsed(true);

		} else if (fileoptionm.equalsIgnoreCase("OLM File (.olm)")) {
			filter = new FileNameExtensionFilter(".olm", "olm");

			jFileChooser.addChoosableFileFilter(filter);

		}

		if (jFileChooser.showOpenDialog(main_multiplefile.this) == JFileChooser.APPROVE_OPTION) {

			files = jFileChooser.getSelectedFiles();

			for (int i = 0; i < files.length; i++) {
				String extension = getFileExtension(files[i]);
				if (fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")
						|| fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")) {

					try {

						if (fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")) {
							if (extension.equalsIgnoreCase("pst")) {

								hashset.add(files[i]);

							}
						} else if (fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")) {

							if (extension.equalsIgnoreCase("ost")) {
								hashset.add(files[i]);
							}
						}

					} catch (Exception e1) {

						e1.printStackTrace();
					}

				} else if (fileoptionm.equalsIgnoreCase("MBOX")) {
					hashset.add(files[i]);
				} else if (fileoptionm.equalsIgnoreCase("DBX")) {
					hashset.add(files[i]);
				} else if (fileoptionm.equalsIgnoreCase("OLM File (.olm)")) {

					hashset.add(files[i]);
				} else {
					if (fileoptionm.equalsIgnoreCase("EML File (.eml)")) {
						if (extension.equals("eml")) {

							hashset.add(files[i]);

						}
					} else if (fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")) {
						if (extension.equalsIgnoreCase("emlx")) {

							hashset.add(files[i]);
						}
					} else if (fileoptionm.equalsIgnoreCase("Message File (.msg)")) {
						if (extension.equalsIgnoreCase("msg")) {

							hashset.add(files[i]);
						}
					} else if (fileoptionm.equalsIgnoreCase("Maildir")) {

						hashset.add(files[i]);

					}

				}

			}
			DefaultTableModel model = (DefaultTableModel) table.getModel();

			while (model.getRowCount() > 0) {

				for (int i = 0; i < model.getRowCount(); ++i) {

					model.removeRow(i);
					filesno--;
				}
			}

			Iterator<File> itr = hashset.iterator();
			while (itr.hasNext()) {

				modeli = (DefaultTableModel) table.getModel();
				File fo = itr.next();
				String filet = "";
				if (fo.isFile()) {
					filet = "File";
				} else {
					filet = "Folder";
				}
				long sizeInBytes = fo.length();
				modeli.addRow(new Object[] { "<html><b>" + filesno, "<html><b>" + fo.getName(),
						"<html><b>" + fo.getAbsolutePath(), "<html><b>" + filet,
						"<html><b>" + bytes2String(sizeInBytes) });
				filesno++;
				countforfile++;
			}
		}

	}

	void destinationPath() throws Exception {
		jFileChooser = new JFileChooser(System.getProperty("user.home") + File.separator + "Desktop");

		jFileChooser.setMultiSelectionEnabled(true);

		jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

		jFileChooser.showOpenDialog(main_multiplefile.this);
		checkdestination = false;
		File file = jFileChooser.getSelectedFile();

		String destination = file.getAbsolutePath();

		tf_Destination_Location.setText(destination);

	}

	private static void expandAllNodes() {
		int j = tree.getRowCount();
		int i = 0;
		while (i < j) {
			tree.expandRow(i);
			i += 1;

		}
	}

	public void readAnOST_PstFile() {

		try {
			pst = PersonalStorage.fromFile(filepath);

			FolderInfoCollection folderInfoCollection = pst.getRootFolder().getSubFolders();
			foldercountcheck++;

			String filepat = filepath.replace(",", "");
			CustomTreeNode e = new CustomTreeNode("<html><b>" + filepat);

			e.filepath = filepath;
			mainnode.add(e);

			FolderInfo folderInfo1 = pst.getRootFolder();
			String rootname = folderInfo1.getDisplayName().replaceAll("[\\[\\]],", "");
			if (rootname.equalsIgnoreCase("")) {
				rootname = "Root Folder";
			}

			DefaultMutableTreeNode node1 = new DefaultMutableTreeNode("<html><b>" + rootname);
			e.add(node1);

			for (int i = 0; i < folderInfoCollection.size(); i++) {
				if (mf.stop_tree) {
					break;
				}
				FolderInfo folderInfo = (FolderInfo) folderInfoCollection.get_Item(i);

				String foldername = folderInfo.getDisplayName();
				foldername = foldername.replace(",", "").replace(".", "");
				foldername = getRidOfIllegalFileNameCharacters(foldername);
				foldername = foldername.replaceAll("[\\[\\]]", "");
				foldername = foldername.trim();

				DefaultMutableTreeNode node = new DefaultMutableTreeNode("<html><b>" + foldername);

				node1.add(node);
				obTh.ob.MessageLabel.setText(foldername);
				if (folderInfo.hasSubFolders()) {

					readOstpstsubfolder(folderInfo, node);

				}

			}
		} catch (Exception e) {
			if (e.getMessage().contains("File not found File")) {
				JOptionPane.showMessageDialog(mf, "File is in use ", messageboxtitle, JOptionPane.INFORMATION_MESSAGE,
						new ImageIcon(Main_Frame.class.getResource("/information.png")));
			}

			else {
				JOptionPane.showMessageDialog(mf, "File is Currupted  Please Choose another file  ", messageboxtitle,
						JOptionPane.INFORMATION_MESSAGE,
						new ImageIcon(Main_Frame.class.getResource("/information.png")));
			}
		}
	}

	public void readOstpstsubfolder(FolderInfo f, DefaultMutableTreeNode node) {

		FolderInfoCollection folderCollection = f.getSubFolders();

		for (int i = 0; i < folderCollection.size(); i++) {

			if (mf.stop_tree) {
				break;
			}
			FolderInfo folderInfo = (FolderInfo) folderCollection.get_Item(i);
			String foldername = folderInfo.getDisplayName();
			foldername = foldername.replace(",", "").replace(".", "");
			foldername = getRidOfIllegalFileNameCharacters(foldername);
			foldername = foldername.replaceAll("[\\[\\]]", "");
			foldername = foldername.trim();
			DefaultMutableTreeNode nod1 = new DefaultMutableTreeNode(

					"<html><b>" + foldername);

			node.add(nod1);

			obTh.ob.MessageLabel.setText(foldername);
			if (folderInfo.hasSubFolders()) {

				readOstpstsubfolder(folderInfo, nod1);

			}

		}
	}

	public void readolmFile() {
		OlmStorage storage = null;

		try {
			storage = new OlmStorage(filepath);
			String filepat = filepath.replace(",", "");
			CustomTreeNode e = new CustomTreeNode("<html><b>" + filepat);
			e.filepath = filepath;
			mainnode.add(e);
			foldercountcheck++;
			try {
				for (OlmFolder folder : storage.getFolderHierarchy()) {

					if (mf.stop_tree) {
						break;
					}
					String foldername = folder.getName().replaceAll("[\\[\\]],", "");
					DefaultMutableTreeNode c = new DefaultMutableTreeNode("<html><b>" + foldername);

					e.add(c);
					obTh.ob.MessageLabel.setText(foldername);
					if (folder.getSubFolders().size() > 0) {

						getFolder(folder, c);

					}

				}

			} catch (Exception e1) {

				return;
			} finally {
				storage.dispose();

			}
		} catch (Exception e) {
			if (e.getMessage().contains("File not found File")) {
				JOptionPane.showMessageDialog(mf, "File is in use ", messageboxtitle, JOptionPane.INFORMATION_MESSAGE,
						new ImageIcon(Main_Frame.class.getResource("/information.png")));
			}

			else {
				JOptionPane.showMessageDialog(mf, "File is Currupted  Please Choose another file  ", messageboxtitle,
						JOptionPane.INFORMATION_MESSAGE,
						new ImageIcon(Main_Frame.class.getResource("/information.png")));
			}
		}

	}

	private void getFolder(OlmFolder folder, DefaultMutableTreeNode node1) {

		for (OlmFolder subFolder : folder.getSubFolders()) {

			if (mf.stop_tree) {
				break;
			}
			String foldername = subFolder.getName().replaceAll("[\\[\\]],", "").replaceAll("[\\[\\]]", "");
			DefaultMutableTreeNode nd = new DefaultMutableTreeNode("<html><b>" + foldername);
			node1.add(nd);
			obTh.ob.MessageLabel.setText(foldername);
			if (subFolder.getSubFolders().size() > 0) {

				getFolder(subFolder, nd);

			}

		}
	}

	public void readMboxFile() {

		file = new File(filepath);

		String filepath = filepath(file);

		visitAllNodes(mainnode);
		String filenamembox = file.getName();
		foldercountcheck++;
		if (listst.contains(filepath)) {
			DefaultMutableTreeNode nd = null;
			for (int k = 0; k < lists.size(); k++) {

				if (listst.get(k).equalsIgnoreCase(filepath)) {
					nd = lists.get(k);
					break;
				}

			}

			CustomTreeNode child = new CustomTreeNode("<html><b>" + filenamembox);
			child.filepath = file.getAbsolutePath();
			nd.add(child);

		} else {
			DefaultMutableTreeNode node = new DefaultMutableTreeNode("<html><b>" + filepath);
			mainnode.add(node);

			CustomTreeNode child = new CustomTreeNode("<html><b>" + filenamembox);
			child.filepath = file.getAbsolutePath();
			node.add(child);
		}

	}

	public void readmailFile() {

		file = new File(filepath);

		String filepath = filepath(file);
		foldercountcheck++;
		visitAllNodes(mainnode);
		String filenamemail = file.getName().replaceAll("[\\[\\]]", "");
		if (listst.contains(filepath)) {
			DefaultMutableTreeNode nd = null;
			for (int k = 0; k < lists.size(); k++) {

				if (listst.get(k).equalsIgnoreCase(filepath)) {
					nd = lists.get(k);
					break;
				}

			}

			CustomTreeNode child = new CustomTreeNode("<html><b>" + filenamemail);
			child.filepath = file.getAbsolutePath();
			nd.add(child);

		} else {

			DefaultMutableTreeNode node = new DefaultMutableTreeNode("<html><b>" + filepath);

			mainnode.add(node);

			CustomTreeNode child = new CustomTreeNode("<html><b>" + filenamemail);
			child.filepath = file.getAbsolutePath();
			node.add(child);
		}
		obTh.ob.MessageLabel.setText(filenamemail);
	}

	void readewwds(File c) {

		File[] files = c.listFiles();

		int messagesize = files.length;

		for (int j = 0; j < messagesize; j++) {

			if (files[j].isDirectory()) {

			} else {

				String extension = getFileExtension(files[j]);
				if (fileoptionm.equalsIgnoreCase("EML File (.eml)")) {
					if (extension.equals("eml")) {

						path2 = files[j].getAbsolutePath();

						fileInformation_on_mail();

					}
				} else if (fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")) {
					if (extension.equalsIgnoreCase("emlx")) {

						path2 = files[j].getAbsolutePath();

						fileInformation_on_mail();

					}
				} else if (fileoptionm.equalsIgnoreCase("Apple Mail")) {
					if (extension.equalsIgnoreCase("emlx")) {

						path2 = files[j].getAbsolutePath();

						fileInformation_on_mail();

					}
				} else if (fileoptionm.equalsIgnoreCase("Message File (.msg)")) {
					if (extension.equalsIgnoreCase("msg")) {

						path2 = files[j].getAbsolutePath();

						fileInformation_on_mail();
					}
				} else if (fileoptionm.equalsIgnoreCase("Maildir")) {

					path2 = files[j].getAbsolutePath();

					fileInformation_on_mail();

				}

			}

		}
	}

	public void fileInformation_on_mail() {
		MailMessage message = null;

		try {
			MailMessage message1 = MailMessage.load(path2);

			MailConversionOptions option = new MailConversionOptions();
			MapiMessage msg = MapiMessage.fromMailMessage(message1, MapiConversionOptions.getASCIIFormat());
			message = msg.toMailMessage(option);

			String from = "";
			String Subject = "";
			String Date = "";

			try {
				from = message.getFrom().toString();
			} catch (Exception e) {

			}
			try {
				Subject = message.getSubject();
			} catch (Exception e) {

			}
			try {
				Date = message.getDate().toString();
			} catch (Exception e) {

			}
			lblTotalMessageCount.setText("Total Message Count : " + ids);
			ids++;

			if (message.getAttachments().size() > 0) {
				ImageIcon icon = new ImageIcon(Main_Frame.class.getResource("/attachment-icon.png"));
				JLabel imagelabl = new JLabel();
				imagelabl.setIcon(icon);
				mode = (DefaultTableModel) table_fileinformation.getModel();

				mode.addRow(new Object[] { "<html><b>" + from, "<html><b>" + Subject, "<html><b>" + Date, imagelabl });
			} else {
				mode = (DefaultTableModel) table_fileinformation.getModel();

				mode.addRow(new Object[] { "<html><b>" + from, "<html><b>" + Subject, "<html><b>" + Date });
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(mf, "File is Currupted  Please Choose another file  " + filepath,
					messageboxtitle, JOptionPane.INFORMATION_MESSAGE,
					new ImageIcon(Main_Frame.class.getResource("/information.png")));

		}
	}

	public void fileInhformation_Ost_Pst() throws Exception {
		FolderInfo f1 = pst.getRootFolder();
		String f1nmae = f1.getDisplayName().replaceAll("[\\[\\]]", "");
		if (f1nmae.equalsIgnoreCase("")) {
			f1nmae = "Root Folder";
		}
		if (foldername.equals(f1nmae)) {
			MessageInfoCollection messageInfoCollection = f1.getContents();
			int i2 = 1;
			for (int j = 0; j < messageInfoCollection.size(); j++)

			{

				try {
					if (Stoppreview) {
						break;
					}

					MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(j);
					MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
					MailConversionOptions de = new MailConversionOptions();
					MapiMessage contact1 = (MapiMessage) pst.extractMessage(messageInfo);
					MailMessage mess = contact1.toMailMessage(de);
					MapiMessage contact = MapiMessage.fromMailMessage(mess, d);

					listmapi.add(contact);
					String from = "";
					String Subject = "";
					Date DeliveryTime = null;
					try {
						from = contact.getSenderEmailAddress();
					} catch (Exception a) {
						from = "";
					}
					try {
						Subject = contact.getSubject();
					} catch (Exception a) {
						Subject = "";
					}
					try {
						DeliveryTime = contact.getDeliveryTime();
					} catch (Exception a) {

					}
					lblTotalMessageCount.setText("Total Message Count :" + i2);
					i2++;
					if (contact.getAttachments().size() > 0) {
						ImageIcon icon = new ImageIcon(Main_Frame.class.getResource("/attachment-icon.png"));
						JLabel imagelabl = new JLabel();
						imagelabl.setIcon(icon);
						mode = (DefaultTableModel) table_fileinformation.getModel();

						mode.addRow(new Object[] { "<html><b>" + from, "<html><b>" + Subject,
								"<html><b>" + DeliveryTime, imagelabl });
					} else {
						mode = (DefaultTableModel) table_fileinformation.getModel();

						mode.addRow(
								new Object[] { "<html><b>" + from, "<html><b>" + Subject, "<html><b>" + DeliveryTime });
					}

				} catch (Exception e) {
					continue;
				}

			}

			path = "";

		}

		FolderInfoCollection folderInfoCollection = pst.getRootFolder().getSubFolders();

		for (int i = 0; i < folderInfoCollection.size(); i++) {
			try {
				if (Stoppreview) {
					break;
				}
				FolderInfo f = folderInfoCollection.get_Item(i);
				String Folder = f.getDisplayName();
				Folder = Folder.replace(",", "").replace(".", "");
				Folder = getRidOfIllegalFileNameCharacters(Folder);
				Folder = Folder.replaceAll("[\\[\\]]", "");
				Folder = Folder.trim();
				path = f1nmae + File.separator + Folder;
				int size = f.getContentCount();

				foldername = foldername.replace("[" + size + "]", "");

				if (foldername.equals(path)) {
					folderInfo = folderInfoCollection.get_Item(i);
					MessageInfoCollection messageInfoCollection = f.getContents();
					int i2 = 1;
					for (int j = 0; j < messageInfoCollection.size(); j++)

					{
						try {

							if (Stoppreview) {
								break;
							}
							MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(j);

							MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
							MailConversionOptions de = new MailConversionOptions();
							MapiMessage contact1 = (MapiMessage) pst.extractMessage(messageInfo);
							MailMessage mess = contact1.toMailMessage(de);
							MapiMessage contact = MapiMessage.fromMailMessage(mess, d);

							listmapi.add(contact);
							listPSTOSTgemesingo.add(messageInfo);

							String from = messageInfo.getSenderRepresentativeName();

							Date DeliveryTime = contact.getDeliveryTime();

							String Subject = messageInfo.getSubject();
							lblTotalMessageCount.setText("Total Message Count :" + i2);
							i2++;
							if (contact.getAttachments().size() > 0) {
								ImageIcon icon = new ImageIcon(Main_Frame.class.getResource("/attachment-icon.png"));
								JLabel imagelabl = new JLabel();
								imagelabl.setIcon(icon);
								mode = (DefaultTableModel) table_fileinformation.getModel();

								mode.addRow(new Object[] { "<html><b>" + from, "<html><b>" + Subject,
										"<html><b>" + DeliveryTime, imagelabl });
							} else {
								mode = (DefaultTableModel) table_fileinformation.getModel();

								mode.addRow(new Object[] { "<html><b>" + from, "<html><b>" + Subject,
										"<html><b>" + DeliveryTime });
							}
						} catch (Exception e) {
							continue;
						}

					}

					path = "";
					break;

				}
				if (f.hasSubFolders()) {
					fileInhformationsubfolder_Ost_Pst(f);

				}
			} catch (Exception e) {
				continue;
			}

		}

	}

	public void fileInhformationsubfolder_Ost_Pst(FolderInfo folder) {
		FolderInfoCollection folderInfoCollection = folder.getSubFolders();

		for (int i = 0; i < folderInfoCollection.size(); i++) {
			try {
				if (Stoppreview) {
					break;
				}
				FolderInfo folderInf = folderInfoCollection.get_Item(i);
				int size = folderInf.getContentCount();

				foldername = foldername.replace("[" + size + "]", "");
				String Folder = folderInf.getDisplayName();
				Folder = Folder.replace(",", "").replace(".", "");
				Folder = getRidOfIllegalFileNameCharacters(Folder);
				Folder = Folder.replaceAll("[\\[\\]]", "");
				Folder = Folder.trim();
				path = path + File.separator + Folder;

				if (foldername.equals(path)) {
					folderInfo = folderInfoCollection.get_Item(i);
					MessageInfoCollection messageInfoCollection = folderInf.getContents();
					int i2 = 1;
					for (int j = 0; j < messageInfoCollection.size(); j++)

					{

						try {
							if (Stoppreview) {
								break;
							}

							MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(j);

							MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
							MailConversionOptions de = new MailConversionOptions();
							MapiMessage contact1 = (MapiMessage) pst.extractMessage(messageInfo);
							MailMessage mess = contact1.toMailMessage(de);
							MapiMessage contact = MapiMessage.fromMailMessage(mess, d);
							listmapi.add(contact);
							listPSTOSTgemesingo.add(messageInfo);

							String from = messageInfo.getSenderRepresentativeName();

							Date DeliveryTime = contact.getDeliveryTime();

							String Subject = messageInfo.getSubject();
							lblTotalMessageCount.setText("Total Message Count :" + i2);
							i2++;
							if (contact.getAttachments().size() > 0) {
								ImageIcon icon = new ImageIcon(Main_Frame.class.getResource("/attachment-icon.png"));
								JLabel imagelabl = new JLabel();
								imagelabl.setIcon(icon);
								mode = (DefaultTableModel) table_fileinformation.getModel();

								mode.addRow(new Object[] { "<html><b>" + from, "<html><b>" + Subject,
										"<html><b>" + DeliveryTime, imagelabl });
							} else {
								mode = (DefaultTableModel) table_fileinformation.getModel();

								mode.addRow(new Object[] { "<html><b>" + from, "<html><b>" + Subject,
										"<html><b>" + DeliveryTime });
							}
						} catch (Exception e) {
							continue;
						}

					}

					path = "";
					break;

				}
				if (folderInf.hasSubFolders()) {
					fileInhformationsubfolder_Ost_Pst(folderInf);

				}
				path = path.replace(File.separator + folderInf.getDisplayName(), "");
			} catch (Exception e) {
				continue;
			}
		}

	}

	public void fileInformation_on_mbox() {
		MboxrdStorageReader mbox = null;

		try {
			FileStream stream = new FileStream(path2, FileMode.OpenOrCreate, FileAccess.Read);

			mbox = new MboxrdStorageReader(stream.toInputStream(), false);
		} catch (Exception e) {
			JOptionPane.showMessageDialog(mf, "File is Currupted  Please Choose another file  " + filepath,
					messageboxtitle, JOptionPane.INFORMATION_MESSAGE,
					new ImageIcon(Main_Frame.class.getResource("/information.png")));

		}

		MailMessage message1 = mbox.readNextMessage();
		int i2 = 1;
		while (message1 != null) {

			if (Stoppreview) {
				break;
			}
			MailConversionOptions option = new MailConversionOptions();
			MapiMessage msg = MapiMessage.fromMailMessage(message1, MapiConversionOptions.getASCIIFormat());
			MailMessage message = msg.toMailMessage(option);

			String from = message.getFrom().toString();

			String Subject = message.getSubject();

			String Date = message.getDate().toString();
			lblTotalMessageCount.setText("Total Message Count :" + i2);
			i2++;
			listmail.add(message);
			if (message.getAttachments().size() > 0) {
				ImageIcon icon = new ImageIcon(Main_Frame.class.getResource("/attachment-icon.png"));
				JLabel imagelabl = new JLabel();
				imagelabl.setIcon(icon);
				mode = (DefaultTableModel) table_fileinformation.getModel();

				mode.addRow(new Object[] { "<html><b>" + from, "<html><b>" + Subject, "<html><b>" + Date, imagelabl });
			} else {
				mode = (DefaultTableModel) table_fileinformation.getModel();

				mode.addRow(new Object[] { "<html><b>" + from, "<html><b>" + Subject, "<html><b>" + Date });
			}

			try {
				message1 = mbox.readNextMessage();

			} catch (Exception e) {
				continue;
			}

		}

	}

	void readapple_mail(File filearray, DefaultMutableTreeNode node) throws Exception {

		File[] files = filearray.listFiles();

		for (int i = 0; i < files.length; i++) {

			if (files[i].isFile()) {
				String extension = "";
				try {
					extension = getFileExtension(files[i]);
				} catch (Exception e) {
					extension = "";
				}
				if (files[i].length() > 0) {
					if (extension.equalsIgnoreCase("emlx")) {

						DefaultMutableTreeNode t = new DefaultMutableTreeNode("<html><b>" + files[i].getName());

						node.add(t);
					}
				}
			} else {

				File[] fo = files[i].listFiles();

				if (fo.length > 0) {
					if (!files[i].getName().equalsIgnoreCase("MailData")) {
						foldername = files[i].getName();

						DefaultMutableTreeNode t = new DefaultMutableTreeNode(foldername);

						node.add(t);

						readapple_mail(files[i], t);
					}
				}
			}

		}

	}

	public void fileinformation_olm() {
		OlmStorage storage = new OlmStorage(path2);
		// System.out.println("hello");

		for (OlmFolder folder : storage.getFolderHierarchy()) {

			String pa1 = folder.getName().replaceAll("[\\[\\]]", "");

			if (folder.getName().equals(foldername)) {

				Iterator<MapiMessage> it = storage.enumerateMessages(folder).iterator();
				if (Stoppreview) {
					break;
				}
				if (folder.hasMessages()) {
					while (it.hasNext()) {
						MapiMessage msg1 = it.next();
						MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
						MailConversionOptions de = new MailConversionOptions();

						MailMessage mess = msg1.toMailMessage(de);
						MapiMessage msg = MapiMessage.fromMailMessage(mess, d);

						listmapi.add(msg);
						String from = msg.getSenderEmailAddress();

						Date DeliveryTime = msg.getDeliveryTime();

						String Subject = msg.getSubject();

						if (msg.getAttachments().size() > 0) {
							ImageIcon icon = new ImageIcon(Main_Frame.class.getResource("/attachment-icon.png"));
							JLabel imagelabl = new JLabel();
							imagelabl.setIcon(icon);
							mode = (DefaultTableModel) table_fileinformation.getModel();

							mode.addRow(new Object[] { "<html><b>" + from, "<html><b>" + Subject,
									"<html><b>" + DeliveryTime, imagelabl });
						} else {
							mode = (DefaultTableModel) table_fileinformation.getModel();

							mode.addRow(new Object[] { "<html><b>" + from, "<html><b>" + Subject,
									"<html><b>" + DeliveryTime });
						}

					}
				}
			}

			if (folder.getSubFolders().size() > 0) {

				getFolderolminfo(folder, pa1, storage);

			}

		}

	}

	private void getFolderolminfo(OlmFolder folder, String rootFolder, OlmStorage storage) {

		for (OlmFolder subFolder : folder.getSubFolders()) {

			String curpath = rootFolder + File.separator + subFolder.getName().replaceAll("[\\[\\]]", "");

			if (curpath.equals(foldername)) {

				if (subFolder.hasMessages()) {
					for (MapiMessage msg1 : storage.enumerateMessages(subFolder)) {
						try {
							if (Stoppreview) {
								break;
							}

							MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
							MailConversionOptions de = new MailConversionOptions();

							MailMessage mess = msg1.toMailMessage(de);
							MapiMessage msg = MapiMessage.fromMailMessage(mess, d);

							listmapi.add(msg);
							String from = msg.getSenderEmailAddress();

							Date DeliveryTime = msg.getDeliveryTime();

							String Subject = msg.getSubject();

							if (msg.getAttachments().size() > 0) {
								ImageIcon icon = new ImageIcon(Main_Frame.class.getResource("/attachment-icon.png"));
								JLabel imagelabl = new JLabel();
								imagelabl.setIcon(icon);
								mode = (DefaultTableModel) table_fileinformation.getModel();

								mode.addRow(new Object[] { "<html><b>" + from, "<html><b>" + Subject,
										"<html><b>" + DeliveryTime, imagelabl });
							} else {
								mode = (DefaultTableModel) table_fileinformation.getModel();

								mode.addRow(new Object[] { "<html><b>" + from, "<html><b>" + Subject,
										"<html><b>" + DeliveryTime });
							}
						} catch (Exception e) {
							mf.logger.warning("Exception : " + e.getMessage() + System.lineSeparator());
							continue;
						}
					}
				}

				break;

			}

			if (subFolder.getSubFolders().size() > 0) {

				getFolderolminfo(subFolder, curpath, storage);

			}

			curpath = removefolder(curpath);
		}

	}

	public static void getTree(String folderName) {

		DefaultMutableTreeNode node = null;

		if (folderName.contains(File.separator)) {

			String parts[] = folderName.split(Matcher.quoteReplacement(File.separator));

			DefaultMutableTreeNode par = new DefaultMutableTreeNode(parts[parts.length - 2]);
			{
				DefaultMutableTreeNode child = new DefaultMutableTreeNode(parts[parts.length - 1]);

				search(root, par);

				lastNode.add(child);

				expandAllNodes();
			}
		}

		else {
			node = new DefaultMutableTreeNode(folderName);
			model.insertNodeInto(node, root, root.getChildCount());

			lastNode = node;
			expandAllNodes();
		}

	}

	void read_mbox_folder(File filearray) {
		File[] files = filearray.listFiles();

		for (int j = 0; j < files.length; j++) {

			if (files[j].isDirectory()) {

				read_mbox_folder(files[j]);

			} else {

				String extension = getFileExtension(files[j]);

				if (extension.equalsIgnoreCase("mbox") || extension.equalsIgnoreCase("mbx") || extension.equals("")) {
					filepath = files[j].getAbsolutePath();

					readMboxFile();

				}

			}

		}

	}

	void reademl_emlx_msg_folder(File filearray) {
		File[] files = filearray.listFiles();

		int messagesize = files.length;

		for (int j = 0; j < messagesize; j++) {

			if (files[j].isDirectory()) {

				reademl_emlx_msg_folder(files[j]);

			} else {

				String extension = getFileExtension(files[j]);
				if (fileoptionm.equalsIgnoreCase("EML File (.eml)")) {
					if (extension.equals("eml")) {

						filepath = files[j].getAbsolutePath();

						readmailFile();

					}
				} else if (fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")) {
					if (extension.equalsIgnoreCase("emlx")) {

						filepath = files[j].getAbsolutePath();

						readmailFile();

					}
				} else if (fileoptionm.equalsIgnoreCase("Apple Mail")) {
					if (extension.equalsIgnoreCase("emlx")) {

						filepath = files[j].getAbsolutePath();

						readmailFile();

					}
				} else if (fileoptionm.equalsIgnoreCase("Message File (.msg)")) {
					if (extension.equalsIgnoreCase("msg")) {

						filepath = files[j].getAbsolutePath();

						readmailFile();
					}
				} else if (fileoptionm.equalsIgnoreCase("Maildir")) {

					filepath = files[j].getAbsolutePath();

					readmailFile();

				}
			}
		}
	}

	void read_olm_folder(File filearray) {
		File[] files = filearray.listFiles();

		for (int j = 0; j < files.length; j++) {

			if (files[j].isDirectory()) {

				read_olm_folder(files[j]);

			} else {

				String extension = getFileExtension(files[j]);

				if (extension.equalsIgnoreCase("olm")) {
					filepath = files[j].getAbsolutePath();

					readolmFile();

				}
			}
		}
	}

	void read_PSTOST_folder(File filearray) {
		File[] files = filearray.listFiles();

		for (int j = 0; j < files.length; j++) {

			if (files[j].isDirectory()) {

				read_PSTOST_folder(files[j]);

			} else {

				String extension = getFileExtension(files[j]);
				if (fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")) {
					if (extension.equalsIgnoreCase("pst")) {
						filepath = files[j].getAbsolutePath();

						readAnOST_PstFile();

					}

				} else if (fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")) {

					if (extension.equalsIgnoreCase("ost")) {
						filepath = files[j].getAbsolutePath();

						readAnOST_PstFile();

					}
				}
			}

		}

	}

	public void ConvertPST_ost() throws Exception {

		String path2 = "";
		FolderInfo folderInfo2 = pst.getRootFolder();

		Folder = folderInfo2.getDisplayName();
		Folder = Folder.replace(",", "").replace(".", "");
		Folder = getRidOfIllegalFileNameCharacters(Folder);
		Folder = Folder.replaceAll("[\\[\\]]", "");
		Folder = Folder.trim();
		if (Folder.equalsIgnoreCase("")) {
			Folder = "Root Folder";
		}
		path = path + File.separator + Folder;
		path2 = Folder;

		MessageInfoCollection messageInfoCollection1 = folderInfo2.getContents();

		info = ost.getRootFolder();

		int messagesize1;
		if (demo) {
			if (messageInfoCollection1.size() <= All_Data.demo_count) {
				messagesize1 = messageInfoCollection1.size();
			} else {
				messagesize1 = All_Data.demo_count;
			}

		} else {
			messagesize1 = messageInfoCollection1.size();
		}
		listduplicacy.clear();
		for (int i = 0; i < messagesize1; i++) {
			try {

//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				if ((i % 100) == 0) {
					System.gc();

				}

				MessageInfo messageInfo = (MessageInfo) messageInfoCollection1.get_Item(i);

				MapiMessage message1 = pst.extractMessage(messageInfo);
				MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
				MailConversionOptions de = new MailConversionOptions();
				de.setConvertAsTnef(true);
				MailMessage mess = message1.toMailMessage(de);
				if (chckbxMigrateOrBackup.isSelected()) {
					mess.getAttachments().clear();
				}
				MapiMessage message = MapiMessage.fromMailMessage(mess, d);
				int bct = message.getBodyType();
				if (bct == 0) {
					message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
				} else {
					message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
				}

				Date Receiveddate = message.getDeliveryTime();

				try {

					if (chckbxRemoveDuplicacy.isSelected()) {

						String input = duplicacymapi(message);
						input = input.replaceAll("\\s", "");
						input = input.trim();

						if (!listduplicacy.contains(input)) {
							System.out.println("Not a duplicate message");
							listduplicacy.add(input);

							if (chckbx_Mail_Filter.isSelected()) {
								if (Receiveddate.after(mailfilterstartdate) && Receiveddate.before(mailfilterenddate)) {
									count_destination++;
									if (((message.getFlags()
											& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
										info.addMessage(message);
									} else {
										message.setMessageFlags(MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
										info.addMessage(message);

									}

								} else if (Receiveddate.equals(mailfilterstartdate)
										|| Receiveddate.equals(mailfilterenddate)) {
									count_destination++;
									if (((message.getFlags()
											& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
										info.addMessage(message);
									} else {
										message.setMessageFlags(MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
										info.addMessage(message);

									}

								}
							} else {
								count_destination++;
								if (((message.getFlags()
										& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
									info.addMessage(message);
								} else {
									message.setMessageFlags(MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
									info.addMessage(message);

								}

							}
						}
					} else {
						if (chckbx_Mail_Filter.isSelected()) {
							if (Receiveddate.after(mailfilterstartdate) && Receiveddate.before(mailfilterenddate)) {
								count_destination++;
								if (((message.getFlags()
										& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
									info.addMessage(message);
								} else {
									message.setMessageFlags(MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
									info.addMessage(message);

								}

							} else if (Receiveddate.equals(mailfilterstartdate)
									|| Receiveddate.equals(mailfilterenddate)) {
								count_destination++;
								if (((message.getFlags()
										& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
									info.addMessage(message);
								} else {
									message.setMessageFlags(MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
									info.addMessage(message);

								}

							}
						} else {
							count_destination++;
							if (((message.getFlags()
									& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
								info.addMessage(message);
							} else {
								message.setMessageFlags(MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
								info.addMessage(message);

							}

						}

					}

				} catch (OutOfMemoryError ep) {
					mf.logger.info("Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
				} catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + "Message" + " " + i
							+ mf.namingconventionmapi(message) + System.lineSeparator());
					e.printStackTrace();
					continue;
				}

				lbl_progressreport.setText("  Total Message Saved Count  " + count_destination + "  " + Folder
						+ "   Extarcting messsage " + message.getSubject());

			} catch (Exception e) {
				continue;
			}

		}

		FolderInfoCollection folderInf = pst.getRootFolder().getSubFolders();

		// //int count = 1;
		for (int j = 0; j < folderInf.size(); j++) {
			try {

				FolderInfo folderInfo = folderInf.get_Item(j);
				String Folder = folderInfo.getDisplayName();
				Folder = Folder.replace(",", "").replace(".", "");
				Folder = getRidOfIllegalFileNameCharacters(Folder);
				Folder = Folder.replaceAll("[\\[\\]]", "");
				Folder = Folder.trim();
				// System.out.println(Folder);
				// progressBar_message_p3.setStringPainted(true);
				// progressBar_message_p3.setValue(0);
//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				path = path + File.separator + Folder;
				String path3 = Folder;

				try {
					for (int l = 0; l < pstfolderlist.size(); l++) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						String path1 = pstfolderlist.get(l).replace(path2 + File.separator, "");

						System.out.println(path1);

						if (path1.equalsIgnoreCase(path3)) {
							lbl_progressreport.setText(" Getting Folder " + Folder);

							listdupliccal.clear();
							listduplicacy.clear();
							listdupliccontact.clear();
							listduplictask.clear();

							if (Folder.contains("Inbox")) {

								if (folderInfo.getContentCount() > 0) {
									info1 = ost.createPredefinedFolder(Folder, StandardIpmFolder.Inbox, true);
									MessageInfoCollection messageInfoCollection = folderInfo.getContents();

									messageaddpst(messageInfoCollection, info1, Folder);
								}
							} else if (Folder.contains("Deleted Item")) {

								if (folderInfo.getContentCount() > 0) {
									info1 = ost.getPredefinedFolder(StandardIpmFolder.DeletedItems);
									MessageInfoCollection messageInfoCollection = folderInfo.getContents();
									messageaddpst(messageInfoCollection, info1, Folder);
								}
							} else if (Folder.contains("Calendar")) {

								if (folderInfo.getContentCount() > 0) {
									info = ost.createPredefinedFolder(Folder, StandardIpmFolder.Appointments, true);
									MessageInfoCollection messageInfoCollection = folderInfo.getContents();
									int messagesize;
									if (demo) {
										if (messageInfoCollection.size() <= All_Data.demo_count) {
											messagesize = messageInfoCollection.size();
										} else {
											messagesize = All_Data.demo_count;
										}

									} else {
										messagesize = messageInfoCollection.size();
									}

									for (int i = 0; i < messagesize; i++) {
										try {

//											if (stop) {
//												break;
//											}
											if (stop) {
												break;
											}
											if ((i % 100) == 0) {
												System.gc();

											}

											MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

											MapiMessage message1 = pst.extractMessage(messageInfo);
											MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
											MailConversionOptions de = new MailConversionOptions();
											de.setConvertAsTnef(true);
											MailMessage mess = message1.toMailMessage(de);
											MapiMessage message = MapiMessage.fromMailMessage(mess, d);
											int bct = message.getBodyType();
											if (bct == 0) {
												message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
											} else {
												message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
											}

											Date Receiveddate = message.getDeliveryTime();
											if (message.getMessageClass().equals("IPM.Appointment")
													|| message.getMessageClass().contains("IPM.Schedule.Meeting")) {

												try {

													MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

													if (chckbxRemoveDuplicacy.isSelected()) {

														String input = duplicacymapiCal(cal);
														input = input.replaceAll("\\s", "");
														input = input.trim();

														if (!listdupliccal.contains(input)) {
															System.out.println("Not a duplicate message");
															listdupliccal.add(input);

															if (chckbx_calender_box.isSelected()) {
																if (Receiveddate.after(Calenderfilterstartdate)
																		&& Receiveddate.before(Calenderfilterenddate)) {

																	info.addMapiMessageItem(cal);

																	count_destination++;
																} else if (Receiveddate.equals(Calenderfilterstartdate)
																		|| Receiveddate.equals(Calenderfilterenddate)) {
																	info.addMapiMessageItem(cal);
																	count_destination++;

																}

															} else {

																info.addMapiMessageItem(cal);

																count_destination++;

															}

														}
													} else {

														if (chckbx_calender_box.isSelected()) {
															if (Receiveddate.after(Calenderfilterstartdate)
																	&& Receiveddate.before(Calenderfilterenddate)) {

																info.addMapiMessageItem(cal);

																count_destination++;
															} else if (Receiveddate.equals(Calenderfilterstartdate)
																	|| Receiveddate.equals(Calenderfilterenddate)) {
																info.addMapiMessageItem(cal);
																count_destination++;

															}

														} else {

															info.addMapiMessageItem(cal);

															count_destination++;

														}

													}

												} catch (OutOfMemoryError ep) {
													mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
															+ mf.namingconventionmapi(message));
												} catch (Exception e) {
													mf.logger.warning("Exception : " + e.getMessage() + "  "
															+ mf.namingconventionmapi(message)
															+ System.lineSeparator());
													e.printStackTrace();
													continue;
												}

											}

											lbl_progressreport.setText(
													"  Total Message Saved Count  " + count_destination + "  " + Folder
															+ "   Extarcting messsage " + message.getSubject());

										} catch (Exception e) {
											continue;
										}

									}

								}
							} else if (Folder.contains("Tasks") || Folder.contains("ToDo")) {

								if (folderInfo.getContentCount() > 0) {
									info = ost.createPredefinedFolder(Folder, StandardIpmFolder.Tasks, true);
									MessageInfoCollection messageInfoCollection = folderInfo.getContents();
									int messagesize;
									if (demo) {
										if (messageInfoCollection.size() <= All_Data.demo_count) {
											messagesize = messageInfoCollection.size();
										} else {
											messagesize = All_Data.demo_count;
										}

									} else {
										messagesize = messageInfoCollection.size();
									}

									for (int i = 0; i < messagesize; i++) {
										try {

//											if (stop) {
//												break;
//											}
											if (stop) {
												break;
											}
											if ((i % 100) == 0) {
												System.gc();

											}

											MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

											MapiMessage message1 = pst.extractMessage(messageInfo);
											MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
											MailConversionOptions de = new MailConversionOptions();
											de.setConvertAsTnef(true);
											MailMessage mess = message1.toMailMessage(de);
											MapiMessage message = MapiMessage.fromMailMessage(mess, d);
											int bct = message.getBodyType();
											if (bct == 0) {
												message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
											} else {
												message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
											}

											Date Receiveddate = message.getDeliveryTime();
											if (messageInfo.getMessageClass().equals("IPM.StickyNote")
													|| messageInfo.getMessageClass().equals("IPM.Task")) {
												try {

													MapiTask task = null;
													if (messageInfo.getMessageClass().equals("IPM.Task")) {
														task = (MapiTask) message.toMapiMessageItem();
													}

													if (chckbxRemoveDuplicacy.isSelected()) {
														String input = "";
														if (messageInfo.getMessageClass().equals("IPM.Task")) {
															input = duplicacymapiTask(task);
														}
														input = input.replaceAll("\\s", "");
														input = input.trim();

														if (!listduplictask.contains(input)) {
															System.out.println("Not a duplicate message");
															listduplictask.add(input);

															if (task_box.isSelected()) {
																if (Receiveddate.after(taskfilterstartdate)
																		&& Receiveddate.before(taskfilterenddate)) {
																	info.addMapiMessageItem(message);
																	count_destination++;
																} else if (Receiveddate.equals(taskfilterstartdate)
																		|| Receiveddate.equals(taskfilterenddate)) {
																	info.addMapiMessageItem(message);
																	count_destination++;

																}

															} else {
																info.addMapiMessageItem(message);
																count_destination++;

															}

														}
													} else {

														if (task_box.isSelected()) {
															if (Receiveddate.after(taskfilterstartdate)
																	&& Receiveddate.before(taskfilterenddate)) {
																info.addMapiMessageItem(message);
																count_destination++;
															} else if (Receiveddate.equals(taskfilterstartdate)
																	|| Receiveddate.equals(taskfilterenddate)) {
																info.addMapiMessageItem(message);
																count_destination++;

															}

														} else {
															info.addMapiMessageItem(message);
															count_destination++;

														}

													}

												} catch (OutOfMemoryError ep) {
													mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
															+ mf.namingconventionmapi(message));
												} catch (Exception e) {
													mf.logger.warning("Exception : " + e.getMessage() + "Task" + " " + i
															+ mf.namingconventionmapi(message)
															+ System.lineSeparator());
													e.printStackTrace();
													continue;
												}

											}

											lbl_progressreport.setText(
													"  Total Message Saved Count  " + count_destination + "  " + Folder
															+ "   Extarcting messsage " + message.getSubject());

										} catch (Exception e) {
											continue;
										}

									}
								}
							} else if (Folder.contains("Contacts")) {

								// info = ost.getPredefinedFolder(StandardIpmFolder.Contacts);
								if (folderInfo.getContentCount() > 0) {

									info = ost.createPredefinedFolder(Folder, StandardIpmFolder.Contacts, true);
									MessageInfoCollection messageInfoCollection = folderInfo.getContents();

									int messagesize;
									if (demo) {
										if (messageInfoCollection.size() <= All_Data.demo_count) {
											messagesize = messageInfoCollection.size();
										} else {
											messagesize = All_Data.demo_count;
										}

									} else {
										messagesize = messageInfoCollection.size();
									}

									for (int i = 0; i < messagesize; i++) {
										try {

//											if (stop) {
//												break;
//											}
											if (stop) {
												break;
											}
											if ((i % 100) == 0) {
												System.gc();

											}

											MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

											MapiMessage message1 = pst.extractMessage(messageInfo);
											MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
											MailConversionOptions de = new MailConversionOptions();
											de.setConvertAsTnef(true);
											MailMessage mess = message1.toMailMessage(de);
											MapiMessage message = MapiMessage.fromMailMessage(mess, d);
											int bct = message.getBodyType();
											if (bct == 0) {
												message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
											} else {
												message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
											}

											if (message.getMessageClass().equals("IPM.Contact")) {
												try {

													MapiContact con = (MapiContact) message.toMapiMessageItem();
													if (chckbxRemoveDuplicacy.isSelected()) {

														String input = duplicacymapiContact(con);
														input = input.replaceAll("\\s", "");
														input = input.trim();

														if (!listdupliccontact.contains(input)) {
															System.out.println("Not a duplicate message");
															listdupliccontact.add(input);

															info.addMapiMessageItem(con);
															count_destination++;

														} else {
															System.out.println(" duplicate message");
															System.out.println(input);

														}
													} else {

														info.addMapiMessageItem(con);
														count_destination++;

													}

													count_destination++;

												} catch (Error e) {
													mf.logger.warning(
															"ERROR : " + e.getMessage() + System.lineSeparator());
												} catch (Exception e) {
													mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
															+ i + mf.namingconventionmapi(message)
															+ System.lineSeparator());
													e.printStackTrace();
													continue;
												}

											}

											lbl_progressreport.setText(
													"  Total Message Saved Count  " + count_destination + "  " + Folder
															+ "   Extarcting messsage " + message.getSubject());

										} catch (Exception e) {
											continue;
										}

									}
								}
							} else if (Folder.contains("Outbox")) {

								if (folderInfo.getContentCount() > 0) {
									info1 = ost.createPredefinedFolder(Folder, StandardIpmFolder.Outbox, true);
									MessageInfoCollection messageInfoCollection = folderInfo.getContents();
									messageaddpst(messageInfoCollection, info1, Folder);
								}
							} else if (Folder.contains("Draft")) {

								if (folderInfo.getContentCount() > 0) {
									info1 = ost.createPredefinedFolder(Folder, StandardIpmFolder.Drafts, true);
									MessageInfoCollection messageInfoCollection = folderInfo.getContents();
									messageaddpst(messageInfoCollection, info1, Folder);
								}
							} else if (Folder.contains("Junk Email")) {

								if (folderInfo.getContentCount() > 0) {
									info1 = ost.createPredefinedFolder(Folder, StandardIpmFolder.JunkEmail, true);
									MessageInfoCollection messageInfoCollection = folderInfo.getContents();
									messageaddpst(messageInfoCollection, info1, Folder);
								}
							} else if (Folder.contains("Notes")) {

								if (folderInfo.getContentCount() > 0) {
									info1 = ost.createPredefinedFolder(Folder, StandardIpmFolder.Notes, true);
									MessageInfoCollection messageInfoCollection = folderInfo.getContents();
									messageaddpst(messageInfoCollection, info1, Folder);
								}
							} else if (Folder.contains("SyncIssues")) {

								if (folderInfo.getContentCount() > 0) {
									info1 = ost.createPredefinedFolder(Folder, StandardIpmFolder.SyncIssues, true);
									MessageInfoCollection messageInfoCollection = folderInfo.getContents();
									messageaddpst(messageInfoCollection, info1, Folder);
								}
							} else if (Folder.contains("Journal")) {

								if (folderInfo.getContentCount() > 0) {
									info1 = ost.createPredefinedFolder(Folder, StandardIpmFolder.Journal, true);
									MessageInfoCollection messageInfoCollection = folderInfo.getContents();
									messageaddpst(messageInfoCollection, info1, Folder);
								}
							} else if (Folder.contains("Sent")) {

								if (folderInfo.getContentCount() > 0) {
									info1 = ost.createPredefinedFolder(Folder, StandardIpmFolder.SentItems, true);
									MessageInfoCollection messageInfoCollection = folderInfo.getContents();
									messageaddpst(messageInfoCollection, info1, Folder);
								}
							} else {

								if (folderInfo.getContentCount() > 0) {
									MessageInfoCollection messageInfoCollection = folderInfo.getContents();

									listduplicacy.clear();
									int messagesize;
									if (demo) {
										if (messageInfoCollection.size() <= All_Data.demo_count) {
											messagesize = messageInfoCollection.size();
										} else {
											messagesize = All_Data.demo_count;
										}

									} else {
										messagesize = messageInfoCollection.size();
									}

									for (int i = 0; i < messagesize; i++) {
										try {

//											if (stop) {
//												break;
//											}
											if (stop) {
												break;
											}
											if ((i % 100) == 0) {
												System.gc();

											}

											MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

											MapiMessage message1 = pst.extractMessage(messageInfo);
											MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
											MailConversionOptions de = new MailConversionOptions();
											MailMessage mess = message1.toMailMessage(de);
											MapiMessage message = MapiMessage.fromMailMessage(mess, d);
											int bct = message.getBodyType();
											if (bct == 0) {
												message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
											} else {
												message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
											}

											Date Receiveddate = message.getDeliveryTime();
											if (message.getMessageClass().equals("IPM.Contact")) {
												try {

													if (ost.getPredefinedFolder(StandardIpmFolder.Contacts) == null) {
														info1 = ost.createPredefinedFolder(path,
																StandardIpmFolder.Contacts, true);
													}

													MapiContact con = (MapiContact) message.toMapiMessageItem();

													if (!info1.getContainerClass().equalsIgnoreCase("IPF.Contact")) {
														info1 = ost.getPredefinedFolder(StandardIpmFolder.Contacts);
													}
													info1.addMapiMessageItem(con);

													count_destination++;

												} catch (OutOfMemoryError ep) {
													mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
															+ mf.namingconventionmapi(message));
												} catch (Exception e) {
													mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
															+ i + mf.namingconventionmapi(message)
															+ System.lineSeparator());
													continue;
												}

											} else if (message.getMessageClass().equals("IPM.Appointment")
													|| message.getMessageClass().contains("IPM.Schedule.Meeting")) {

												try {

													if (ost.getPredefinedFolder(
															StandardIpmFolder.Appointments) == null) {
														info1 = ost.createPredefinedFolder(path,
																StandardIpmFolder.Appointments, true);
													}

													MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

													if (!info1.getContainerClass()
															.equalsIgnoreCase("IPF.Appointment")) {
														info1 = ost.getPredefinedFolder(StandardIpmFolder.Appointments);
													}

													if (chckbx_calender_box.isSelected()) {
														if (Receiveddate.after(Calenderfilterstartdate)
																&& Receiveddate.before(Calenderfilterenddate)) {
															info1.addMapiMessageItem(cal);
															count_destination++;
														}

													} else {
														info1.addMapiMessageItem(cal);
														count_destination++;

													}

												} catch (OutOfMemoryError ep) {
													mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
															+ mf.namingconventionmapi(message));
												} catch (Exception e) {
													mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
															+ i + mf.namingconventionmapi(message)
															+ System.lineSeparator());
													e.printStackTrace();
													continue;
												}

											} else if (message.getMessageClass().equals("IPM.StickyNote")
													|| message.getMessageClass().equals("IPM.Task")) {
												try {
													info1 = ost.getPredefinedFolder(StandardIpmFolder.Tasks);

													if (chckbx_Mail_Filter.isSelected()) {
														if (Receiveddate.after(mailfilterstartdate)
																&& Receiveddate.before(mailfilterenddate))

														{
															info1.addMessage(message);
															count_destination++;

														}

													} else {
														info1.addMessage(message);
														count_destination++;
													}

												} catch (OutOfMemoryError ep) {
													mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
															+ mf.namingconventionmapi(message));
												} catch (Exception e) {
													mf.logger.warning("Exception : " + e.getMessage() + "Task" + " " + i
															+ mf.namingconventionmapi(message)
															+ System.lineSeparator());
													e.printStackTrace();
													continue;
												}

											} else {

												try {

													if (ost.getRootFolder().getSubFolder(path, true) != null) {

														info = ost.getRootFolder().getSubFolder(path, true);
													} else {

														info = ost.getRootFolder().addSubFolder(path, true);
													}

													if (chckbxRemoveDuplicacy.isSelected()) {

														String input = duplicacymapi(message);
														input = input.replaceAll("\\s", "");
														input = input.trim();

														if (!listduplicacy.contains(input)) {
															System.out.println("Not a duplicate message");
															listduplicacy.add(input);

															if (chckbx_Mail_Filter.isSelected()) {
																if (Receiveddate.after(mailfilterstartdate)
																		&& Receiveddate.before(mailfilterenddate)) {
																	count_destination++;
																	if (((message.getFlags()
																			& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
																		info.addMessage(message);
																	} else {
																		message.setMessageFlags(
																				MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
																		info.addMessage(message);

																	}

																} else if (Receiveddate.equals(mailfilterstartdate)
																		|| Receiveddate.equals(mailfilterenddate)) {
																	count_destination++;
																	if (((message.getFlags()
																			& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
																		info.addMessage(message);
																	} else {
																		message.setMessageFlags(
																				MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
																		info.addMessage(message);

																	}

																}
															} else {
																count_destination++;
																if (((message.getFlags()
																		& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
																	info.addMessage(message);
																} else {
																	message.setMessageFlags(
																			MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
																	info.addMessage(message);

																}

															}
														} else {
															System.out.println(" duplicate message");
															System.out.println(input);

														}
													} else {
														if (chckbx_Mail_Filter.isSelected()) {
															if (Receiveddate.after(mailfilterstartdate)
																	&& Receiveddate.before(mailfilterenddate)) {
																count_destination++;
																if (((message.getFlags()
																		& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
																	info.addMessage(message);
																} else {
																	message.setMessageFlags(
																			MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
																	info.addMessage(message);

																}

															} else if (Receiveddate.equals(mailfilterstartdate)
																	|| Receiveddate.equals(mailfilterenddate)) {
																count_destination++;
																if (((message.getFlags()
																		& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
																	info.addMessage(message);
																} else {
																	message.setMessageFlags(
																			MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
																	info.addMessage(message);

																}

															}
														} else {
															count_destination++;
															if (((message.getFlags()
																	& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
																info.addMessage(message);
															} else {
																message.setMessageFlags(
																		MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
																info.addMessage(message);

															}

														}

													}

												} catch (OutOfMemoryError ep) {
													mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
															+ mf.namingconventionmapi(message));
												} catch (Exception e) {
													mf.logger.warning("Exception : " + e.getMessage() + "Message" + " "
															+ i + mf.namingconventionmapi(message)
															+ System.lineSeparator());
													e.printStackTrace();
													continue;
												}

											}

											lbl_progressreport.setText(
													"  Total Message Saved Count  " + count_destination + "  " + Folder
															+ "   Extarcting messsage " + message.getSubject());
											// int messageprogress = (count * 100) / messagesize;
											// iprogressBar_message_p3.setValue(messageprogress);
											// //count++;

											// System.out.println("Done");
										} catch (Exception e) {
											e.printStackTrace();
											continue;
										}

									}
								}
							}

						}
					}
				} catch (Exception e) {

				}
				if (folderInfo.hasSubFolders()) {
					getsubfolderforPSTOST_PSTOST(folderInfo, path2, path3);
				}

			} catch (Exception e) {
				continue;
			}

		}

	}

	void psttask(MapiTask task, Date Receiveddate, MapiMessage message, FolderInfo info, Boolean checktask,
			MessageInfo messageInfo) {

		if (chckbxRemoveDuplicacy.isSelected()) {

			String input = "";
			if (messageInfo.getMessageClass().equals("IPM.Task")) {
				input = duplicacymapiTask(task);
			}
			input = input.replaceAll("\\s", "");
			input = input.trim();

			if (!listduplictask.contains(input)) {
				System.out.println("Not a duplicate message");
				listduplictask.add(input);
				if (checktask) {
					if (task_box.isSelected()) {
						if (Receiveddate.after(taskfilterstartdate) && Receiveddate.before(taskfilterenddate)) {
							info.addMapiMessageItem(message);
							count_destination++;
						} else if (Receiveddate.equals(taskfilterstartdate) || Receiveddate.equals(taskfilterenddate)) {
							info.addMapiMessageItem(message);
							count_destination++;

						}

					} else {
						info.addMapiMessageItem(message);
						count_destination++;

					}
				} else {
					if (task_box.isSelected()) {
						if (Receiveddate.after(taskfilterstartdate) && Receiveddate.before(taskfilterenddate)) {
							info.addMessage(message);
							count_destination++;
						} else if (Receiveddate.equals(taskfilterstartdate) || Receiveddate.equals(taskfilterenddate)) {
							info.addMessage(message);
							count_destination++;

						}

					} else {
						info.addMessage(message);
						count_destination++;

					}
				}

			} else {
				System.out.println(" duplicate message");
				System.out.println(input);

			}
		} else {

			if (checktask) {
				if (task_box.isSelected()) {
					if (Receiveddate.after(taskfilterstartdate) && Receiveddate.before(taskfilterenddate)) {
						info.addMapiMessageItem(message);
						count_destination++;
					} else if (Receiveddate.equals(taskfilterstartdate) || Receiveddate.equals(taskfilterenddate)) {
						info.addMapiMessageItem(message);
						count_destination++;

					}

				} else {
					info.addMapiMessageItem(message);
					count_destination++;

				}
			} else {
				if (task_box.isSelected()) {
					if (Receiveddate.after(taskfilterstartdate) && Receiveddate.before(taskfilterenddate)) {
						info.addMessage(message);
						count_destination++;
					} else if (Receiveddate.equals(taskfilterstartdate) || Receiveddate.equals(taskfilterenddate)) {
						info.addMessage(message);
						count_destination++;

					}

				} else {
					info.addMessage(message);
					count_destination++;

				}
			}

		}

	}

	void pstcontact(MapiContact contact, Date Receiveddate, MapiMessage message, FolderInfo info, Boolean checkcon) {

		if (chckbxRemoveDuplicacy.isSelected()) {

			String input = duplicacymapiContact(contact);
			input = input.replaceAll("\\s", "");
			input = input.trim();

			if (!listdupliccontact.contains(input)) {
				System.out.println("Not a duplicate message");
				listdupliccontact.add(input);
				if (checkcon) {

					info.addMessage(message);
					count_destination++;

				} else {

					info.addMessage(message);
					count_destination++;

				}

			} else {
				System.out.println(" duplicate message");
				System.out.println(input);

			}
		} else {

			if (checkcon) {

				info.addMessage(message);
				count_destination++;

			} else {

				info.addMessage(message);
				count_destination++;

			}

		}

	}

	void pstcalendar(MapiCalendar calendar, Date Receiveddate, MapiMessage msg, FolderInfo info, Boolean checkcal) {

		if (chckbxRemoveDuplicacy.isSelected()) {

			String input = duplicacymapiCal(calendar);
			input = input.replaceAll("\\s", "");
			input = input.trim();

			if (!listdupliccal.contains(input)) {
				System.out.println("Not a duplicate message");
				listdupliccal.add(input);
				if (checkcal) {
					if (chckbx_calender_box.isSelected()) {
						if (Receiveddate.after(Calenderfilterstartdate) && Receiveddate.before(Calenderfilterenddate)) {

							info.addMapiMessageItem(calendar);

							count_destination++;
						} else if (Receiveddate.equals(Calenderfilterstartdate)
								|| Receiveddate.equals(Calenderfilterenddate)) {
							info.addMapiMessageItem(calendar);
							count_destination++;

						}

					} else {

						info.addMapiMessageItem(calendar);

						count_destination++;

					}
				} else {
					if (chckbx_calender_box.isSelected()) {
						if (Receiveddate.after(Calenderfilterstartdate) && Receiveddate.before(Calenderfilterenddate)) {

							info.addMessage(msg);

							count_destination++;
						} else if (Receiveddate.equals(Calenderfilterstartdate)
								|| Receiveddate.equals(Calenderfilterenddate)) {
							info.addMessage(msg);
							count_destination++;

						}

					} else {

						info.addMessage(msg);

						count_destination++;

					}

				}

			}
		} else {

			if (checkcal) {
				if (chckbx_calender_box.isSelected()) {
					if (Receiveddate.after(Calenderfilterstartdate) && Receiveddate.before(Calenderfilterenddate)) {

						info.addMapiMessageItem(calendar);

						count_destination++;
					} else if (Receiveddate.equals(Calenderfilterstartdate)
							|| Receiveddate.equals(Calenderfilterenddate)) {
						info.addMapiMessageItem(calendar);
						count_destination++;

					}

				} else {

					info.addMapiMessageItem(calendar);

					count_destination++;

				}
			} else {
				if (chckbx_calender_box.isSelected()) {
					if (Receiveddate.after(Calenderfilterstartdate) && Receiveddate.before(Calenderfilterenddate)) {

						info.addMessage(msg);

						count_destination++;
					} else if (Receiveddate.equals(Calenderfilterstartdate)
							|| Receiveddate.equals(Calenderfilterenddate)) {
						info.addMessage(msg);
						count_destination++;

					}

				} else {

					info.addMessage(msg);

					count_destination++;

				}

			}

		}

	}

	public void messageaddpst(MessageInfoCollection messageInfoCollection, FolderInfo info, String Folder) {
		int messagesize;
		if (demo) {
			if (messageInfoCollection.size() <= All_Data.demo_count) {
				messagesize = messageInfoCollection.size();
			} else {
				messagesize = All_Data.demo_count;
			}

		} else {
			messagesize = messageInfoCollection.size();
		}

		for (int i = 0; i < messagesize; i++) {
			try {

//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				if ((i % 100) == 0) {
					System.gc();

				}

				MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

				MapiMessage message1 = pst.extractMessage(messageInfo);
				MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
				MailConversionOptions de = new MailConversionOptions();
				de.setConvertAsTnef(true);
				MailMessage mess = message1.toMailMessage(de);
				if (chckbxMigrateOrBackup.isSelected()) {
					mess.getAttachments().clear();
				}
				MapiMessage message = MapiMessage.fromMailMessage(mess, d);
				int bct = message.getBodyType();
				if (bct == 0) {
					message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
				} else {
					message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
				}

				Date Receiveddate = message.getDeliveryTime();
				if (message.getMessageClass().equals("IPM.Contact")) {
					try {

						MapiContact con = (MapiContact) message.toMapiMessageItem();
						// info = ost.getPredefinedFolder(StandardIpmFolder.Contacts);

						Boolean checkcon = false;
						pstcontact(con, Receiveddate, message, info, checkcon);
						count_destination++;

					} catch (Error e) {
						mf.logger.warning("ERROR : " + e.getMessage() + System.lineSeparator());
					} catch (Exception e) {
						mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " " + i
								+ mf.namingconventionmapi(message) + System.lineSeparator());
						e.printStackTrace();
						continue;
					}

				} else if (message.getMessageClass().equals("IPM.Appointment")
						|| message.getMessageClass().contains("IPM.Schedule.Meeting")) {

					try {

						MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();
						Boolean checkcal = false;
						pstcalendar(cal, Receiveddate, message, info, checkcal);

					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						mf.logger.warning("Exception : " + e.getMessage() + "  " + mf.namingconventionmapi(message)
								+ System.lineSeparator());
						e.printStackTrace();
						continue;
					}

				} else if (messageInfo.getMessageClass().equals("IPM.StickyNote")
						|| messageInfo.getMessageClass().equals("IPM.Task")) {
					try {

						Boolean checktask = false;
						MapiTask task = null;
						if (messageInfo.getMessageClass().equals("IPM.Task")) {
							task = (MapiTask) message.toMapiMessageItem();
						}

						psttask(task, Receiveddate, message, info, checktask, messageInfo);

					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						mf.logger.warning("Exception : " + e.getMessage() + "Task" + " " + i
								+ mf.namingconventionmapi(message) + System.lineSeparator());
						e.printStackTrace();
						continue;
					}

				} else {

					try {

						if (chckbxRemoveDuplicacy.isSelected()) {

							String input = duplicacymapi(message);
							input = input.replaceAll("\\s", "");
							input = input.trim();

							if (!listduplicacy.contains(input)) {
								System.out.println("Not a duplicate message");
								listduplicacy.add(input);

								if (chckbx_Mail_Filter.isSelected()) {
									if (Receiveddate.after(mailfilterstartdate)
											&& Receiveddate.before(mailfilterenddate)) {
										count_destination++;
										if (((message.getFlags()
												& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
											info.addMessage(message);
										} else {
											message.setMessageFlags(MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
											info.addMessage(message);

										}

									} else if (Receiveddate.equals(mailfilterstartdate)
											|| Receiveddate.equals(mailfilterenddate)) {
										count_destination++;
										if (((message.getFlags()
												& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
											info.addMessage(message);
										} else {
											message.setMessageFlags(MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
											info.addMessage(message);

										}

									}
								} else {
									count_destination++;
									if (((message.getFlags()
											& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
										info.addMessage(message);
									} else {
										message.setMessageFlags(MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
										info.addMessage(message);

									}

								}
							}
						} else {

							if (chckbx_Mail_Filter.isSelected()) {
								if (Receiveddate.after(mailfilterstartdate) && Receiveddate.before(mailfilterenddate)) {
									count_destination++;
									if (((message.getFlags()
											& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
										info.addMessage(message);
									} else {
										message.setMessageFlags(MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
										info.addMessage(message);

									}

								} else if (Receiveddate.equals(mailfilterstartdate)
										|| Receiveddate.equals(mailfilterenddate)) {
									count_destination++;
									if (((message.getFlags()
											& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
										info.addMessage(message);
									} else {
										message.setMessageFlags(MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
										info.addMessage(message);

									}

								}
							} else {
								count_destination++;
								if (((message.getFlags()
										& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
									info.addMessage(message);
								} else {
									message.setMessageFlags(MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
									info.addMessage(message);

								}

							}

						}

					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						mf.logger.warning("Exception : " + e.getMessage() + "Message" + " " + i
								+ mf.namingconventionmapi(message) + System.lineSeparator());
						e.printStackTrace();
						continue;
					}

				}

				lbl_progressreport.setText("  Total Message Saved Count  " + count_destination + "  " + Folder
						+ "   Extarcting messsage " + message.getSubject());

			} catch (Exception e) {
				continue;
			}

		}
	}

	public void getsubfolderforPSTOST_PSTOST(FolderInfo f, String path2, String path1) {
		FolderInfoCollection subfolder = f.getSubFolders();

		for (int k = 0; k < subfolder.size(); k++) {
			try {
//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				FolderInfo folderf = subfolder.get_Item(k);

				String Folder = folderf.getDisplayName();
				Folder = Folder.replace(",", "").replace(".", "");
				Folder = getRidOfIllegalFileNameCharacters(Folder);
				Folder = Folder.replaceAll("[\\[\\]]", "");
				Folder = Folder.trim();

				path = path1 + File.separator + Folder;

				try {
					for (int l = 0; l < pstfolderlist.size(); l++) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						String path3 = pstfolderlist.get(l).replace(path2 + File.separator, "");
						if (path3.equalsIgnoreCase(path)) {

							// //int count = 1;
							lbl_progressreport.setText(" Getting Folder " + Folder);
							if (folderf.getContainerClass().contains("IPF.Appointment")) {

								if (folderf.getContentCount() > 0) {
									if (ost.getPredefinedFolder(StandardIpmFolder.Appointments) == null) {
										info = ost
												.createPredefinedFolder(f.getDisplayName(),
														StandardIpmFolder.Appointments, true)
												.addSubFolder(Folder, true);
									} else {
										info = ost
												.createPredefinedFolder(f.getDisplayName(),
														StandardIpmFolder.Appointments, true)
												.addSubFolder(Folder, true);
									}
									MessageInfoCollection messageInfoCollection = folderf.getContents();
									int messagesize;
									if (demo) {
										if (messageInfoCollection.size() <= All_Data.demo_count) {
											messagesize = messageInfoCollection.size();
										} else {
											messagesize = All_Data.demo_count;
										}

									} else {
										messagesize = messageInfoCollection.size();
									}

									for (int i = 0; i < messagesize; i++) {
										try {

//											if (stop) {
//												break;
//											}
											if (stop) {
												break;
											}

											if ((i % 100) == 0) {
												System.gc();

											}

											MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

											MapiMessage message1 = pst.extractMessage(messageInfo);
											MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
											MailConversionOptions de = new MailConversionOptions();
											de.setConvertAsTnef(true);
											MailMessage mess = message1.toMailMessage(de);
											if (chckbxMigrateOrBackup.isSelected()) {
												mess.getAttachments().clear();
											}
											MapiMessage message = MapiMessage.fromMailMessage(mess, d);

											Date Receiveddate = message.getDeliveryTime();
											if (message.getMessageClass().equals("IPM.Appointment")
													|| message.getMessageClass().contains("IPM.Schedule.Meeting")) {

												try {

													MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

													if (chckbxRemoveDuplicacy.isSelected()) {

														String input = duplicacymapiCal(cal);
														input = input.replaceAll("\\s", "");
														input = input.trim();

														if (!listdupliccal.contains(input)) {
															System.out.println("Not a duplicate message");
															listdupliccal.add(input);

															if (chckbx_calender_box.isSelected()) {
																if (Receiveddate.after(Calenderfilterstartdate)
																		&& Receiveddate.before(Calenderfilterenddate)) {

																	info.addMapiMessageItem(cal);

																	count_destination++;
																} else if (Receiveddate.equals(Calenderfilterstartdate)
																		|| Receiveddate.equals(Calenderfilterenddate)) {
																	info.addMapiMessageItem(cal);
																	count_destination++;

																}

															} else {

																info.addMapiMessageItem(cal);

																count_destination++;

															}

														} else {
															System.out.println(" duplicate message");
															System.out.println(input);

														}
													} else {

														if (chckbx_calender_box.isSelected()) {
															if (Receiveddate.after(Calenderfilterstartdate)
																	&& Receiveddate.before(Calenderfilterenddate)) {

																info.addMapiMessageItem(cal);

																count_destination++;
															} else if (Receiveddate.equals(Calenderfilterstartdate)
																	|| Receiveddate.equals(Calenderfilterenddate)) {
																info.addMapiMessageItem(cal);
																count_destination++;

															}

														} else {

															info.addMapiMessageItem(cal);

															count_destination++;

														}

													}

												} catch (OutOfMemoryError ep) {
													mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
															+ mf.namingconventionmapi(message));
												} catch (Exception e) {
													mf.logger.warning("Exception : " + e.getMessage() + "  "
															+ mf.namingconventionmapi(message)
															+ System.lineSeparator());
													e.printStackTrace();
													continue;
												}

											}

											lbl_progressreport.setText(
													"  Total Message Saved Count  " + count_destination + "  " + Folder
															+ "   Extarcting messsage " + message.getSubject());

										} catch (Exception e) {
											continue;
										}

									}

								}
							} else if (folderf.getContainerClass().contains("IPF.Task")
									|| folderf.getContainerClass().contains("IPF.StickyNote")) {

								if (folderf.getContentCount() > 0) {
									if (ost.getPredefinedFolder(StandardIpmFolder.Tasks) == null) {
										info = ost.createPredefinedFolder(f.getDisplayName(), StandardIpmFolder.Tasks,
												true).addSubFolder(Folder, true);
									} else {
										info = ost.createPredefinedFolder(f.getDisplayName(), StandardIpmFolder.Tasks,
												true).addSubFolder(Folder, true);
									}
									MessageInfoCollection messageInfoCollection = folderf.getContents();
									int messagesize;
									if (demo) {
										if (messageInfoCollection.size() <= All_Data.demo_count) {
											messagesize = messageInfoCollection.size();
										} else {
											messagesize = All_Data.demo_count;
										}

									} else {
										messagesize = messageInfoCollection.size();
									}

									for (int i = 0; i < messagesize; i++) {
										try {

//											if (stop) {
//												break;
//											}
											if (stop) {
												break;
											}
											if ((i % 100) == 0) {
												System.gc();

											}

											MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

											MapiMessage message1 = pst.extractMessage(messageInfo);
											MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
											MailConversionOptions de = new MailConversionOptions();
											de.setConvertAsTnef(true);
											MailMessage mess = message1.toMailMessage(de);
											if (chckbxMigrateOrBackup.isSelected()) {
												mess.getAttachments().clear();
											}
											MapiMessage message = MapiMessage.fromMailMessage(mess, d);

											Date Receiveddate = message.getDeliveryTime();
											if (messageInfo.getMessageClass().equals("IPM.StickyNote")
													|| messageInfo.getMessageClass().equals("IPM.Task")) {
												try {

													MapiTask task = null;
													if (messageInfo.getMessageClass().equals("IPM.Task")) {
														task = (MapiTask) message.toMapiMessageItem();
													}

													if (chckbxRemoveDuplicacy.isSelected()) {
														String input = "";
														if (messageInfo.getMessageClass().equals("IPM.Task")) {
															input = duplicacymapiTask(task);
														}
														input = input.replaceAll("\\s", "");
														input = input.trim();

														if (!listduplictask.contains(input)) {
															System.out.println("Not a duplicate message");
															listduplictask.add(input);

															if (task_box.isSelected()) {
																if (Receiveddate.after(taskfilterstartdate)
																		&& Receiveddate.before(taskfilterenddate)) {
																	info.addMapiMessageItem(message);
																	count_destination++;
																} else if (Receiveddate.equals(taskfilterstartdate)
																		|| Receiveddate.equals(taskfilterenddate)) {
																	info.addMapiMessageItem(message);
																	count_destination++;

																}

															} else {
																info.addMapiMessageItem(message);
																count_destination++;

															}

														}
													} else {

														if (task_box.isSelected()) {
															if (Receiveddate.after(taskfilterstartdate)
																	&& Receiveddate.before(taskfilterenddate)) {
																info.addMapiMessageItem(message);
																count_destination++;
															} else if (Receiveddate.equals(taskfilterstartdate)
																	|| Receiveddate.equals(taskfilterenddate)) {
																info.addMapiMessageItem(message);
																count_destination++;

															}

														} else {
															info.addMapiMessageItem(message);
															count_destination++;

														}

													}

												} catch (OutOfMemoryError ep) {
													mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
															+ mf.namingconventionmapi(message));
												} catch (Exception e) {
													mf.logger.warning("Exception : " + e.getMessage() + "Task" + " " + i
															+ mf.namingconventionmapi(message)
															+ System.lineSeparator());
													e.printStackTrace();
													continue;
												}

											}

											lbl_progressreport.setText(
													"  Total Message Saved Count  " + count_destination + "  " + Folder
															+ "   Extarcting messsage " + message.getSubject());

										} catch (Exception e) {
											continue;
										}

									}
								}
							} else if (folderf.getContainerClass().contains("IPF.Contact")) {

								System.out.println(Folder + "Folder Name");
								if (folderf.getContentCount() > 0) {
									if (ost.getPredefinedFolder(StandardIpmFolder.Contacts) == null) {
										info = ost.createPredefinedFolder(f.getDisplayName(),
												StandardIpmFolder.Contacts, true).addSubFolder(Folder, true);
									} else {
										info = ost.createPredefinedFolder(f.getDisplayName(),
												StandardIpmFolder.Contacts, true).addSubFolder(Folder, true);
									}

									MessageInfoCollection messageInfoCollection = folderf.getContents();

									int messagesize;
									if (demo) {
										if (messageInfoCollection.size() <= All_Data.demo_count) {
											messagesize = messageInfoCollection.size();
										} else {
											messagesize = All_Data.demo_count;
										}

									} else {
										messagesize = messageInfoCollection.size();
									}

									for (int i = 0; i < messagesize; i++) {
										try {

//											if (stop) {
//												break;
//											}
											if (stop) {
												break;
											}
											if ((i % 100) == 0) {
												System.gc();

											}

											MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

											MapiMessage message1 = pst.extractMessage(messageInfo);
											MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
											MailConversionOptions de = new MailConversionOptions();
											de.setConvertAsTnef(true);
											MailMessage mess = message1.toMailMessage(de);
											if (chckbxMigrateOrBackup.isSelected()) {
												mess.getAttachments().clear();
											}
											MapiMessage message = MapiMessage.fromMailMessage(mess, d);

											if (message.getMessageClass().equals("IPM.Contact")) {
												try {

													MapiContact con = (MapiContact) message.toMapiMessageItem();
													if (chckbxRemoveDuplicacy.isSelected()) {

														String input = duplicacymapiContact(con);
														input = input.replaceAll("\\s", "");
														input = input.trim();

														if (!listdupliccontact.contains(input)) {
															// System.out.println("Not a duplicate message");
															listdupliccontact.add(input);

															info.addMapiMessageItem(con);
															count_destination++;

														}
													} else {

														info.addMapiMessageItem(con);
														count_destination++;

													}

													count_destination++;

												} catch (Error e) {
													mf.logger.warning(
															"ERROR : " + e.getMessage() + System.lineSeparator());
												} catch (Exception e) {
													mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
															+ i + mf.namingconventionmapi(message)
															+ System.lineSeparator());
													e.printStackTrace();
													continue;
												}

											}

											lbl_progressreport.setText(
													"  Total Message Saved Count  " + count_destination + "  " + Folder
															+ "   Extarcting messsage " + message.getSubject());

										} catch (Exception e) {
											continue;
										}

									}
								}
							} else {
								MessageInfoCollection messageInfoCollection = folderf.getContents();
								if (ost.getRootFolder().getSubFolder(path, true) != null) {

									info1 = ost.getRootFolder().getSubFolder(path, true);
								} else {

									info1 = ost.getRootFolder().addSubFolder(path, true);
								}
								messageaddpst(messageInfoCollection, info1, Folder);
							}
							listdupliccal.clear();
							listduplicacy.clear();
							listdupliccontact.clear();
							listduplictask.clear();

						}
					}
				} catch (Exception e) {

					e.printStackTrace();
				}
				if (folderf.hasSubFolders()) {
					getsubfolderforPSTOST_PSTOST(folderf, path2, path);
				}
				path = removefolder(path);
			} catch (Exception e) {
				continue;
			}

		}

	}

	public void ConvertPSTOST_mbox() throws Exception {
		//System.out.println("count destination in convertPSTOST_mbox :" + count_destination);

		pst = PersonalStorage.fromFile(filepath);

		MailConversionOptions options = new MailConversionOptions();
		FolderInfo folderInfo2 = pst.getRootFolder();
		Folder = folderInfo2.getDisplayName();
		Folder = Folder.replace(",", "").replace(".", "");
		Folder = getRidOfIllegalFileNameCharacters(Folder);
		Folder = Folder.replaceAll("[\\[\\]]", "");
		Folder = Folder.trim();
		if (Folder.equalsIgnoreCase("")) {
			Folder = "Root Folder";
		}
		String path1 = "";
		String sop = "";
		path = path + File.separator + Folder;
		path1 = Folder;
		listduplicacy.clear();
		MessageInfoCollection messageInfoCollection1 = folderInfo2.getContents();
		if (filetype.equalsIgnoreCase("Thunderbird")) {
			sop = path;
			path = path + ".sbd";
		}

		new File(destination_path + File.separator + path).mkdirs();

		MboxrdStorageWriter wr1 = null;

		if (filetype.equalsIgnoreCase("Opera Mail")) {
			wr1 = new MboxrdStorageWriter(destination_path + File.separator + sop + File.separator
					+ getRidOfIllegalFileNameCharacters(Folder) + ".mbs", false);
		} else if (filetype.equalsIgnoreCase("Thunderbird")) {
			wr1 = new MboxrdStorageWriter(destination_path + File.separator + sop, false);
		} else {
			wr1 = new MboxrdStorageWriter(destination_path + File.separator + sop + File.separator
					+ getRidOfIllegalFileNameCharacters(Folder) + ".mbx", false);
		}
		int countr = 0;
		listduplicacy.clear();
		int messagesize1;
		if (demo) {
			if (messageInfoCollection1.size() <= All_Data.demo_count) {
				messagesize1 = messageInfoCollection1.size();
			} else {
				messagesize1 = All_Data.demo_count;
			}

		} else {
			messagesize1 = messageInfoCollection1.size();
		}
		for (int i = 0; i < messagesize1; i++) {
			try {

//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				if ((i % 100) == 0) {
					System.gc();

				}

				MessageInfo messageInfo = (MessageInfo) messageInfoCollection1.get_Item(i);

				MapiMessage message1 = pst.extractMessage(messageInfo);
				MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
				MailConversionOptions de = new MailConversionOptions();
				MailMessage mess1 = message1.toMailMessage(de);
				MapiMessage message = MapiMessage.fromMailMessage(mess1, d);

				Date Receiveddate = message.getDeliveryTime();
				if (message.getMessageClass().equals("IPM.Contact")) {
					MailMessage mapi = new MailMessage();
					try {
						MapiContact con = (MapiContact) message.toMapiMessageItem();
						try {
							mapi.setSubject(con.getSubject());
						} catch (Exception e) {

							mapi.setSubject("");
						}
						try {
							mapi.setBody(con.getBody());
						} catch (Exception e) {

							mapi.setBody("");
						}
						con.save(temppathm + File.separator + i + mf.namingconventionmapi(message) + ".vcf",
								ContactSaveFormat.VCard);
						File file = new File(
								temppathm + File.separator + i + mf.namingconventionmapi(message) + ".vcf");
						mapi.addAttachment(new Attachment(
								temppathm + File.separator + i + mf.namingconventionmapi(message) + ".vcf"));
						file.delete();

						wr1.writeMessage(mapi);

						countr++;
					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						mf.logger.warning(
								"Exception : " + e.getMessage() + "Contact" + " " + countr + System.lineSeparator());
						return;
					}

				} else if (message.getMessageClass().equals("IPM.Appointment")) {
					MailMessage mapi = new MailMessage();
					try {

						MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();
						try {
							mapi.setSubject(cal.getSubject());
						} catch (Exception e) {

							mapi.setSubject("");
						}
						try {
							mapi.setBody(cal.getBody());
						} catch (Exception e) {

							mapi.setBody("");
						}
						cal.save(temppathm + File.separator + i + mf.namingconventionmapi(message) + ".ics",
								AppointmentSaveFormat.Ics);
						File file = new File(
								temppathm + File.separator + i + mf.namingconventionmapi(message) + ".ics");

						mapi.addAttachment(new Attachment(
								temppathm + File.separator + i + mf.namingconventionmapi(message) + ".ics"));
						file.delete();
						if (chckbx_calender_box.isSelected()) {
							if (Receiveddate.after(Calenderfilterstartdate)
									&& Receiveddate.before(Calenderfilterenddate)) {
								lbl_progressreport.setText("Extracting message " + message.getSubject());
								wr1.writeMessage(mapi);

							}

						} else {
							lbl_progressreport.setText("Extracting message " + message.getSubject());
							wr1.writeMessage(mapi);

						}

						countr++;
					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						mf.logger.warning(
								"Exception : " + e.getMessage() + "Calendar" + " " + countr + System.lineSeparator());
						e.printStackTrace();
						return;
					}

				} else if (message.getMessageClass().equals("IPM.StickyNote")
						|| message.getMessageClass().equals("IPM.Task")) {
					try {

						MailMessage mess = message.toMailMessage(options);
						if (message.getMessageClass().equals("IPM.Task")) {
							MapiTask task = (MapiTask) message.toMapiMessageItem();
							Receiveddate = task.getStartDate();
						}

						if (task_box.isSelected()) {
							if (Receiveddate.after(taskfilterstartdate) && Receiveddate.before(taskfilterenddate)) {
								wr1.writeMessage(mess);
								count_destination++;
								// //count++;
							} else if (Receiveddate.equals(taskfilterstartdate)
									|| Receiveddate.equals(taskfilterenddate)) {

								wr1.writeMessage(mess);
								count_destination++;
								// //count++;
							}

						} else {
							wr1.writeMessage(mess);
							count_destination++;
							// //count++;
						}

					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						mf.logger.warning(
								"Exception : " + e.getMessage() + "Task" + " " + countr + System.lineSeparator());
						e.printStackTrace();
						continue;
					}

				} else {
					try {
						MailMessage mess = message.toMailMessage(options);
						mailmbox(mess, Receiveddate, wr1);

					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						mf.logger.warning("Exception : " + e.getMessage() + "Message" + " " + i
								+ mf.namingconventionmapi(message) + System.lineSeparator());
						continue;
					}

				}

				lbl_progressreport.setText("  Total Message Saved Count  " + count_destination + "  " + Folder
						+ "   Extarcting messsage " + message.getSubject());

			} catch (Exception e) {
				continue;
			}

		}
		wr1.dispose();

		FolderInfoCollection folderInf = pst.getRootFolder().getSubFolders();

		for (int j = 0; j < folderInf.size(); j++) {
			try {
//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				FolderInfo folderInfo = folderInf.get_Item(j);
				String Folder = folderInfo.getDisplayName();
				Folder = Folder.replace(",", "").replace(".", "");
				Folder = getRidOfIllegalFileNameCharacters(Folder);
				Folder = Folder.replaceAll("[\\[\\]]", "");
				Folder = Folder.trim();

				lbl_progressreport.setText(" Getting Folder " + Folder);
				String sop1 = "";

				if (filetype.equalsIgnoreCase("Thunderbird")) {
					sop1 = path + File.separator + Folder;
					path = path + File.separator + Folder + ".sbd";

				} else {
					path = path + File.separator + Folder;
				}

				String path3 = path1 + File.separator + Folder;
				listduplicacy.clear();
				try {
					for (int l = 0; l < pstfolderlist.size(); l++) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						if (pstfolderlist.get(l).equalsIgnoreCase(path3)) {

							new File(destination_path + File.separator + path).mkdirs();
							MboxrdStorageWriter wr = null;

							if (filetype.equalsIgnoreCase("Opera Mail")) {
								wr = new MboxrdStorageWriter(destination_path + File.separator + path + File.separator
										+ getRidOfIllegalFileNameCharacters(folderInfo.getDisplayName()) + ".mbs",
										false);
							} else if (filetype.equalsIgnoreCase("Thunderbird")) {
								wr = new MboxrdStorageWriter(destination_path + File.separator + sop1, false);
							} else {
								wr = new MboxrdStorageWriter(destination_path + File.separator + path + File.separator
										+ getRidOfIllegalFileNameCharacters(folderInfo.getDisplayName()) + ".mbx",
										false);
							}

							MessageInfoCollection messageInfoCollection = folderInfo.getContents();

							int messagesize;
							if (demo) {
								if (messageInfoCollection.size() <= All_Data.demo_count) {
									messagesize = messageInfoCollection.size();
								} else {
									messagesize = All_Data.demo_count;
								}

							} else {
								messagesize = messageInfoCollection.size();
							}

							for (int i = 0; i < messagesize; i++) {
								try {

//									if (stop) {
//										break;
//									}
									if (stop) {
										break;
									}
									if ((i % 100) == 0) {
										System.gc();

									}

									MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

									MapiMessage message1 = pst.extractMessage(messageInfo);
									MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
									MailConversionOptions de = new MailConversionOptions();
									MailMessage mess = message1.toMailMessage(de);
									if (chckbxMigrateOrBackup.isSelected()) {
										mess.getAttachments().clear();
									}
									MapiMessage message = MapiMessage.fromMailMessage(mess, d);

									Date Receiveddate = message.getDeliveryTime();
									if (message.getMessageClass().equals("IPM.Contact")) {
										MailMessage mapi = new MailMessage();
										try {
											MapiContact con = (MapiContact) message.toMapiMessageItem();
											try {
												mapi.setSubject(con.getSubject());
											} catch (Exception e) {

												mapi.setSubject("");
											}
											try {
												mapi.setBody(con.getBody());
											} catch (Exception e) {

												mapi.setBody("");
											}
											con.save(temppathm + File.separator + i + mf.namingconventionmapi(message)
													+ ".vcf", ContactSaveFormat.VCard);
											File file = new File(temppathm + File.separator + i
													+ mf.namingconventionmapi(message) + ".vcf");
											mapi.addAttachment(new Attachment(temppathm + File.separator + i
													+ mf.namingconventionmapi(message) + ".vcf"));
											file.delete();
											if (chckbx_calender_box.isSelected()) {
												if (Receiveddate.after(Calenderfilterstartdate)
														&& Receiveddate.before(Calenderfilterenddate))
													lbl_progressreport
															.setText("Extracting message " + message.getSubject());
												wr.writeMessage(mapi);
												count_destination++;

											} else {
												lbl_progressreport
														.setText("Extracting message " + message.getSubject());
												wr.writeMessage(mapi);

												count_destination++;
											}

											countr++;
										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " " + countr
													+ System.lineSeparator());
											return;
										}

									} else if (message.getMessageClass().equals("IPM.Appointment")) {
										MailMessage mapi = new MailMessage();
										try {

											MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

											try {
												mapi.setSubject(cal.getSubject());
											} catch (Exception e) {

												mapi.setSubject("");
											}
											try {
												mapi.setBody(cal.getBody());
											} catch (Exception e) {

												mapi.setBody("");
											}
											cal.save(temppathm + File.separator + i + mf.namingconventionmapi(message)
													+ ".ics", AppointmentSaveFormat.Ics);
											File file = new File(temppathm + File.separator + i
													+ mf.namingconventionmapi(message) + ".ics");

											mapi.addAttachment(new Attachment(temppathm + File.separator + i
													+ mf.namingconventionmapi(message) + ".ics"));
											file.delete();
											if (chckbx_calender_box.isSelected()) {
												if (Receiveddate.after(Calenderfilterstartdate)
														&& Receiveddate.before(Calenderfilterenddate)) {
													lbl_progressreport
															.setText("Extracting message " + message.getSubject());
													wr.writeMessage(mapi);

												}

											} else {
												lbl_progressreport
														.setText("Extracting message " + message.getSubject());
												wr.writeMessage(mapi);

											}

											countr++;
										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
													+ countr + System.lineSeparator());
											e.printStackTrace();
											return;
										}

									} else if (message.getMessageClass().equals("IPM.StickyNote")
											|| message.getMessageClass().equals("IPM.Task")) {
										try {

											MailMessage mess1 = message.toMailMessage(options);
											if (message.getMessageClass().equals("IPM.Task")) {
												MapiTask task = (MapiTask) message.toMapiMessageItem();
												Receiveddate = task.getStartDate();
											}

											if (task_box.isSelected()) {
												if (Receiveddate.after(taskfilterstartdate)
														&& Receiveddate.before(taskfilterenddate)) {
													wr.writeMessage(mess1);
													count_destination++;

												} else if (Receiveddate.equals(taskfilterstartdate)
														|| Receiveddate.equals(taskfilterenddate)) {

													wr.writeMessage(mess1);
													count_destination++;

												}

											} else {
												wr.writeMessage(mess);
												count_destination++;

											}

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Task" + " " + countr
													+ System.lineSeparator());
											e.printStackTrace();
											continue;
										}

									} else {
										try {
											MailMessage mess1 = message.toMailMessage(options);
											mailmbox(mess1, Receiveddate, wr);

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Message" + " " + i
													+ mf.namingconventionmapi(message) + System.lineSeparator());
											continue;
										}

									}

									lbl_progressreport.setText("  Total Message Saved Count  " + count_destination
											+ "  " + Folder + "   Extarcting messsage " + message.getSubject());

								} catch (Exception e) {
									continue;
								}

							}
							wr.dispose();
						}
					}
				} catch (Exception e) {

					e.printStackTrace();
				}
				if (folderInfo.hasSubFolders()) {
					getsubfolderforPSTOST_Mbox(folderInfo, path3, sop1);
				}
				if (filetype.equalsIgnoreCase("Thunderbird")) {

					path = removefolder(path);
					sop1 = removefolder(sop1);

				} else {
					path = removefolder(path);
				}

			} catch (Exception e) {
				continue;
			}

		}

		// System.out.println("Process complete");

	}

	public void getsubfolderforPSTOST_Mbox(FolderInfo f, String path3, String sop1) {

		//System.out.println("count destination in getsubfolder pstost_mbox  :" + count_destination);
		FolderInfoCollection subfolder = f.getSubFolders();
		MailConversionOptions options = new MailConversionOptions();
		for (int k = 0; k < subfolder.size(); k++) {
			try {
				FolderInfo folderf = subfolder.get_Item(k);
//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}

				String Folder = folderf.getDisplayName();
				Folder = Folder.replace(",", "").replace(".", "");
				Folder = getRidOfIllegalFileNameCharacters(Folder);
				Folder = Folder.replaceAll("[\\[\\]]", "");
				Folder = Folder.trim();
				lbl_progressreport.setText("Getting : " + Folder);
				// int count = 1;

				String sop2 = "";
				if (filetype.equalsIgnoreCase("Thunderbird")) {
					sop2 = sop1 + ".sbd" + File.separator + Folder;
					path3 = path3 + File.separator + Folder;
					path = path + File.separator + Folder + ".sbd";

				} else {
					path = path + File.separator + Folder;
					path3 = path3 + File.separator + Folder;
				}

				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (pstfolderlist.get(l).equalsIgnoreCase(path3)) {
						new File(destination_path + File.separator + path).mkdirs();
						MboxrdStorageWriter wr = null;

						if (filetype.equalsIgnoreCase("Opera Mail")) {
							wr = new MboxrdStorageWriter(
									destination_path + File.separator + path + File.separator
											+ getRidOfIllegalFileNameCharacters(folderf.getDisplayName()) + ".mbs",
									false);
						} else if (filetype.equalsIgnoreCase("Thunderbird")) {
							wr = new MboxrdStorageWriter(destination_path + File.separator + sop2, false);
						} else {
							wr = new MboxrdStorageWriter(
									destination_path + File.separator + path + File.separator
											+ getRidOfIllegalFileNameCharacters(folderf.getDisplayName()) + ".mbx",
									false);
						}

						// System.out.println("path for folder : " + path);
						MessageInfoCollection messageInfoCollection = null;
						try {
							messageInfoCollection = folderf.getContents();
						} catch (Exception e1) {

							e1.printStackTrace();
						}

						if (!(messageInfoCollection == null)) {

							listduplicacy.clear();
							int messagesize;
							if (demo) {
								if (messageInfoCollection.size() <= All_Data.demo_count) {
									messagesize = messageInfoCollection.size();
								} else {
									messagesize = All_Data.demo_count;
								}

							} else {
								messagesize = messageInfoCollection.size();
							}

							for (int i = 0; i < messagesize; i++) {
								try {
									MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

//									if (stop) {
//										break;
//									}
									if (stop) {
										break;
									}
									if ((i % 100) == 0) {
										System.gc();
									}
									MapiMessage message1 = pst.extractMessage(messageInfo);
									MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
									MailConversionOptions de = new MailConversionOptions();
									MailMessage mess1 = message1.toMailMessage(de);
									if (chckbxMigrateOrBackup.isSelected()) {
										mess1.getAttachments().clear();
									}
									MapiMessage message = MapiMessage.fromMailMessage(mess1, d);

									Date Receiveddate = message.getDeliveryTime();

									if (message.getMessageClass().equals("IPM.Contact")) {
										MailMessage mapi = new MailMessage();
										try {
											MapiContact con = (MapiContact) message.toMapiMessageItem();
											try {
												mapi.setSubject(con.getSubject());
											} catch (Exception e) {

												mapi.setSubject("");
											}
											try {
												mapi.setBody(con.getBody());
											} catch (Exception e) {

												mapi.setBody("");
											}
											con.save(temppathm + File.separator + i + mf.namingconventionmapi(message)
													+ ".vcf", ContactSaveFormat.VCard);
											File file = new File(temppathm + File.separator + i
													+ mf.namingconventionmapi(message) + ".vcf");
											mapi.addAttachment(new Attachment(temppathm + File.separator + i
													+ mf.namingconventionmapi(message) + ".vcf"));
											file.delete();
											if (chckbx_calender_box.isSelected()) {
												if (Receiveddate.after(Calenderfilterstartdate)
														&& Receiveddate.before(Calenderfilterenddate))
													lbl_progressreport
															.setText("Extracting message " + message.getSubject());
												wr.writeMessage(mapi);
												progressBar_message_p3.setValue(100);

											} else {
												lbl_progressreport
														.setText("Extracting message " + message.getSubject());
												wr.writeMessage(mapi);
												progressBar_message_p3.setValue(100);

											}

										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
													+ System.lineSeparator());
											return;
										}

									} else if (message.getMessageClass().equals("IPM.Appointment")) {
										MailMessage mapi = new MailMessage();
										try {

											MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

											try {
												mapi.setSubject(cal.getSubject());
											} catch (Exception e) {

												mapi.setSubject("");
											}
											try {
												mapi.setBody(cal.getBody());
											} catch (Exception e) {

												mapi.setBody("");
											}
											cal.save(temppathm + File.separator + i + mf.namingconventionmapi(message)
													+ ".ics", AppointmentSaveFormat.Ics);
											File file = new File(temppathm + File.separator + i
													+ mf.namingconventionmapi(message) + ".ics");

											mapi.addAttachment(new Attachment(temppathm + File.separator + i
													+ mf.namingconventionmapi(message) + ".ics"));
											file.delete();
											if (chckbx_calender_box.isSelected()) {
												if (Receiveddate.after(Calenderfilterstartdate)
														&& Receiveddate.before(Calenderfilterenddate)) {
													lbl_progressreport
															.setText("Extracting message " + message.getSubject());
													wr.writeMessage(mapi);
													progressBar_message_p3.setValue(100);
												}

											} else {
												lbl_progressreport
														.setText("Extracting message " + message.getSubject());
												wr.writeMessage(mapi);
												progressBar_message_p3.setValue(100);
											}

										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
													+ System.lineSeparator());
											return;
										}

									} else if (message.getMessageClass().equals("IPM.StickyNote")
											|| message.getMessageClass().equals("IPM.Task")) {
										try {
											MailMessage msg = message.toMailMessage(options);
											MapiTask task = (MapiTask) message.toMapiMessageItem();

											Receiveddate = task.getStartDate();
											if (task_box.isSelected()) {
												if (Receiveddate.after(taskfilterstartdate)
														&& Receiveddate.before(taskfilterenddate))
													lbl_progressreport
															.setText("Extracting message " + message.getSubject());
												wr.writeMessage(msg);
												progressBar_message_p3.setValue(100);
											} else {
												lbl_progressreport
														.setText("Extracting message " + message.getSubject());
												wr.writeMessage(msg);
												progressBar_message_p3.setValue(100);
											}

										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Task" + " "
													+ System.lineSeparator());
											return;
										}

									} else {
										try {
											MailMessage mess = message.toMailMessage(options);
											mailmbox(mess, Receiveddate, wr);
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Message" + " "
													+ System.lineSeparator());
											continue;
										}

									}

									lbl_progressreport.setText("  Total Message Saved Count  " + count_destination
											+ "  " + Folder + "   Extarcting messsage " + message.getSubject());
									// int messageprogress = (count * 100) / messagesize;
									// iprogressBar_message_p3.setValue(messageprogress);
									// count++;

									// count_destination++;

									// System.out.println("count destination in second count is :
									// "+count_destination);
								} catch (Exception e) {
									continue;
								}

							}
							wr.dispose();
						}
					}
				}
				if (folderf.hasSubFolders()) {
					getsubfolderforPSTOST_Mbox(folderf, path3, sop2);
				}

				if (filetype.equalsIgnoreCase("Thunderbird")) {

					path = removefolder(path);
					sop2 = removefolder(sop2);
					path3 = removefolder(path3);
				} else {
					path = removefolder(path);
					path3 = removefolder(path3);

				}

				// System.out.println(path);
			} catch (Exception e) {
				continue;
			}
		}
	}

	public void ConvertPSTOST_file() throws Exception {

		pst = PersonalStorage.fromFile(filepath);
		String path1 = "";
		FolderInfo folderInfo2 = pst.getRootFolder();
		Folder = folderInfo2.getDisplayName();
		Folder = Folder.replace(",", "").replace(".", "");
		Folder = getRidOfIllegalFileNameCharacters(Folder);
		Folder = Folder.replaceAll("[\\[\\]]", "");
		Folder = Folder.trim();
		if (Folder.equalsIgnoreCase("")) {
			Folder = "Root Folder";
		}
		String clonepath = path;
		path = path + File.separator + Folder;

		path1 = Folder;
		if (chckbxMaintainFolderStructure.isSelected()) {
			new File(destination_path + File.separator + path).mkdirs();
			clonepath = path;
		}
		MessageInfoCollection messageInfoCollection1 = folderInfo2.getContents();

		int messagesize1;
		listduplicacy.clear();
		if (demo) {
			if (messageInfoCollection1.size() <= All_Data.demo_count) {
				messagesize1 = messageInfoCollection1.size();
			} else {
				messagesize1 = All_Data.demo_count;
			}

		} else {
			messagesize1 = messageInfoCollection1.size();
		}
		// System.out.println("message size : " + messagesize1);
		for (int i = 0; i < messagesize1; i++) {
			try {

//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				if ((i % 100) == 0) {
					System.gc();

				}
				int countr = 0;
				MessageInfo messageInfo = (MessageInfo) messageInfoCollection1.get_Item(i);

				MapiMessage message1 = pst.extractMessage(messageInfo);
				MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
				MailConversionOptions de = new MailConversionOptions();
				MailMessage mess1 = message1.toMailMessage(de);
				if (chckbxMigrateOrBackup.isSelected()) {
					mess1.getAttachments().clear();
				}
				MapiMessage message = MapiMessage.fromMailMessage(mess1, d);
				Date Receiveddate = message.getDeliveryTime();
				if (message.getMessageClass().equals("IPM.Contact")) {
					try {
						MapiContact con = (MapiContact) message.toMapiMessageItem();

						con.save(destination_path + File.separator + clonepath + File.separator + contactname(con) + "_"
								+ i + ".vcf", ContactSaveFormat.VCard);
						count_destination++;
						// //count++;

						countr++;
					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						mf.logger.warning(
								"Exception : " + e.getMessage() + "Contact" + " " + countr + System.lineSeparator());
						e.printStackTrace();
						continue;
					}

				} else if (message.getMessageClass().equals("IPM.Appointment")) {

					try {

						MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();
						Receiveddate = cal.getStartDate();
						if (chckbx_calender_box.isSelected()) {
							if (Receiveddate.after(Calenderfilterstartdate)
									&& Receiveddate.before(Calenderfilterenddate)) {

								cal.save(destination_path + File.separator + clonepath + File.separator + i
										+ mf.namingconventionmapi(message) + ".ics", AppointmentSaveFormat.Ics);
								count_destination++;
								// //count++;
							} else if (Receiveddate.equals(Calenderfilterstartdate)
									|| Receiveddate.equals(Calenderfilterenddate)) {

								cal.save(destination_path + File.separator + clonepath + File.separator + i
										+ mf.namingconventionmapi(message) + ".ics", AppointmentSaveFormat.Ics);
								count_destination++;
								// count++;
							}

						} else {

							cal.save(destination_path + File.separator + clonepath + File.separator + i
									+ mf.namingconventionmapi(message) + ".ics", AppointmentSaveFormat.Ics);
							count_destination++;
							// count++;
						}

						countr++;
					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " " + i
								+ mf.namingconventionmapi(message) + System.lineSeparator());
						e.printStackTrace();
						continue;
					}

				} else if (message.getMessageClass().equals("IPM.StickyNote")
						|| message.getMessageClass().equals("IPM.Task")) {
					try {

						if (message.getMessageClass().equals("IPM.Task")) {
							MapiTask task = (MapiTask) message.toMapiMessageItem();
							Receiveddate = task.getStartDate();
						}
						mapifile mf1 = new mapifile(mf, filetype, destination_path, clonepath, count_destination,
								message, Receiveddate, task_box.isSelected(), taskfilterstartdate, taskfilterenddate,
								filepath);
						Thread saveTh = new Thread(mf1);
						saveTh.start();
						saveTh.join();
						count_destination = mf1.k;

					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						mf.logger.warning(
								"Exception : " + e.getMessage() + "Task" + " " + countr + System.lineSeparator());
						e.printStackTrace();
						continue;
					}

				} else {
					try {

						mapifile mf1 = new mapifile(mf, filetype, destination_path, clonepath, count_destination,
								message, Receiveddate, chckbx_Mail_Filter.isSelected(), mailfilterstartdate,
								mailfilterenddate, filepath);
						Thread saveTh = new Thread(mf1);
						saveTh.start();
						saveTh.join();
						count_destination = mf1.k;
					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						mf.logger.warning("Exception : " + e.getMessage() + "Message" + " " + i
								+ mf.namingconventionmapi(message) + System.lineSeparator());
						e.printStackTrace();
						continue;
					}

				}

				lbl_progressreport.setText("Total Message Saved : " + count_destination + "    " + Folder
						+ " Extarcting messsage " + message.getSubject());

			} catch (Exception e) {
				e.printStackTrace();
				continue;
			}
		}

		FolderInfoCollection folderInf = pst.getRootFolder().getSubFolders();

		for (int j = 0; j < folderInf.size(); j++) {
			try {
				// //int count = 1;
//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				FolderInfo folderInfo = folderInf.get_Item(j);
				String Folder = folderInfo.getDisplayName();

				Folder = Folder.replace(",", "").replace(".", "");
				Folder = getRidOfIllegalFileNameCharacters(Folder);
				Folder = Folder.replaceAll("[\\[\\]]", "");
				Folder = Folder.trim();
				// progressBar_message_p3.setStringPainted(true);
				// progressBar_message_p3.setValue(0);
				path = path + File.separator + Folder;
				String path3 = path1 + File.separator + Folder;

				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}

					if (stop) {
						break;
					}
					if (pstfolderlist.get(l).trim().equalsIgnoreCase(path3)) {
						lbl_progressreport.setText(" Getting Folder " + Folder);
						int countr = 1;

						if (chckbxMaintainFolderStructure.isSelected()) {
							new File(destination_path + File.separator + path).mkdirs();
							clonepath = path;
						}

						MessageInfoCollection messageInfoCollection = folderInfo.getContents();
						listduplicacy.clear();
						int messagesize;
						if (demo) {
							if (messageInfoCollection.size() <= All_Data.demo_count) {
								messagesize = messageInfoCollection.size();
							} else {
								messagesize = All_Data.demo_count;
							}

						} else {
							messagesize = messageInfoCollection.size();
						}

						for (int i = 0; i < messagesize; i++) {
							try {

//								if (stop) {
//									break;
//								}
								if (stop) {
									break;
								}
								if ((i % 100) == 0) {
									System.gc();

								}

								MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

								MapiMessage message1 = pst.extractMessage(messageInfo);
								MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
								MailConversionOptions de = new MailConversionOptions();
								MailMessage mess = message1.toMailMessage(de);
								if (chckbxMigrateOrBackup.isSelected()) {
									mess.getAttachments().clear();
								}
								MapiMessage message = MapiMessage.fromMailMessage(mess, d);

								Date Receiveddate = message.getDeliveryTime();
								if (message.getMessageClass().equals("IPM.Contact")) {
									try {
										MapiContact con = (MapiContact) message.toMapiMessageItem();

										con.save(destination_path + File.separator + clonepath + File.separator
												+ contactname(con) + "_" + i + ".vcf", ContactSaveFormat.VCard);
										count_destination++;
										// //count++;

										countr++;
									} catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {
										mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " " + countr
												+ System.lineSeparator());
										e.printStackTrace();
										continue;
									}

								} else if (message.getMessageClass().equals("IPM.Appointment")) {

									try {

										MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();
										Receiveddate = cal.getStartDate();
										if (chckbx_calender_box.isSelected()) {
											if (Receiveddate.after(Calenderfilterstartdate)
													&& Receiveddate.before(Calenderfilterenddate)) {

												cal.save(
														destination_path + File.separator + path + File.separator + i
																+ mf.namingconventionmapi(message) + ".ics",
														AppointmentSaveFormat.Ics);
												count_destination++;
												// //count++;
											} else if (Receiveddate.equals(Calenderfilterstartdate)
													|| Receiveddate.equals(Calenderfilterenddate)) {

												cal.save(
														destination_path + File.separator + clonepath + File.separator
																+ i + mf.namingconventionmapi(message) + ".ics",
														AppointmentSaveFormat.Ics);
												count_destination++;
												// count++;
											}

										} else {

											cal.save(
													destination_path + File.separator + clonepath + File.separator + i
															+ mf.namingconventionmapi(message) + ".ics",
													AppointmentSaveFormat.Ics);
											count_destination++;
											// count++;
										}

										countr++;
									} catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {
										mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " " + i
												+ mf.namingconventionmapi(message) + System.lineSeparator());
										e.printStackTrace();
										continue;
									}

								} else if (message.getMessageClass().equals("IPM.StickyNote")
										|| message.getMessageClass().equals("IPM.Task")) {
									try {

										if (message.getMessageClass().equals("IPM.Task")) {
											MapiTask task = (MapiTask) message.toMapiMessageItem();
											Receiveddate = task.getStartDate();
										}

										mapifile mf1 = new mapifile(mf, filetype, destination_path, clonepath,
												count_destination, message, Receiveddate, task_box.isSelected(),
												taskfilterstartdate, taskfilterenddate, filepath);
										Thread saveTh = new Thread(mf1);
										saveTh.start();
										saveTh.join();
										count_destination = mf1.k;
									} catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {
										mf.logger.warning("Exception : " + e.getMessage() + "Task" + " " + countr
												+ System.lineSeparator());
										e.printStackTrace();
										continue;
									}

								} else {
									try {

										mapifile mf1 = new mapifile(mf, filetype, destination_path, clonepath,
												count_destination, message, Receiveddate,
												chckbx_Mail_Filter.isSelected(), mailfilterstartdate, mailfilterenddate,
												filepath);
										Thread saveTh = new Thread(mf1);
										saveTh.start();
										saveTh.join();
										count_destination = mf1.k;
									} catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {
										mf.logger.warning("Exception : " + e.getMessage() + "Message" + " " + i
												+ mf.namingconventionmapi(message) + System.lineSeparator());
										e.printStackTrace();
										continue;
									}

								}

								lbl_progressreport.setText("Total Message Saved : " + count_destination + "    "
										+ Folder + " Extarcting messsage " + message.getSubject());
								/*
								 * //int messageprogress = (count * 100) / messagesize;
								 * //iprogressBar_message_p3.setValue(messageprogress);
								 */
							} catch (Exception e) {
								continue;
							}
						}
					}
				}
				if (folderInfo.hasSubFolders()) {
					getsubfolderforPSTOSTfile(folderInfo, path3, clonepath);
				}

				path = removefolder(path);
			} catch (Exception e) {
				continue;
			}

		}
	}

	public void getsubfolderforPSTOSTfile(FolderInfo f, String path3, String clonepath) {
		FolderInfoCollection subfolder = f.getSubFolders();
		for (int k = 0; k < subfolder.size(); k++) {
			try {
//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				FolderInfo folderf = subfolder.get_Item(k);

				String Folder = folderf.getDisplayName();
				Folder = Folder.replace(",", "").replace(".", "");
				Folder = getRidOfIllegalFileNameCharacters(Folder);
				Folder = Folder.replaceAll("[\\[\\]]", "");
				Folder = Folder.trim();

				path = path + File.separator + Folder;
				path3 = path3 + File.separator + Folder;

				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}

					if (pstfolderlist.get(l).equalsIgnoreCase(path3)) {
						lbl_progressreport.setText("Getting : " + Folder);
						if (chckbxMaintainFolderStructure.isSelected()) {
							new File(destination_path + File.separator + path).mkdirs();
							clonepath = path;
						}
						MessageInfoCollection messageInfoCollection = null;
						try {
							messageInfoCollection = folderf.getContents();
						} catch (Exception e1) {

							e1.printStackTrace();
						}

						if (!(messageInfoCollection == null)) {

							// int count = 1;
							listduplicacy.clear();
							int messagesize;
							if (demo) {
								if (messageInfoCollection.size() <= All_Data.demo_count) {
									messagesize = messageInfoCollection.size();
								} else {
									messagesize = All_Data.demo_count;
								}

							} else {
								messagesize = messageInfoCollection.size();
							}

							for (int i = 0; i < messagesize; i++) {
								try {

//									if (stop) {
//										break;
//									}
									if (stop) {
										break;
									}
									if ((i % 100) == 0) {
										System.gc();
									}

									MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

									MapiMessage message1 = pst.extractMessage(messageInfo);
									MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
									MailConversionOptions de = new MailConversionOptions();
									MailMessage mess = message1.toMailMessage(de);
									if (chckbxMigrateOrBackup.isSelected()) {
										mess.getAttachments().clear();
									}
									MapiMessage message = MapiMessage.fromMailMessage(mess, d);
									Date Receiveddate = message.getDeliveryTime();
									if (message.getMessageClass().equals("IPM.Contact")) {
										try {
											MapiContact con = (MapiContact) message.toMapiMessageItem();

											con.save(
													destination_path + File.separator + clonepath + File.separator
															+ contactname(con) + "_" + i + ".vcf",
													ContactSaveFormat.VCard);

										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
													+ System.lineSeparator());
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.Appointment")) {

										try {

											MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

											if (chckbx_calender_box.isSelected()) {
												if (Receiveddate.after(Calenderfilterstartdate)
														&& Receiveddate.before(Calenderfilterenddate))

													cal.save(
															destination_path + File.separator + clonepath
																	+ File.separator + i
																	+ mf.namingconventionmapi(message) + ".ics",
															AppointmentSaveFormat.Ics);

											} else {

												cal.save(
														destination_path + File.separator + clonepath + File.separator
																+ i + mf.namingconventionmapi(message) + ".ics",
														AppointmentSaveFormat.Ics);
											}

										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
													+ System.lineSeparator());
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.StickyNote")
											|| message.getMessageClass().equals("IPM.Task")) {
										try {

											MapiTask task = (MapiTask) message.toMapiMessageItem();

											Receiveddate = task.getStartDate();
											mapifile mf1 = new mapifile(mf, filetype, destination_path, clonepath,
													count_destination, message, Receiveddate, task_box.isSelected(),
													taskfilterstartdate, taskfilterenddate, filepath);
											Thread saveTh = new Thread(mf1);
											saveTh.start();
											saveTh.join();
											count_destination = mf1.k;
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Message" + " "
													+ System.lineSeparator());
											continue;
										}

									} else {
										try {

											mapifile mf1 = new mapifile(mf, filetype, destination_path, clonepath,
													count_destination, message, Receiveddate,
													chckbx_Mail_Filter.isSelected(), mailfilterstartdate,
													mailfilterenddate, filepath);
											Thread saveTh = new Thread(mf1);
											saveTh.start();
											saveTh.join();
											count_destination = mf1.k;
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Message" + " "
													+ System.lineSeparator());
											continue;
										}

									}

									lbl_progressreport.setText("  Total Message Saved Count  " + count_destination
											+ "  " + Folder + "   Extarcting messsage " + message.getSubject());
									// int messageprogress = (count * 100) / messagesize;
									// iprogressBar_message_p3.setValue(messageprogress);
									// count++;

									count_destination++;
								} catch (Exception e) {
									continue;
								}

							}
						}
					}
				}
				if (folderf.hasSubFolders()) {
					// System.out.println("Sub Folder Found :" + Folder + " Path :" + path);
					getsubfolderforPSTOSTfile(folderf, path3, clonepath);

				}

				path = removefolder(path);
				path3 = removefolder(path3);

			} catch (Exception e) {
				continue;
			}
		}

	}

	public void ConvertPSTOST_vcfics() throws Exception {

		pst = PersonalStorage.fromFile(filepath);
		String path1 = "";
		FolderInfo folderInfo2 = pst.getRootFolder();
		Folder = folderInfo2.getDisplayName();
		Folder = Folder.replace(",", "").replace(".", "");
		Folder = getRidOfIllegalFileNameCharacters(Folder);
		Folder = Folder.replaceAll("[\\[\\]]", "");
		Folder = Folder.trim();
		if (Folder.equalsIgnoreCase("")) {
			Folder = "Root Folder";
		}
		String clonepath = path;
		path = path + File.separator + Folder;

		path1 = Folder;

		MessageInfoCollection messageInfoCollection1 = folderInfo2.getContents();

		int messagesize1;
		listduplicacy.clear();
		if (demo) {
			if (messageInfoCollection1.size() <= All_Data.demo_count) {
				messagesize1 = messageInfoCollection1.size();
			} else {
				messagesize1 = All_Data.demo_count;
			}

		} else {
			messagesize1 = messageInfoCollection1.size();
		}
		// System.out.println("message size : " + messagesize1);
		for (int i = 0; i < messagesize1; i++) {
			try {

//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				if ((i % 100) == 0) {
					System.gc();

				}
				int countr = 0;
				MessageInfo messageInfo = (MessageInfo) messageInfoCollection1.get_Item(i);

				MapiMessage message1 = pst.extractMessage(messageInfo);
				MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
				MailConversionOptions de = new MailConversionOptions();
				MailMessage mess1 = message1.toMailMessage(de);
				if (chckbxMigrateOrBackup.isSelected()) {
					mess1.getAttachments().clear();
				}
				MapiMessage message = MapiMessage.fromMailMessage(mess1, d);
				Date Receiveddate = message.getDeliveryTime();
				if (message.getMessageClass().equals("IPM.Contact")) {
					if (message.getMessageClass().equals("IPM.Contact")) {
						if (chckbxMaintainFolderStructure.isSelected()) {
							new File(destination_path + File.separator + path).mkdirs();
							clonepath = path;
						}
						try {
							MapiContact con = (MapiContact) message.toMapiMessageItem();

							con.save(destination_path + File.separator + clonepath + File.separator + contactname(con)
									+ "_" + i + ".vcf", ContactSaveFormat.VCard);
							count_destination++;
							// //count++;

							countr++;
						} catch (OutOfMemoryError ep) {
							mf.logger.info(
									"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
						} catch (Exception e) {
							mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " " + countr
									+ System.lineSeparator());
							e.printStackTrace();
							continue;
						}
					} else {
						continue;
					}

				} else if (message.getMessageClass().equals("IPM.Appointment")) {
					if (filetype.equalsIgnoreCase("ICS")) {
						if (chckbxMaintainFolderStructure.isSelected()) {
							new File(destination_path + File.separator + path).mkdirs();
							clonepath = path;
						}
						try {

							MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();
							Receiveddate = cal.getStartDate();
							if (chckbx_calender_box.isSelected()) {
								if (Receiveddate.after(Calenderfilterstartdate)
										&& Receiveddate.before(Calenderfilterenddate)) {

									cal.save(
											destination_path + File.separator + clonepath + File.separator + i
													+ mf.namingconventionmapi(message) + ".ics",
											AppointmentSaveFormat.Ics);
									count_destination++;
									// //count++;
								} else if (Receiveddate.equals(Calenderfilterstartdate)
										|| Receiveddate.equals(Calenderfilterenddate)) {

									cal.save(
											destination_path + File.separator + clonepath + File.separator + i
													+ mf.namingconventionmapi(message) + ".ics",
											AppointmentSaveFormat.Ics);
									count_destination++;
									// count++;
								}

							} else {

								cal.save(destination_path + File.separator + clonepath + File.separator + i
										+ mf.namingconventionmapi(message) + ".ics", AppointmentSaveFormat.Ics);
								count_destination++;
								// count++;
							}

							countr++;
						} catch (OutOfMemoryError ep) {
							mf.logger.info(
									"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
						} catch (Exception e) {
							mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " " + i
									+ mf.namingconventionmapi(message) + System.lineSeparator());
							e.printStackTrace();
							continue;
						}
					} else {
						continue;
					}

				} else {
					continue;
				}

				lbl_progressreport.setText("Total Message Saved : " + count_destination + "    " + Folder
						+ " Extarcting messsage " + message.getSubject());

			} catch (Exception e) {
				e.printStackTrace();
				continue;
			}
		}

		FolderInfoCollection folderInf = pst.getRootFolder().getSubFolders();

		for (int j = 0; j < folderInf.size(); j++) {
			try {
				// //int count = 1;
//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				FolderInfo folderInfo = folderInf.get_Item(j);
				String Folder = folderInfo.getDisplayName();

				Folder = Folder.replace(",", "").replace(".", "");
				Folder = getRidOfIllegalFileNameCharacters(Folder);
				Folder = Folder.replaceAll("[\\[\\]]", "");
				Folder = Folder.trim();
				// progressBar_message_p3.setStringPainted(true);
				// progressBar_message_p3.setValue(0);
				path = path + File.separator + Folder;
				String path3 = path1 + File.separator + Folder;

				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}

					if (stop) {
						break;
					}
					if (pstfolderlist.get(l).trim().equalsIgnoreCase(path3)) {
						lbl_progressreport.setText(" Getting Folder " + Folder);
						int countr = 1;

						MessageInfoCollection messageInfoCollection = folderInfo.getContents();
						listduplicacy.clear();
						int messagesize;
						if (demo) {
							if (messageInfoCollection.size() <= All_Data.demo_count) {
								messagesize = messageInfoCollection.size();
							} else {
								messagesize = All_Data.demo_count;
							}

						} else {
							messagesize = messageInfoCollection.size();
						}

						for (int i = 0; i < messagesize; i++) {
							try {

//								if (stop) {
//									break;
//								}
								if (stop) {
									break;
								}
								if ((i % 100) == 0) {
									System.gc();

								}

								MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

								MapiMessage message1 = pst.extractMessage(messageInfo);
								MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
								MailConversionOptions de = new MailConversionOptions();
								MailMessage mess = message1.toMailMessage(de);
								if (chckbxMigrateOrBackup.isSelected()) {
									mess.getAttachments().clear();
								}
								MapiMessage message = MapiMessage.fromMailMessage(mess, d);

								Date Receiveddate = message.getDeliveryTime();
								if (message.getMessageClass().equals("IPM.Contact")) {
									if (filetype.equalsIgnoreCase("VCF")) {
										if (chckbxMaintainFolderStructure.isSelected()) {
											new File(destination_path + File.separator + path).mkdirs();
											clonepath = path;
										}
										try {
											MapiContact con = (MapiContact) message.toMapiMessageItem();

											con.save(
													destination_path + File.separator + clonepath + File.separator
															+ contactname(con) + "_" + i + ".vcf",
													ContactSaveFormat.VCard);
											count_destination++;
											// //count++;

											countr++;
										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " " + countr
													+ System.lineSeparator());
											e.printStackTrace();
											continue;
										}
									} else {
										continue;
									}
								} else if (message.getMessageClass().equals("IPM.Appointment")) {

									if (filetype.equalsIgnoreCase("ICS")) {
										if (chckbxMaintainFolderStructure.isSelected()) {
											new File(destination_path + File.separator + path).mkdirs();
											clonepath = path;
										}
										try {

											MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();
											Receiveddate = cal.getStartDate();
											if (chckbx_calender_box.isSelected()) {
												if (Receiveddate.after(Calenderfilterstartdate)
														&& Receiveddate.before(Calenderfilterenddate)) {

													cal.save(
															destination_path + File.separator + path + File.separator
																	+ i + mf.namingconventionmapi(message) + ".ics",
															AppointmentSaveFormat.Ics);
													count_destination++;
													// //count++;
												} else if (Receiveddate.equals(Calenderfilterstartdate)
														|| Receiveddate.equals(Calenderfilterenddate)) {

													cal.save(
															destination_path + File.separator + clonepath
																	+ File.separator + i
																	+ mf.namingconventionmapi(message) + ".ics",
															AppointmentSaveFormat.Ics);
													count_destination++;
													// count++;
												}

											} else {

												cal.save(
														destination_path + File.separator + clonepath + File.separator
																+ i + mf.namingconventionmapi(message) + ".ics",
														AppointmentSaveFormat.Ics);
												count_destination++;
												// count++;
											}

											countr++;
										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " " + i
													+ mf.namingconventionmapi(message) + System.lineSeparator());
											e.printStackTrace();
											continue;
										}
									} else {
										continue;
									}

								} else {
									continue;
								}

								lbl_progressreport.setText("Total Message Saved : " + count_destination + "    "
										+ Folder + " Extarcting messsage " + message.getSubject());
								/*
								 * //int messageprogress = (count * 100) / messagesize;
								 * //iprogressBar_message_p3.setValue(messageprogress);
								 */
							} catch (Exception e) {
								continue;
							}
						}
					}
				}
				if (folderInfo.hasSubFolders()) {
					getsubfolderforPSTOSTvcfics(folderInfo, path3, clonepath);
				}

				path = removefolder(path);
			} catch (Exception e) {
				continue;
			}

		}
	}

	public void getsubfolderforPSTOSTvcfics(FolderInfo f, String path3, String clonepath) {
		FolderInfoCollection subfolder = f.getSubFolders();
		for (int k = 0; k < subfolder.size(); k++) {
			try {
//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				FolderInfo folderf = subfolder.get_Item(k);

				String Folder = folderf.getDisplayName();
				Folder = Folder.replace(",", "").replace(".", "");
				Folder = getRidOfIllegalFileNameCharacters(Folder);
				Folder = Folder.replaceAll("[\\[\\]]", "");
				Folder = Folder.trim();

				path = path + File.separator + Folder;
				path3 = path3 + File.separator + Folder;

				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}

					if (pstfolderlist.get(l).equalsIgnoreCase(path3)) {
						lbl_progressreport.setText("Getting : " + Folder);

						MessageInfoCollection messageInfoCollection = null;
						try {
							messageInfoCollection = folderf.getContents();
						} catch (Exception e1) {

							e1.printStackTrace();
						}

						if (!(messageInfoCollection == null)) {

							// int count = 1;
							listduplicacy.clear();
							int messagesize;
							if (demo) {
								if (messageInfoCollection.size() <= All_Data.demo_count) {
									messagesize = messageInfoCollection.size();
								} else {
									messagesize = All_Data.demo_count;
								}

							} else {
								messagesize = messageInfoCollection.size();
							}

							for (int i = 0; i < messagesize; i++) {
								try {

//									if (stop) {
//										break;
//									}
									if (stop) {
										break;
									}
									if ((i % 100) == 0) {
										System.gc();
									}

									MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

									MapiMessage message1 = pst.extractMessage(messageInfo);
									MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
									MailConversionOptions de = new MailConversionOptions();
									MailMessage mess = message1.toMailMessage(de);
									if (chckbxMigrateOrBackup.isSelected()) {
										mess.getAttachments().clear();
									}
									MapiMessage message = MapiMessage.fromMailMessage(mess, d);
									Date Receiveddate = message.getDeliveryTime();
									if (message.getMessageClass().equals("IPM.Contact")) {
										if (filetype.equalsIgnoreCase("VCF")) {
											if (chckbxMaintainFolderStructure.isSelected()) {
												new File(destination_path + File.separator + path).mkdirs();
												clonepath = path;
											}
											try {
												MapiContact con = (MapiContact) message.toMapiMessageItem();

												con.save(
														destination_path + File.separator + clonepath + File.separator
																+ contactname(con) + "_" + i + ".vcf",
														ContactSaveFormat.VCard);

											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
														+ System.lineSeparator());
												continue;
											}
										} else {
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.Appointment")) {
										if (filetype.equalsIgnoreCase("ICS")) {
											if (chckbxMaintainFolderStructure.isSelected()) {
												new File(destination_path + File.separator + path).mkdirs();
												clonepath = path;
											}
											try {

												MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

												if (chckbx_calender_box.isSelected()) {
													if (Receiveddate.after(Calenderfilterstartdate)
															&& Receiveddate.before(Calenderfilterenddate))

														cal.save(
																destination_path + File.separator + clonepath
																		+ File.separator + i
																		+ mf.namingconventionmapi(message) + ".ics",
																AppointmentSaveFormat.Ics);

												} else {

													cal.save(
															destination_path + File.separator + clonepath
																	+ File.separator + i
																	+ mf.namingconventionmapi(message) + ".ics",
															AppointmentSaveFormat.Ics);
												}

											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
														+ System.lineSeparator());
												continue;
											}
										} else {
											continue;
										}

									} else {
										continue;
									}

									lbl_progressreport.setText("  Total Message Saved Count  " + count_destination
											+ "  " + Folder + "   Extarcting messsage " + message.getSubject());
									// int messageprogress = (count * 100) / messagesize;
									// iprogressBar_message_p3.setValue(messageprogress);
									// count++;

									count_destination++;
								} catch (Exception e) {
									continue;
								}

							}
						}
					}
				}
				if (folderf.hasSubFolders()) {
					// System.out.println("Sub Folder Found :" + Folder + " Path :" + path);
					getsubfolderforPSTOSTvcfics(folderf, path3, clonepath);

				}

				path = removefolder(path);
				path3 = removefolder(path3);

			} catch (Exception e) {
				continue;
			}
		}

	}

	public void ConvertPSTOST_word() {
		pst = PersonalStorage.fromFile(filepath);
		String path1 = "";
		FolderInfo folderInfo2 = pst.getRootFolder();
		Folder = folderInfo2.getDisplayName();
		Folder = Folder.replace(",", "").replace(".", "");
		Folder = getRidOfIllegalFileNameCharacters(Folder);
		Folder = Folder.replaceAll("[\\[\\]]", "");
		Folder = Folder.trim();
		if (Folder.equalsIgnoreCase("")) {
			Folder = "Root Folder";
		}
		String clonepath = path;
		path = path + File.separator + Folder;

		path1 = Folder;
		if (chckbxMaintainFolderStructure.isSelected()) {
			new File(destination_path + File.separator + path).mkdirs();
			clonepath = path;
		}
		MessageInfoCollection messageInfoCollection1 = folderInfo2.getContents();

		int messagesize1;
		listduplicacy.clear();
		if (demo) {
			if (messageInfoCollection1.size() <= All_Data.demo_count) {
				messagesize1 = messageInfoCollection1.size();
			} else {
				messagesize1 = All_Data.demo_count;
			}

		} else {
			messagesize1 = messageInfoCollection1.size();
		}
		System.out.println("message size : " + messagesize1);
		for (int i = 0; i < messagesize1; i++) {
			try {

//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				if ((i % 100) == 0) {
					System.gc();

				}
				int countr = 0;
				MessageInfo messageInfo = (MessageInfo) messageInfoCollection1.get_Item(i);

				MapiMessage message1 = pst.extractMessage(messageInfo);
				MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
				MailConversionOptions de = new MailConversionOptions();
				MailMessage mess1 = message1.toMailMessage(de);
				if (chckbxMigrateOrBackup.isSelected()) {
					mess1.getAttachments().clear();
				}
				MapiMessage message = MapiMessage.fromMailMessage(mess1, d);

				Date Receiveddate = message.getDeliveryTime();
				if (message.getMessageClass().equals("IPM.Contact")) {
					try {
						MapiContact con = (MapiContact) message.toMapiMessageItem();

						con.save(destination_path + File.separator + clonepath + File.separator + contactname(con) + "_"
								+ i + ".vcf", ContactSaveFormat.VCard);
						count_destination++;
						// //count++;

						countr++;
					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						mf.logger.warning(
								"Exception : " + e.getMessage() + "Contact" + " " + countr + System.lineSeparator());
						e.printStackTrace();
						continue;
					}

				} else if (message.getMessageClass().equals("IPM.Appointment")) {

					try {

						MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();
						Receiveddate = cal.getStartDate();
						if (chckbx_calender_box.isSelected()) {
							if (Receiveddate.after(Calenderfilterstartdate)
									&& Receiveddate.before(Calenderfilterenddate)) {

								cal.save(destination_path + File.separator + clonepath + File.separator + i
										+ mf.namingconventionmapi(message) + ".ics", AppointmentSaveFormat.Ics);
								count_destination++;
								// //count++;
							} else if (Receiveddate.equals(Calenderfilterstartdate)
									|| Receiveddate.equals(Calenderfilterenddate)) {

								cal.save(destination_path + File.separator + clonepath + File.separator + i
										+ mf.namingconventionmapi(message) + ".ics", AppointmentSaveFormat.Ics);
								count_destination++;
								// count++;
							}

						} else {

							cal.save(destination_path + File.separator + clonepath + File.separator + i
									+ mf.namingconventionmapi(message) + ".ics", AppointmentSaveFormat.Ics);
							count_destination++;
							// count++;
						}

						countr++;
					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " " + i
								+ mf.namingconventionmapi(message) + System.lineSeparator());
						e.printStackTrace();
						continue;
					}

				} else if (message.getMessageClass().equals("IPM.StickyNote")
						|| message.getMessageClass().equals("IPM.Task")) {
					try {

						if (message.getMessageClass().equals("IPM.Task")) {
							MapiTask task = (MapiTask) message.toMapiMessageItem();
							Receiveddate = task.getStartDate();
						}
						Mapiword mf1 = new Mapiword(mf, filetype, destination_path, clonepath, count_destination,
								temppathm, message, Receiveddate, task_box.isSelected(), taskfilterstartdate,
								taskfilterenddate, filepath);
						Thread saveTh = new Thread(mf1);
						saveTh.start();
						saveTh.join();
						count_destination = mf1.k;
					} catch (OutOfMemoryError ep) {
						mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
								+ mf.namingconventionmapi(message, new File(filepath)));
					} catch (Exception e) {
						mf.logger.warning(
								"Exception : " + e.getMessage() + "Task" + " " + countr + System.lineSeparator());
						e.printStackTrace();
						continue;
					}

				} else {
					try {

						Mapiword mf1 = new Mapiword(mf, filetype, destination_path, clonepath, count_destination,
								temppathm, message, Receiveddate, chckbx_Mail_Filter.isSelected(), mailfilterstartdate,
								mailfilterenddate, filepath);
						Thread saveTh = new Thread(mf1);
						saveTh.start();
						saveTh.join();
						count_destination++;
					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						mf.logger.warning("Exception : " + e.getMessage() + "Message" + " " + i
								+ mf.namingconventionmapi(message) + System.lineSeparator());
						e.printStackTrace();
						continue;
					}

				}

				lbl_progressreport.setText("Total Message Saved : " + count_destination + "    " + Folder
						+ " Extarcting messsage " + message.getSubject());

			} catch (Exception e) {
				e.printStackTrace();
				continue;
			}
		}

		FolderInfoCollection folderInf = pst.getRootFolder().getSubFolders();

		for (int j = 0; j < folderInf.size(); j++) {

			try {
				// int count = 1;
//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				FolderInfo folderInfo = folderInf.get_Item(j);
				String Folder = folderInfo.getDisplayName();
				Folder = Folder.replace(",", "").replace(".", "");
				Folder = getRidOfIllegalFileNameCharacters(Folder);
				Folder = Folder.replaceAll("[\\[\\]]", "");
				Folder = Folder.trim();
				// progressBar_message_p3.setStringPainted(true);
				// progressBar_message_p3.setValue(0);
				lbl_progressreport.setText(" Getting Folder " + Folder);

				path = path + File.separator + Folder;
				String path3 = path1 + File.separator + Folder;

				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (pstfolderlist.get(l).trim().equalsIgnoreCase(path3)) {

						if (chckbxMaintainFolderStructure.isSelected()) {
							new File(destination_path + File.separator + path).mkdirs();
							clonepath = path;
						}

						// System.out.println("path for folder : " + path);

						MessageInfoCollection messageInfoCollection = folderInfo.getContents();
						listduplicacy.clear();
						int messagesize;
						if (demo) {
							if (messageInfoCollection.size() <= All_Data.demo_count) {
								messagesize = messageInfoCollection.size();
							} else {
								messagesize = All_Data.demo_count;
							}

						} else {
							messagesize = messageInfoCollection.size();
						}

						for (int i = 0; i < messagesize; i++) {
							try {
//								if (stop) {
//									break;
//								}
								if (stop) {
									break;
								}
								MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

								MapiMessage message1 = pst.extractMessage(messageInfo);
								MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
								MailConversionOptions de = new MailConversionOptions();
								MailMessage mess = message1.toMailMessage(de);
								if (chckbxMigrateOrBackup.isSelected()) {
									mess.getAttachments().clear();
								}
								MapiMessage message = MapiMessage.fromMailMessage(mess, d);

								Date Receiveddate = message.getDeliveryTime();
								if (message.getMessageClass().equals("IPM.Contact")) {
									try {
										MapiContact con = (MapiContact) message.toMapiMessageItem();

										con.save(destination_path + File.separator + clonepath + File.separator
												+ contactname(con) + "_" + i + ".vcf", ContactSaveFormat.VCard);
										count_destination++;

									} catch (Error e) {
										mf.logger.warning("ERROR : " + e.getMessage() + System.lineSeparator());
									} catch (Exception e) {
										mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " " + i
												+ mf.namingconventionmapi(message) + System.lineSeparator());
										// e.printStackTrace();

										continue;
									}

								} else if (message.getMessageClass().equals("IPM.Appointment")) {

									try {

										MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

										Receiveddate = cal.getStartDate();
										if (chckbx_calender_box.isSelected()) {
											if (Receiveddate.after(Calenderfilterstartdate)
													&& Receiveddate.before(Calenderfilterenddate)) {

												cal.save(
														destination_path + File.separator + clonepath + File.separator
																+ i + mf.namingconventionmapi(message) + ".ics",
														AppointmentSaveFormat.Ics);

											} else if (Receiveddate.equals(Calenderfilterstartdate)
													|| Receiveddate.equals(Calenderfilterenddate)) {

												cal.save(
														destination_path + File.separator + clonepath + File.separator
																+ i + mf.namingconventionmapi(message) + ".ics",
														AppointmentSaveFormat.Ics);

											}

										} else {

											cal.save(
													destination_path + File.separator + clonepath + File.separator + i
															+ mf.namingconventionmapi(message) + ".ics",
													AppointmentSaveFormat.Ics);
											count_destination++;

										}

									} catch (Error e) {
										mf.logger.warning("ERROR : " + e.getMessage() + System.lineSeparator());
									} catch (Exception e) {
										mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " " + i
												+ mf.namingconventionmapi(message) + System.lineSeparator());
										// e.printStackTrace();

										continue;
									}

								} else if (message.getMessageClass().equals("IPM.StickyNote")
										|| message.getMessageClass().equals("IPM.Task")) {

									try {

										Mapiword mf1 = new Mapiword(mf, filetype, destination_path, clonepath,
												count_destination, temppathm, message, Receiveddate,
												task_box.isSelected(), taskfilterstartdate, taskfilterenddate,
												filepath);
										Thread saveTh = new Thread(mf1);
										saveTh.start();
										saveTh.join();
										count_destination = mf1.k;
									} catch (Error e) {
										mf.logger.warning("ERROR : " + e.getMessage() + System.lineSeparator());
									} catch (Exception e) {
										mf.logger.warning("Exception : " + e.getMessage() + "Task" + " " + i
												+ mf.namingconventionmapi(message) + System.lineSeparator());
										// e.printStackTrace();
										continue;
									} finally {

									}

								} else {
									try {

										Mapiword mf1 = new Mapiword(mf, filetype, destination_path, clonepath,
												count_destination, temppathm, message, Receiveddate,
												chckbx_Mail_Filter.isSelected(), mailfilterstartdate, mailfilterenddate,
												filepath);
										Thread saveTh = new Thread(mf1);
										saveTh.start();
										saveTh.join();
										count_destination = mf1.k;
									}

									catch (Error e) {
										mf.logger.warning("ERROR : " + e.getMessage() + System.lineSeparator());
									} catch (Exception e) {
										mf.logger.warning("Exception : " + e.getMessage() + "Message" + " " + i
												+ mf.namingconventionmapi(message) + System.lineSeparator());
										// e.printStackTrace();
										continue;
									}

								}

								lbl_progressreport.setText("  Total Message Saved Count  " + count_destination + "  "
										+ Folder + "   Extarcting messsage " + message.getSubject());
								// int messageprogress = (count * 100) / messagesize;
								// iprogressBar_message_p3.setValue(messageprogress);

								// System.out.println("Done");
							} catch (Exception e) {
								continue;
							}

						}
					}
				}
				if (folderInfo.hasSubFolders()) {
					getsubfolderforPSTOST_word(folderInfo, path3, clonepath);
				}
				path = removefolder(path);
			} catch (Exception e) {
				continue;
			}
		}

		// System.out.println("Process complete");

	}

	public void getsubfolderforPSTOST_word(FolderInfo f, String path3, String clonepath) {
		FolderInfoCollection subfolder = f.getSubFolders();
		for (int k = 0; k < subfolder.size(); k++) {
			try {
//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				FolderInfo folderf = subfolder.get_Item(k);

				String Folder = folderf.getDisplayName();
				Folder = Folder.replace(",", "").replace(".", "");
				Folder = getRidOfIllegalFileNameCharacters(Folder);
				Folder = Folder.replaceAll("[\\[\\]]", "");
				Folder = Folder.trim();

				path = path + File.separator + Folder;
				path3 = path3 + File.separator + Folder;
				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}

					if (pstfolderlist.get(l).equalsIgnoreCase(path3)) {
						lbl_progressreport.setText("Getting : " + Folder);
						if (chckbxMaintainFolderStructure.isSelected()) {
							new File(destination_path + File.separator + path).mkdirs();
							clonepath = path;
						}
						listduplicacy.clear();
						MessageInfoCollection messageInfoCollection = null;
						try {
							messageInfoCollection = folderf.getContents();
						} catch (Exception e1) {

							e1.printStackTrace();
						}

						if (!(messageInfoCollection == null)) {

							// int count = 1;

							int messagesize;
							if (demo) {
								if (messageInfoCollection.size() <= All_Data.demo_count) {
									messagesize = messageInfoCollection.size();
								} else {
									messagesize = All_Data.demo_count;
								}

							} else {
								messagesize = messageInfoCollection.size();
							}

							for (int i = 0; i < messagesize; i++) {
								try {

//									if (stop) {
//										break;
//									}
									if (stop) {
										break;
									}
									if ((i % 100) == 0) {
										System.gc();
									}

									MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

									MapiMessage message = pst.extractMessage(messageInfo);
									Date Receiveddate = message.getDeliveryTime();
									if (message.getMessageClass().equals("IPM.Contact")) {
										try {
											MapiContact con = (MapiContact) message.toMapiMessageItem();

											con.save(
													destination_path + File.separator + clonepath + File.separator
															+ contactname(con) + "_" + i + ".vcf",
													ContactSaveFormat.VCard);

										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
													+ System.lineSeparator());
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.Appointment")) {

										try {

											MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

											if (chckbx_calender_box.isSelected()) {
												if (Receiveddate.after(Calenderfilterstartdate)
														&& Receiveddate.before(Calenderfilterenddate))

													cal.save(
															destination_path + File.separator + clonepath
																	+ File.separator + i
																	+ mf.namingconventionmapi(message) + ".ics",
															AppointmentSaveFormat.Ics);

											} else {

												cal.save(
														destination_path + File.separator + clonepath + File.separator
																+ i + mf.namingconventionmapi(message) + ".ics",
														AppointmentSaveFormat.Ics);
											}

										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
													+ System.lineSeparator());
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.StickyNote")
											|| message.getMessageClass().equals("IPM.Task")) {
										try {

											MapiTask task = (MapiTask) message.toMapiMessageItem();

											Receiveddate = task.getStartDate();
											Mapiword mf1 = new Mapiword(mf, filetype, destination_path, clonepath,
													count_destination, temppathm, message, Receiveddate,
													task_box.isSelected(), taskfilterstartdate, taskfilterenddate,
													filepath);
											Thread saveTh = new Thread(mf1);
											saveTh.start();
											saveTh.join();
											count_destination = mf1.k;
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Message" + " "
													+ System.lineSeparator());
											continue;
										}

									} else {
										try {

											Mapiword mf1 = new Mapiword(mf, filetype, destination_path, clonepath,
													count_destination, temppathm, message, Receiveddate,
													chckbx_Mail_Filter.isSelected(), mailfilterstartdate,
													mailfilterenddate, filepath);
											Thread saveTh = new Thread(mf1);
											saveTh.start();
											saveTh.join();
											count_destination = mf1.k;
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Message" + " "
													+ System.lineSeparator());
											continue;
										}

									}

									lbl_progressreport.setText("  Total Message Saved Count  " + count_destination
											+ "  " + Folder + "   Extarcting messsage " + message.getSubject());

									count_destination++;
								} catch (Exception e) {
									continue;
								}

							}
						}
					}
				}
				if (folderf.hasSubFolders()) {

					getsubfolderforPSTOST_word(folderf, path3, clonepath);

				}

				path = removefolder(path);
				path3 = removefolder(path3);

			} catch (Exception e) {
				continue;
			}
		}
	}

	public void ConvertPST_defaultrestore() throws Exception {

		String path2 = "";
		FolderInfo folderInfo2 = pst.getRootFolder();

		Folder = folderInfo2.getDisplayName();
		Folder = Folder.replace(",", "").replace(".", "");
		Folder = getRidOfIllegalFileNameCharacters(Folder);
		Folder = Folder.replaceAll("[\\[\\]]", "");
		Folder = Folder.trim();
		if (Folder.equalsIgnoreCase("")) {
			Folder = "Root Folder";
		}
		path = path + File.separator + Folder;
		path2 = Folder;

		String defaultfolder = "";
		if (chckbxCustomFolderName.isSelected()) {
			defaultfolder = clientforexchange_output.createFolder(textField_customfolder.getText() + calendertime)
					.getUri();
		} else {
			defaultfolder = clientforexchange_output.createFolder(fname + calendertime).getUri();
		}

		if (folderInfo2.getContentCount() > 0) {
			String mailbox = clientforexchange_output.createFolder(defaultfolder, Folder).getUri();

			MessageInfoCollection messageInfoCollection1 = folderInfo2.getContents();
			messageaddpst(messageInfoCollection1, mailbox, Folder);
		}

		FolderInfoCollection folderInf = pst.getRootFolder().getSubFolders();

		for (int j = 0; j < folderInf.size(); j++) {
			try {

				FolderInfo folderInfo = folderInf.get_Item(j);
				String Folder = folderInfo.getDisplayName();
				Folder = Folder.replace(",", "").replace(".", "");
				Folder = getRidOfIllegalFileNameCharacters(Folder);
				Folder = Folder.replaceAll("[\\[\\]]", "");
				Folder = Folder.trim();

//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}

				path = path + File.separator + Folder;
				String path3 = Folder;
				path3 = path3.replaceAll("[\\[\\]]", "");
				Folder = path3;
				String mailfolder = "";
				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					String path1 = pstfolderlist.get(l).replace(path2 + File.separator, "");

					if (path1.equalsIgnoreCase(path3)) {
						lbl_progressreport.setText(" Getting Folder " + Folder);

						listdupliccal.clear();
						listduplicacy.clear();
						listdupliccontact.clear();
						listduplictask.clear();

						if (Folder.contains("Inbox")) {

							if (folderInfo.getContentCount() > 0) {
								mailfolder = clientforexchange_output.getMailboxInfo().getInboxUri();
								MessageInfoCollection messageInfoCollection = folderInfo.getContents();

								messageaddpst(messageInfoCollection, mailfolder, Folder);
							}
						} else if (Folder.contains("Deleted Item")) {

							if (folderInfo.getContentCount() > 0) {

								mailfolder = clientforexchange_output.getMailboxInfo().getDeletedItemsUri();
								MessageInfoCollection messageInfoCollection = folderInfo.getContents();
								messageaddpst(messageInfoCollection, mailfolder, Folder);
							}
						} else if (Folder.contains("Calendar")) {

							if (folderInfo.getContentCount() > 0) {

								MessageInfoCollection messageInfoCollection = folderInfo.getContents();
								int messagesize;
								if (demo) {
									if (messageInfoCollection.size() <= All_Data.demo_count) {
										messagesize = messageInfoCollection.size();
									} else {
										messagesize = All_Data.demo_count;
									}

								} else {
									messagesize = messageInfoCollection.size();
								}
								ExchangeFolderInfo subfolderInfo[] = new ExchangeFolderInfo[] { null };
								if (!clientforexchange_output.folderExists(
										clientforexchange_output.getMailboxInfo().getCalendarUri(),
										calendertime + "/" + Folder, subfolderInfo)) {
									mailfolder = clientforexchange_output
											.createFolder(clientforexchange_output.getMailboxInfo().getCalendarUri(),
													calendertime + "/" + Folder, null, "IPF.Appointment")
											.getUri();
								}
								for (int i = 0; i < messagesize; i++) {
									try {

//										if (stop) {
//											break;
//										}
										if (stop) {
											break;
										}
										if ((i % 100) == 0) {
											System.gc();

										}

										MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

										MapiMessage message1 = pst.extractMessage(messageInfo);
										MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
										MailConversionOptions de = new MailConversionOptions();
										de.setConvertAsTnef(true);
										MailMessage mess = message1.toMailMessage(de);
										MapiMessage message = MapiMessage.fromMailMessage(mess, d);

										Date Receiveddate = message.getDeliveryTime();
										if (message.getMessageClass().equals("IPM.Appointment")
												|| message.getMessageClass().contains("IPM.Schedule.Meeting")) {

											try {

												MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();
												cal.save(temppathm + File.separator + mf.namingconventionmapi(message)
														+ ".ics", AppointmentSaveFormat.Ics);
												File file = new File(temppathm + File.separator
														+ mf.namingconventionmapi(message) + ".ics");
												AppointmentLoadOptions optiona = new AppointmentLoadOptions();
												optiona.getIgnoreSmtpAddressCheck();
												Appointment calDoc = Appointment.load(temppathm + File.separator
														+ mf.namingconventionmapi(message) + ".ics", optiona);

												if (chckbxRemoveDuplicacy.isSelected()) {

													String input = duplicacymapiCal(cal);
													input = input.replaceAll("\\s", "");
													input = input.trim();

													if (!listdupliccal.contains(input)) {
														System.out.println("Not a duplicate message");
														listdupliccal.add(input);

														if (chckbx_calender_box.isSelected()) {
															if (Receiveddate.after(Calenderfilterstartdate)
																	&& Receiveddate.before(Calenderfilterenddate)) {

																clientforexchange_output.createAppointment(calDoc,
																		mailfolder);

																count_destination++;
															} else if (Receiveddate.equals(Calenderfilterstartdate)
																	|| Receiveddate.equals(Calenderfilterenddate)) {
																clientforexchange_output.createAppointment(calDoc,
																		mailfolder);
																count_destination++;

															}

														} else {

															clientforexchange_output.createAppointment(calDoc,
																	mailfolder);

															count_destination++;

														}

													}
												} else {

													if (chckbx_calender_box.isSelected()) {
														if (Receiveddate.after(Calenderfilterstartdate)
																&& Receiveddate.before(Calenderfilterenddate)) {

															clientforexchange_output.createAppointment(calDoc,
																	mailfolder);

															count_destination++;
														} else if (Receiveddate.equals(Calenderfilterstartdate)
																|| Receiveddate.equals(Calenderfilterenddate)) {
															clientforexchange_output.createAppointment(calDoc,
																	mailfolder);
															count_destination++;

														}

													} else {

														clientforexchange_output.createAppointment(calDoc, mailfolder);

														count_destination++;

													}

												}
												file.delete();
											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "  "
														+ mf.namingconventionmapi(message) + System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										}

										lbl_progressreport.setText("  Total Message Saved Count  " + count_destination
												+ "  " + Folder + "   Extarcting messsage " + message.getSubject());

									} catch (Exception e) {
										continue;
									}

								}

							}
						} else if (Folder.contains("Tasks") || Folder.contains("ToDo")) {

							if (folderInfo.getContentCount() > 0) {

								MessageInfoCollection messageInfoCollection = folderInfo.getContents();
								int messagesize;
								if (demo) {
									if (messageInfoCollection.size() <= All_Data.demo_count) {
										messagesize = messageInfoCollection.size();
									} else {
										messagesize = All_Data.demo_count;
									}

								} else {
									messagesize = messageInfoCollection.size();
								}

								for (int i = 0; i < messagesize; i++) {
									try {

//										if (stop) {
//											break;
//										}
										if (stop) {
											break;
										}
										if ((i % 100) == 0) {
											System.gc();

										}

										MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

										MapiMessage message1 = pst.extractMessage(messageInfo);
										MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
										MailConversionOptions de = new MailConversionOptions();
										de.setConvertAsTnef(true);
										MailMessage mess = message1.toMailMessage(de);
										MapiMessage message = MapiMessage.fromMailMessage(mess, d);

										Date Receiveddate = message.getDeliveryTime();
										if (messageInfo.getMessageClass().equals("IPM.StickyNote")
												|| messageInfo.getMessageClass().equals("IPM.Task")) {
											try {

												MapiTask task = null;
												if (messageInfo.getMessageClass().equals("IPM.Task")) {
													task = (MapiTask) message.toMapiMessageItem();
												}
												mailfolder = clientforexchange_output.getMailboxInfo().getTasksUri();
												if (chckbxRemoveDuplicacy.isSelected()) {
													String input = "";
													if (messageInfo.getMessageClass().equals("IPM.Task")) {
														input = duplicacymapiTask(task);
													}
													input = input.replaceAll("\\s", "");
													input = input.trim();

													if (!listduplictask.contains(input)) {
														System.out.println("Not a duplicate message");
														listduplictask.add(input);

														if (task_box.isSelected()) {
															if (Receiveddate.after(taskfilterstartdate)
																	&& Receiveddate.before(taskfilterenddate)) {
																clientforexchange_output.appendMessage(mailfolder,
																		mess);
																count_destination++;
															} else if (Receiveddate.equals(taskfilterstartdate)
																	|| Receiveddate.equals(taskfilterenddate)) {
																clientforexchange_output.appendMessage(mailfolder,
																		mess);
																count_destination++;

															}

														} else {
															clientforexchange_output.appendMessage(mailfolder, mess);
															count_destination++;

														}

													}
												} else {

													if (task_box.isSelected()) {
														if (Receiveddate.after(taskfilterstartdate)
																&& Receiveddate.before(taskfilterenddate)) {
															clientforexchange_output.appendMessage(mailfolder, mess);
															count_destination++;
														} else if (Receiveddate.equals(taskfilterstartdate)
																|| Receiveddate.equals(taskfilterenddate)) {
															clientforexchange_output.appendMessage(mailfolder, mess);
															count_destination++;

														}

													} else {
														clientforexchange_output.appendMessage(mailfolder, mess);
														count_destination++;

													}

												}

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Task" + " " + i
														+ mf.namingconventionmapi(message) + System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										}

										lbl_progressreport.setText("  Total Message Saved Count  " + count_destination
												+ "  " + Folder + "   Extarcting messsage " + message.getSubject());

									} catch (Exception e) {
										continue;
									}

								}
							}
						} else if (Folder.contains("Contacts")) {

							// info = ost.getPredefinedFolder(StandardIpmFolder.Contacts);
							if (folderInfo.getContentCount() > 0) {

								ExchangeFolderInfo subfolderInfo[] = new ExchangeFolderInfo[] { null };
								if (!clientforexchange_output.folderExists(
										clientforexchange_output.getMailboxInfo().getContactsUri(),
										calendertime + "/" + Folder, subfolderInfo)) {
									mailfolder = clientforexchange_output
											.createFolder(clientforexchange_output.getMailboxInfo().getContactsUri(),
													calendertime + "/" + Folder, null, "IPF.Contact")
											.getUri();
								}

								MessageInfoCollection messageInfoCollection = folderInfo.getContents();

								int messagesize;
								if (demo) {
									if (messageInfoCollection.size() <= All_Data.demo_count) {
										messagesize = messageInfoCollection.size();
									} else {
										messagesize = All_Data.demo_count;
									}

								} else {
									messagesize = messageInfoCollection.size();
								}

								for (int i = 0; i < messagesize; i++) {
									try {

//										if (stop) {
//											break;
//										}
										if (stop) {
											break;
										}
										if ((i % 100) == 0) {
											System.gc();

										}

										MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

										MapiMessage message1 = pst.extractMessage(messageInfo);
										MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
										MailConversionOptions de = new MailConversionOptions();
										de.setConvertAsTnef(true);
										MailMessage mess = message1.toMailMessage(de);
										MapiMessage message = MapiMessage.fromMailMessage(mess, d);

										if (message.getMessageClass().equals("IPM.Contact")) {
											try {

												MapiContact con = (MapiContact) message.toMapiMessageItem();
												ByteArrayOutputStream bos = new ByteArrayOutputStream();
												con.save(bos, ContactSaveFormat.VCard);
												ByteArrayInputStream inStream = new ByteArrayInputStream(
														bos.toByteArray());
												MapiContact mapicontact = MapiContact.fromVCard(inStream);
												if (chckbxRemoveDuplicacy.isSelected()) {

													String input = duplicacymapiContact(con);

													if (!listdupliccontact.contains(input)) {
														System.out.println("Not a duplicate message");
														listdupliccontact.add(input);

														clientforexchange_output.createContact(mailfolder, mapicontact);
														count_destination++;

													}
												} else {

													clientforexchange_output.createContact(mailfolder, mapicontact);
													count_destination++;

												}

												count_destination++;

											} catch (Error e) {
												mf.logger.warning("ERROR : " + e.getMessage() + System.lineSeparator());
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " " + i
														+ mf.namingconventionmapi(message) + System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										}

										lbl_progressreport.setText("  Total Message Saved Count  " + count_destination
												+ "  " + Folder + "   Extarcting messsage " + message.getSubject());

									} catch (Exception e) {
										continue;
									}

								}
							}
						} else if (Folder.contains("Outbox")) {

							if (folderInfo.getContentCount() > 0) {
								mailfolder = clientforexchange_output.getMailboxInfo().getOutboxUri();
								MessageInfoCollection messageInfoCollection = folderInfo.getContents();
								messageaddpst(messageInfoCollection, mailfolder, Folder);
							}
						} else if (Folder.contains("Draft")) {

							if (folderInfo.getContentCount() > 0) {
								mailfolder = clientforexchange_output.getMailboxInfo().getDraftsUri();
								MessageInfoCollection messageInfoCollection = folderInfo.getContents();
								messageaddpst(messageInfoCollection, mailfolder, Folder);
							}
						} else if (Folder.contains("Junk E-Mail")) {

							if (folderInfo.getContentCount() > 0) {
								mailfolder = clientforexchange_output.getMailboxInfo().getJunkeMailsUri();
								MessageInfoCollection messageInfoCollection = folderInfo.getContents();
								messageaddpst(messageInfoCollection, mailfolder, Folder);
							}
						} else if (Folder.contains("Notes")) {

							if (folderInfo.getContentCount() > 0) {
								mailfolder = clientforexchange_output.getMailboxInfo().getNotesUri();
								MessageInfoCollection messageInfoCollection = folderInfo.getContents();
								messageaddpst(messageInfoCollection, mailfolder, Folder);
							}
						} else if (Folder.contains("Journal")) {

							if (folderInfo.getContentCount() > 0) {
								mailfolder = clientforexchange_output.getMailboxInfo().getJournalUri();
								MessageInfoCollection messageInfoCollection = folderInfo.getContents();
								messageaddpst(messageInfoCollection, mailfolder, Folder);
							}
						} else if (Folder.contains("Sent")) {

							if (folderInfo.getContentCount() > 0) {
								mailfolder = clientforexchange_output.getMailboxInfo().getSentItemsUri();
								MessageInfoCollection messageInfoCollection = folderInfo.getContents();
								messageaddpst(messageInfoCollection, mailfolder, Folder);
							}
						} else {
							mailfolder = clientforexchange_output.createFolder(defaultfolder, Folder).getUri();
							if (folderInfo.getContentCount() > 0) {
								MessageInfoCollection messageInfoCollection = folderInfo.getContents();

								listduplicacy.clear();
								int messagesize;
								if (demo) {
									if (messageInfoCollection.size() <= All_Data.demo_count) {
										messagesize = messageInfoCollection.size();
									} else {
										messagesize = All_Data.demo_count;
									}

								} else {
									messagesize = messageInfoCollection.size();
								}
								String scm = "";

								for (int i = 0; i < messagesize; i++) {
									try {

//										if (stop) {
//											break;
//										}
										if (stop) {
											break;
										}

										if ((i % 100) == 0) {
											System.gc();

										}

										MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

										MapiMessage message1 = pst.extractMessage(messageInfo);
										MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
										MailConversionOptions de = new MailConversionOptions();
										MailMessage mess = message1.toMailMessage(de);
										MapiMessage message = MapiMessage.fromMailMessage(mess, d);

										Date Receiveddate = message.getDeliveryTime();
										if (message.getMessageClass().equals("IPM.Contact")) {
											try {
												ExchangeFolderInfo subfolderInfo[] = new ExchangeFolderInfo[] { null };

												if (!clientforexchange_output.folderExists(
														clientforexchange_output.getMailboxInfo().getContactsUri(),
														calendertime + "/" + Folder, subfolderInfo)) {
													scm = clientforexchange_output
															.createFolder(
																	clientforexchange_output.getMailboxInfo()
																			.getContactsUri(),
																	calendertime + "/" + Folder, null, "IPF.Contact")
															.getUri();
												}

												MapiContact con = (MapiContact) message.toMapiMessageItem();

												clientforexchange_output.createContact(scm, con);

												count_destination++;

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " " + i
														+ mf.namingconventionmapi(message) + System.lineSeparator());
												continue;
											}

										} else if (message.getMessageClass().equals("IPM.Appointment")
												|| message.getMessageClass().contains("IPM.Schedule.Meeting")) {

											try {

												MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

												ExchangeFolderInfo subfolderInfo[] = new ExchangeFolderInfo[] { null };
												if (!clientforexchange_output.folderExists(
														clientforexchange_output.getMailboxInfo().getCalendarUri(),
														calendertime + "/" + Folder, subfolderInfo)) {
													scm = clientforexchange_output.createFolder(
															clientforexchange_output.getMailboxInfo().getCalendarUri(),
															calendertime + "/" + Folder, null, "IPF.Appointment")
															.getUri();
												}

												cal.save(temppathm + File.separator + mf.namingconventionmapi(message)
														+ ".ics", AppointmentSaveFormat.Ics);
												File file = new File(temppathm + File.separator
														+ mf.namingconventionmapi(message) + ".ics");
												AppointmentLoadOptions optiona = new AppointmentLoadOptions();
												optiona.getIgnoreSmtpAddressCheck();
												Appointment calDoc = Appointment.load(temppathm + File.separator
														+ mf.namingconventionmapi(message) + ".ics", optiona);

												if (chckbx_calender_box.isSelected()) {
													if (Receiveddate.after(Calenderfilterstartdate)
															&& Receiveddate.before(Calenderfilterenddate)) {
														clientforexchange_output.createAppointment(calDoc, scm);
														count_destination++;
													}

												} else {
													clientforexchange_output.createAppointment(calDoc, scm);
													count_destination++;

												}
												file.delete();
											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " " + i
														+ mf.namingconventionmapi(message) + System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										} else if (message.getMessageClass().equals("IPM.StickyNote")
												|| message.getMessageClass().equals("IPM.Task")) {
											try {
												MapiTask task = (MapiTask) message.toMapiMessageItem();
												MailConversionOptions options = new MailConversionOptions();
												options.setConvertAsTnef(true);
												String taskuri = clientforexchange_output.getMailboxInfo()
														.getTasksUri();
												if (chckbx_Mail_Filter.isSelected()) {
													if (Receiveddate.after(mailfilterstartdate)
															&& Receiveddate.before(mailfilterenddate))

													{
														clientforexchange_output.createTask(taskuri, task);
														count_destination++;

													}

												} else {
													clientforexchange_output.createTask(taskuri, task);
													count_destination++;
												}

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Task" + " " + i
														+ mf.namingconventionmapi(message) + System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										} else {

											try {
												String messageid = mailexchange(mess, Receiveddate,
														clientforexchange_output, mailfolder);
												if (!messageid.equalsIgnoreCase("")) {
													if (((message.getFlags()
															& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
														clientforexchange_output.setReadFlag(messageid, true);

													} else {
														clientforexchange_output.setReadFlag(messageid, false);
													}
												}

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Message" + " " + i
														+ mf.namingconventionmapi(message) + System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										}

										lbl_progressreport.setText("  Total Message Saved Count  " + count_destination
												+ "  " + Folder + "   Extarcting messsage " + message.getSubject());
										// int messageprogress = (count * 100) / messagesize;
										// iprogressBar_message_p3.setValue(messageprogress);
										// //count++;

										// System.out.println("Done");
									} catch (Exception e) {
										e.printStackTrace();
										continue;
									}

								}
							}
						}

					}
				}
				if (folderInfo.hasSubFolders()) {
					getsubfolderforPSTOST_defaultrestore(folderInfo, path2, path3, mailfolder);
				}

			} catch (Exception e) {
				continue;
			}

		}

	}

	void psttask(MapiTask task, Date Receiveddate, MapiMessage message, String taskuri, Boolean checktask,
			MessageInfo messageInfo) {

		if (chckbxRemoveDuplicacy.isSelected()) {

			String input = "";
			if (messageInfo.getMessageClass().equals("IPM.Task")) {
				input = duplicacymapiTask(task);
			}

			if (!listduplictask.contains(input)) {
				System.out.println("Not a duplicate message");
				listduplictask.add(input);
				if (checktask) {
					if (task_box.isSelected()) {
						if (Receiveddate.after(taskfilterstartdate) && Receiveddate.before(taskfilterenddate)) {
							clientforexchange_output.createTask(taskuri, task);
							count_destination++;
						} else if (Receiveddate.equals(taskfilterstartdate) || Receiveddate.equals(taskfilterenddate)) {
							clientforexchange_output.createTask(taskuri, task);
							count_destination++;

						}

					} else {
						clientforexchange_output.createTask(taskuri, task);
						count_destination++;

					}
				} else {
					if (task_box.isSelected()) {
						if (Receiveddate.after(taskfilterstartdate) && Receiveddate.before(taskfilterenddate)) {
							clientforexchange_output.createTask(taskuri, task);
							count_destination++;
						} else if (Receiveddate.equals(taskfilterstartdate) || Receiveddate.equals(taskfilterenddate)) {
							clientforexchange_output.createTask(taskuri, task);
							count_destination++;

						}

					} else {
						clientforexchange_output.createTask(taskuri, task);
						count_destination++;

					}
				}

			}
		} else {

			if (checktask) {
				if (task_box.isSelected()) {
					if (Receiveddate.after(taskfilterstartdate) && Receiveddate.before(taskfilterenddate)) {
						clientforexchange_output.createTask(taskuri, task);
						count_destination++;
					} else if (Receiveddate.equals(taskfilterstartdate) || Receiveddate.equals(taskfilterenddate)) {
						clientforexchange_output.createTask(taskuri, task);
						count_destination++;

					}

				} else {
					clientforexchange_output.createTask(taskuri, task);
					count_destination++;

				}
			} else {
				if (task_box.isSelected()) {
					if (Receiveddate.after(taskfilterstartdate) && Receiveddate.before(taskfilterenddate)) {
						clientforexchange_output.createTask(taskuri, task);
						count_destination++;
					} else if (Receiveddate.equals(taskfilterstartdate) || Receiveddate.equals(taskfilterenddate)) {
						clientforexchange_output.createTask(taskuri, task);
						count_destination++;

					}

				} else {
					clientforexchange_output.createTask(taskuri, task);
					count_destination++;

				}
			}

		}

	}

	public void messageaddpst(MessageInfoCollection messageInfoCollection, String mailbox, String Folder) {
		String scm = "";
		int messagesize;
		if (demo) {
			if (messageInfoCollection.size() <= All_Data.demo_count) {
				messagesize = messageInfoCollection.size();
			} else {
				messagesize = All_Data.demo_count;
			}

		} else {
			messagesize = messageInfoCollection.size();
		}

		for (int i = 0; i < messagesize; i++) {
			try {

//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				if ((i % 100) == 0) {
					System.gc();

				}

				MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

				MapiMessage message1 = pst.extractMessage(messageInfo);
				MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
				MailConversionOptions de = new MailConversionOptions();
				de.setConvertAsTnef(true);
				MailMessage mess = message1.toMailMessage(de);
				if (chckbxMigrateOrBackup.isSelected()) {
					mess.getAttachments().clear();
				}
				MapiMessage message = MapiMessage.fromMailMessage(mess, d);

				Date Receiveddate = message.getDeliveryTime();
				if (message.getMessageClass().equals("IPM.Contact")) {
					try {

						ExchangeFolderInfo subfolderInfo[] = new ExchangeFolderInfo[] { null };

						if (!clientforexchange_output.folderExists(
								clientforexchange_output.getMailboxInfo().getContactsUri(), calendertime + "/" + Folder,
								subfolderInfo)) {
							scm = clientforexchange_output
									.createFolder(clientforexchange_output.getMailboxInfo().getContactsUri(),
											calendertime + "/" + Folder, null, "IPF.Contact")
									.getUri();
						}

						MapiContact con = (MapiContact) message.toMapiMessageItem();
						ByteArrayOutputStream bos = new ByteArrayOutputStream();
						con.save(bos, ContactSaveFormat.VCard);
						ByteArrayInputStream inStream = new ByteArrayInputStream(bos.toByteArray());
						MapiContact mapicontact = MapiContact.fromVCard(inStream);

						clientforexchange_output.createContact(scm, mapicontact);

						count_destination++;

					} catch (Error e) {
						mf.logger.warning("ERROR : " + e.getMessage() + System.lineSeparator());
					} catch (Exception e) {
						mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " " + i
								+ mf.namingconventionmapi(message) + System.lineSeparator());
						e.printStackTrace();
						continue;
					}

				} else if (message.getMessageClass().equals("IPM.Appointment")
						|| message.getMessageClass().contains("IPM.Schedule.Meeting")) {

					try {

						MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

						ExchangeFolderInfo subfolderInfo[] = new ExchangeFolderInfo[] { null };
						if (!clientforexchange_output.folderExists(
								clientforexchange_output.getMailboxInfo().getCalendarUri(), calendertime + "/" + Folder,
								subfolderInfo)) {
							scm = clientforexchange_output
									.createFolder(clientforexchange_output.getMailboxInfo().getCalendarUri(),
											calendertime + "/" + Folder, null, "IPF.Appointment")
									.getUri();
						}

						cal.save(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics",
								AppointmentSaveFormat.Ics);
						File file = new File(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics");
						AppointmentLoadOptions optiona = new AppointmentLoadOptions();
						optiona.getIgnoreSmtpAddressCheck();
						Appointment calDoc = Appointment
								.load(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics", optiona);

						if (chckbx_calender_box.isSelected()) {
							if (Receiveddate.after(Calenderfilterstartdate)
									&& Receiveddate.before(Calenderfilterenddate)) {
								clientforexchange_output.createAppointment(calDoc, scm);
								count_destination++;
							}

						} else {
							clientforexchange_output.createAppointment(calDoc, scm);
							count_destination++;

						}
						file.delete();

					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						mf.logger.warning("Exception : " + e.getMessage() + "  " + mf.namingconventionmapi(message)
								+ System.lineSeparator());
						e.printStackTrace();
						continue;
					}

				} else if (messageInfo.getMessageClass().equals("IPM.StickyNote")
						|| messageInfo.getMessageClass().equals("IPM.Task")) {
					try {

						Boolean checktask = false;
						MapiTask task = null;
						if (messageInfo.getMessageClass().equals("IPM.Task")) {
							task = (MapiTask) message.toMapiMessageItem();
						}
						String taskuri = clientforexchange_output.getMailboxInfo().getTasksUri();
						psttask(task, Receiveddate, message, taskuri, checktask, messageInfo);

					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						mf.logger.warning("Exception : " + e.getMessage() + "Task" + " " + i
								+ mf.namingconventionmapi(message) + System.lineSeparator());
						e.printStackTrace();
						continue;
					}

				} else {

					try {

						mailexchange(mess, Receiveddate, clientforexchange_output, mailbox);

					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						mf.logger.warning("Exception : " + e.getMessage() + "Message" + " " + i
								+ mf.namingconventionmapi(message) + System.lineSeparator());
						e.printStackTrace();
						continue;
					}

				}

				lbl_progressreport.setText("  Total Message Saved Count  " + count_destination + "  " + Folder
						+ "   Extarcting messsage " + message.getSubject());

			} catch (Exception e) {
				continue;
			}

		}
	}

	public void getsubfolderforPSTOST_defaultrestore(FolderInfo f, String path2, String path1, String mailfolder) {
		FolderInfoCollection subfolder = f.getSubFolders();
		String scm = "";
		for (int k = 0; k < subfolder.size(); k++) {
			try {
//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				FolderInfo folderf = subfolder.get_Item(k);

				String Folder = folderf.getDisplayName();
				Folder = Folder.replace(",", "").replace(".", "");
				Folder = getRidOfIllegalFileNameCharacters(Folder);
				Folder = Folder.replaceAll("[\\[\\]]", "");
				Folder = Folder.trim();

				path = path1 + File.separator + Folder;

				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					String path3 = pstfolderlist.get(l).replace(path2 + File.separator, "");
					path = path.replaceAll("[\\[\\]]", "");
					Folder = path;
					if (path3.equalsIgnoreCase(path)) {

						String subfolder1 = clientforexchange_output.createFolder(mailfolder, Folder).getUri();
						// //int count = 1;
						lbl_progressreport.setText(" Getting Folder " + Folder);
						if (folderf.getContainerClass().contains("IPF.Appointment")) {

							if (folderf.getContentCount() > 0) {

								MessageInfoCollection messageInfoCollection = null;
								try {
									messageInfoCollection = folderf.getContents();
								} catch (Exception e1) {

									e1.printStackTrace();
								}

								if (!(messageInfoCollection == null)) {

									int messagesize;
									if (demo) {
										if (messageInfoCollection.size() <= All_Data.demo_count) {
											messagesize = messageInfoCollection.size();
										} else {
											messagesize = All_Data.demo_count;
										}

									} else {
										messagesize = messageInfoCollection.size();
									}

									for (int i = 0; i < messagesize; i++) {
										try {

//											if (stop) {
//												break;
//											}
											if (stop) {
												break;
											}
											if ((i % 100) == 0) {
												System.gc();

											}

											MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

											MapiMessage message1 = pst.extractMessage(messageInfo);
											MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
											MailConversionOptions de = new MailConversionOptions();
											de.setConvertAsTnef(true);
											MailMessage mess = message1.toMailMessage(de);
											if (chckbxMigrateOrBackup.isSelected()) {
												mess.getAttachments().clear();
											}
											MapiMessage message = MapiMessage.fromMailMessage(mess, d);

											if (message.getMessageClass().equals("IPM.Appointment")
													|| message.getMessageClass().contains("IPM.Schedule.Meeting")) {

												try {
													MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();
													ExchangeFolderInfo subfolderInfo[] = new ExchangeFolderInfo[] {
															null };
													if (!clientforexchange_output.folderExists(
															clientforexchange_output.getMailboxInfo().getCalendarUri(),
															calendertime + "/" + Folder, subfolderInfo)) {
														scm = clientforexchange_output.createFolder(
																clientforexchange_output.getMailboxInfo()
																		.getCalendarUri(),
																calendertime + "/" + Folder, null, "IPF.Appointment")
																.getUri();
													}
													cal.save(
															temppathm + File.separator
																	+ mf.namingconventionmapi(message) + ".ics",
															AppointmentSaveFormat.Ics);
													File file = new File(temppathm + File.separator
															+ mf.namingconventionmapi(message) + ".ics");
													AppointmentLoadOptions optiona = new AppointmentLoadOptions();
													optiona.getIgnoreSmtpAddressCheck();
													Appointment calDoc = Appointment.load(
															temppathm + File.separator
																	+ mf.namingconventionmapi(message) + ".ics",
															optiona);
													clientforexchange_output.createAppointment(calDoc, scm);
													count_destination++;
													file.delete();
												} catch (OutOfMemoryError ep) {
													mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
															+ mf.namingconventionmapi(message));
												} catch (Exception e) {
													mf.logger.warning("Exception : " + e.getMessage() + "  "
															+ mf.namingconventionmapi(message)
															+ System.lineSeparator());
													e.printStackTrace();
													continue;
												}

											}

											lbl_progressreport.setText(
													"  Total Message Saved Count  " + count_destination + "  " + Folder
															+ "   Extarcting messsage " + message.getSubject());

										} catch (Exception e) {
											continue;
										}

									}

								}
							} else if (folderf.getContainerClass().contains("IPF.Task")
									|| folderf.getContainerClass().contains("IPF.StickyNote")) {

								if (folderf.getContentCount() > 0) {

									MessageInfoCollection messageInfoCollection = folderf.getContents();
									int messagesize;
									if (demo) {
										if (messageInfoCollection.size() <= All_Data.demo_count) {
											messagesize = messageInfoCollection.size();
										} else {
											messagesize = All_Data.demo_count;
										}

									} else {
										messagesize = messageInfoCollection.size();
									}

									for (int i = 0; i < messagesize; i++) {
										try {

//											if (stop) {
//												break;
//											}
											if (stop) {
												break;
											}
											if ((i % 100) == 0) {
												System.gc();

											}

											MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

											MapiMessage message1 = pst.extractMessage(messageInfo);
											MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
											MailConversionOptions de = new MailConversionOptions();
											de.setConvertAsTnef(true);
											MailMessage mess = message1.toMailMessage(de);
											if (chckbxMigrateOrBackup.isSelected()) {
												mess.getAttachments().clear();
											}
											MapiMessage message = MapiMessage.fromMailMessage(mess, d);
											String taskuri = clientforexchange_output.getMailboxInfo().getTasksUri();

											Date Receiveddate = message.getDeliveryTime();
											if (messageInfo.getMessageClass().equals("IPM.StickyNote")
													|| messageInfo.getMessageClass().equals("IPM.Task")) {
												try {

													MapiTask task = null;
													Boolean checktask = false;
													if (messageInfo.getMessageClass().equals("IPM.Task")) {
														task = (MapiTask) message.toMapiMessageItem();
													}

													if (chckbxRemoveDuplicacy.isSelected()) {
														String input = "";
														if (messageInfo.getMessageClass().equals("IPM.Task")) {
															input = duplicacymapiTask(task);
														}

														if (!listduplictask.contains(input)) {
															System.out.println("Not a duplicate message");
															listduplictask.add(input);

															if (task_box.isSelected()) {
																if (Receiveddate.after(taskfilterstartdate)
																		&& Receiveddate.before(taskfilterenddate)) {
																	psttask(task, Receiveddate, message, taskuri,
																			checktask, messageInfo);
																	count_destination++;
																} else if (Receiveddate.equals(taskfilterstartdate)
																		|| Receiveddate.equals(taskfilterenddate)) {
																	psttask(task, Receiveddate, message, taskuri,
																			checktask, messageInfo);
																	count_destination++;

																}

															} else {
																psttask(task, Receiveddate, message, taskuri, checktask,
																		messageInfo);
																count_destination++;

															}

														}
													} else {

														if (task_box.isSelected()) {
															if (Receiveddate.after(taskfilterstartdate)
																	&& Receiveddate.before(taskfilterenddate)) {
																psttask(task, Receiveddate, message, taskuri, checktask,
																		messageInfo);
																count_destination++;
															} else if (Receiveddate.equals(taskfilterstartdate)
																	|| Receiveddate.equals(taskfilterenddate)) {
																psttask(task, Receiveddate, message, taskuri, checktask,
																		messageInfo);
																count_destination++;

															}

														} else {
															psttask(task, Receiveddate, message, taskuri, checktask,
																	messageInfo);
															count_destination++;

														}

													}

												} catch (OutOfMemoryError ep) {
													mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
															+ mf.namingconventionmapi(message));
												} catch (Exception e) {
													mf.logger.warning("Exception : " + e.getMessage() + "Task" + " " + i
															+ mf.namingconventionmapi(message)
															+ System.lineSeparator());
													e.printStackTrace();
													continue;
												}

											}

											lbl_progressreport.setText(
													"  Total Message Saved Count  " + count_destination + "  " + Folder
															+ "   Extarcting messsage " + message.getSubject());

										} catch (Exception e) {
											continue;
										}

									}
								}
							} else if (folderf.getContainerClass().contains("IPF.Contact")) {

								System.out.println(Folder + "Folder Name");
								if (folderf.getContentCount() > 0) {

									ExchangeFolderInfo subfolderInfo[] = new ExchangeFolderInfo[] { null };
									if (!clientforexchange_output.folderExists(
											clientforexchange_output.getMailboxInfo().getContactsUri(),
											calendertime + "/" + Folder, subfolderInfo)) {
										scm = clientforexchange_output.createFolder(
												clientforexchange_output.getMailboxInfo().getContactsUri(),
												calendertime + "/" + Folder, null, "IPF.Contact").getUri();
									}

									MessageInfoCollection messageInfoCollection = folderf.getContents();

									int messagesize;
									if (demo) {
										if (messageInfoCollection.size() <= All_Data.demo_count) {
											messagesize = messageInfoCollection.size();
										} else {
											messagesize = All_Data.demo_count;
										}

									} else {
										messagesize = messageInfoCollection.size();
									}

									for (int i = 0; i < messagesize; i++) {
										try {

//											if (stop) {
//												break;
//											}
											if (stop) {
												break;
											}
											if ((i % 100) == 0) {
												System.gc();

											}

											MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

											MapiMessage message1 = pst.extractMessage(messageInfo);
											MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
											MailConversionOptions de = new MailConversionOptions();
											de.setConvertAsTnef(true);
											MailMessage mess = message1.toMailMessage(de);
											if (chckbxMigrateOrBackup.isSelected()) {
												mess.getAttachments().clear();
											}
											MapiMessage message = MapiMessage.fromMailMessage(mess, d);

											if (message.getMessageClass().equals("IPM.Contact")) {
												try {

													MapiContact con = (MapiContact) message.toMapiMessageItem();
													ByteArrayOutputStream bos = new ByteArrayOutputStream();
													con.save(bos, ContactSaveFormat.VCard);
													ByteArrayInputStream inStream = new ByteArrayInputStream(
															bos.toByteArray());
													MapiContact mapicontact = MapiContact.fromVCard(inStream);
													if (chckbxRemoveDuplicacy.isSelected()) {

														String input = duplicacymapiContact(con);

														if (!listdupliccontact.contains(input)) {
															// System.out.println("Not a duplicate message");
															listdupliccontact.add(input);

															clientforexchange_output.createContact(scm, mapicontact);
															count_destination++;

														} else {
															// System.out.println(" duplicate message");
															// System.out.println(input);

														}
													} else {

														clientforexchange_output.createContact(scm, mapicontact);
														count_destination++;

													}

													count_destination++;

												} catch (Error e) {
													mf.logger.warning(
															"ERROR : " + e.getMessage() + System.lineSeparator());
												} catch (Exception e) {
													mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
															+ i + mf.namingconventionmapi(message)
															+ System.lineSeparator());
													e.printStackTrace();
													continue;
												}

											}

											lbl_progressreport.setText(
													"  Total Message Saved Count  " + count_destination + "  " + Folder
															+ "   Extarcting messsage " + message.getSubject());

										} catch (Exception e) {
											continue;
										}

									}
								}
							} else {

								if (folderf.getContentCount() > 0) {
									MessageInfoCollection messageInfoCollection = folderf.getContents();

									messageaddpst(messageInfoCollection, subfolder1, Folder);
								}
							}
							listdupliccal.clear();
							listduplicacy.clear();
							listdupliccontact.clear();
							listduplictask.clear();
						}
						if (folderf.hasSubFolders()) {
							getsubfolderforPSTOST_defaultrestore(folderf, path2, path, subfolder1);
						}

					}
				}

				path = removefolder(path);
			} catch (Exception e) {
				continue;
			}

		}
	}

	public void ConvertPSTOST_365() {
		pst = PersonalStorage.fromFile(filepath);
		FolderInfo folderInfo2 = pst.getRootFolder();
		Folder = folderInfo2.getDisplayName();
		Folder = Folder.replace(",", "").replace(".", "");
		Folder = getRidOfIllegalFileNameCharacters(Folder);
		Folder = Folder.replaceAll("[\\[\\]]", "");
		Folder = Folder.trim();
		if (Folder.equalsIgnoreCase("")) {
			Folder = "Root Folder";
		}
		path = Folder;
		path1 = Folder;

		MessageInfoCollection messageInfoCollection1 = folderInfo2.getContents();
		Folderuri = clientforexchange_output.createFolder(Folderuri, path).getUri();
		parentfolder = Folderuri;
		int messagesize1;
		listduplicacy.clear();
		if (demo) {
			if (messageInfoCollection1.size() <= All_Data.demo_count) {
				messagesize1 = messageInfoCollection1.size();
			} else {
				messagesize1 = All_Data.demo_count;
			}

		} else {
			messagesize1 = messageInfoCollection1.size();
		}
		System.out.println("message size : " + messagesize1);
		String mailfolder = "";
		for (int i = 0; i < messagesize1; i++) {

//			if (stop) {
//				break;
//			}
			if (stop) {
				break;
			}
			if ((i % 100) == 0) {
				System.gc();
			}
			try {
				MessageInfo messageInfo = (MessageInfo) messageInfoCollection1.get_Item(i);

				MapiMessage message1 = pst.extractMessage(messageInfo);
				MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
				MailConversionOptions de = new MailConversionOptions();
				MailMessage mess1 = message1.toMailMessage(de);
				if (chckbxMigrateOrBackup.isSelected()) {
					mess1.getAttachments().clear();
				}
				MapiMessage message = MapiMessage.fromMailMessage(mess1, d);

				Date Receiveddate = message.getDeliveryTime();
				if (message.getMessageClass().equals("IPM.Contact")) {

					try {
						ExchangeFolderInfo subfolderInfo[] = new ExchangeFolderInfo[] { null };
						if (!clientforexchange_output.folderExists(
								clientforexchange_output.getMailboxInfo().getContactsUri(), calendertime + "/" + Folder,
								subfolderInfo)) {
							mailfolder = clientforexchange_output
									.createFolder(clientforexchange_output.getMailboxInfo().getContactsUri(),
											calendertime + "/" + Folder, null, "IPF.Contact")
									.getUri();
						}

						MapiContact con = (MapiContact) message.toMapiMessageItem();

						clientforexchange_output.createContact(mailfolder, con);
						count_destination++;

					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
						if (e.getMessage()
								.contains("The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
								|| e.getMessage().contains(
										"No connection could be made because the target machine actively refused it.")
								|| e.getMessage().contains("ConnectFailure")
								|| e.getMessage().contains("Rate limit hit")
								|| e.getMessage().contains("Operation failed")
								|| e.getMessage().contains("Operation has been canceled") || e.getMessage().contains(
										"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
							Progressbar.setVisible(false);

							i--;
						}
						connectionHandle(e.getMessage());
						mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
								+ mf.namingconventionmapi(message) + System.lineSeparator());
						e.printStackTrace();
						continue;
					}

				} else if (message.getMessageClass().equals("IPM.Appointment")
						|| message.getMessageClass().contains("IPM.Schedule.Meeting")) {

					try {

						ExchangeFolderInfo subfolderInfo[] = new ExchangeFolderInfo[] { null };
						if (!clientforexchange_output.folderExists(
								clientforexchange_output.getMailboxInfo().getCalendarUri(), calendertime + "/" + Folder,
								subfolderInfo)) {
							mailfolder = clientforexchange_output
									.createFolder(clientforexchange_output.getMailboxInfo().getCalendarUri(),
											calendertime + "/" + Folder, null, "IPF.Appointment")
									.getUri();
						}

						MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();
						cal.save(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics",
								AppointmentSaveFormat.Ics);
						File file = new File(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics");
						AppointmentLoadOptions optiona = new AppointmentLoadOptions();
						optiona.getIgnoreSmtpAddressCheck();
						Appointment calDoc = Appointment
								.load(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics", optiona);

						if (chckbx_calender_box.isSelected()) {
							if (Receiveddate.after(Calenderfilterstartdate)
									&& Receiveddate.before(Calenderfilterenddate)) {
								clientforexchange_output.createAppointment(calDoc, mailfolder);
								count_destination++;
							}

						} else {
							clientforexchange_output.createAppointment(calDoc, mailfolder);
							count_destination++;
						}

						file.delete();
					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
						if (e.getMessage()
								.contains("The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
								|| e.getMessage().contains(
										"No connection could be made because the target machine actively refused it.")
								|| e.getMessage().contains("ConnectFailure")
								|| e.getMessage().contains("Rate limit hit")
								|| e.getMessage().contains("Operation failed")
								|| e.getMessage().contains("Operation has been canceled") || e.getMessage().contains(
										"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
							Progressbar.setVisible(false);

							i--;
						}
						connectionHandle(e.getMessage());
						mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " " + i
								+ mf.namingconventionmapi(message) + System.lineSeparator());
						e.printStackTrace();
						continue;
					}

				} else if (message.getMessageClass().equals("IPM.StickyNote")
						|| message.getMessageClass().equals("IPM.Task")) {
					try {
						MapiTask task = (MapiTask) message.toMapiMessageItem();
						MailConversionOptions options = new MailConversionOptions();
						options.setConvertAsTnef(true);
						String taskuri = clientforexchange_output.getMailboxInfo().getTasksUri();

						Receiveddate = task.getStartDate();
						if (task_box.isSelected()) {
							if (Receiveddate.after(mailfilterstartdate) && Receiveddate.before(mailfilterenddate))
								clientforexchange_output.createTask(taskuri, task);
							count_destination++;
						} else {
							clientforexchange_output.createTask(taskuri, task);
							count_destination++;
						}

					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						e.printStackTrace();
						continue;
					}

				} else {
					try {
						String messageid = mailexchange(mess1, Receiveddate, clientforexchange_output, parentfolder);
						if (((message.getFlags() & MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
							clientforexchange_output.setReadFlag(messageid, true);

						} else {
							clientforexchange_output.setReadFlag(messageid, false);
						}

					}

					catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
						if (e.getMessage().equalsIgnoreCase(
								"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
								|| e.getMessage().contains(
										"No connection could be made because the target machine actively refused it.")
								|| e.getMessage().contains("ConnectFailure")
								|| e.getMessage().contains("Rate limit hit")
								|| e.getMessage().contains("Operation failed")
								|| e.getMessage().contains("Operation has been canceled") || e.getMessage().contains(
										"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
							Progressbar.setVisible(false);

							i--;
						}
						connectionHandle(e.getMessage());
						mf.logger.warning("Exception : " + e.getMessage() + "Message " + " " + i
								+ mf.namingconventionmapi(message) + System.lineSeparator());
						continue;
					}

				}

				lbl_progressreport.setText("  Total Message Saved Count  " + count_destination + "  " + Folder
						+ "   Extarcting messsage " + message.getSubject());

			} catch (Exception e) {
				continue;
			}

		}

		FolderInfoCollection folderInf = pst.getRootFolder().getSubFolders();

		for (int j = 0; j < folderInf.size(); j++) {
			try {

//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				String subfolder = Folderuri;
				// int count = 1;
				FolderInfo folderInfo = folderInf.get_Item(j);
				String Folder = folderInfo.getDisplayName();
				Folder = Folder.replace(",", "").replace(".", "");
				Folder = getRidOfIllegalFileNameCharacters(Folder);
				Folder = Folder.replaceAll("[\\[\\]]", "");
				Folder = Folder.trim();

				path = path1 + File.separator + Folder;

				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (pstfolderlist.get(l).equalsIgnoreCase(path)) {

						lbl_progressreport.setText(" Getting Folder " + Folder);
						// progressBar_message_p3.setStringPainted(true);
						// progressBar_message_p3.setValue(0);

						subfolder = clientforexchange_output.createFolder(subfolder, Folder).getUri();

						MessageInfoCollection messageInfoCollection = folderInfo.getContents();
						listduplicacy.clear();
						int messagesize;
						if (demo) {
							if (messageInfoCollection.size() <= All_Data.demo_count) {
								messagesize = messageInfoCollection.size();
							} else {
								messagesize = All_Data.demo_count;
							}

						} else {
							messagesize = messageInfoCollection.size();
						}

						for (int i = 0; i < messagesize; i++) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if ((i % 100) == 0) {
								System.gc();
							}
							try {
								MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

								MapiMessage message1 = pst.extractMessage(messageInfo);
								MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
								MailConversionOptions de = new MailConversionOptions();
								MailMessage mess = message1.toMailMessage(de);
								if (chckbxMigrateOrBackup.isSelected()) {
									mess.getAttachments().clear();
								}
								MapiMessage message = MapiMessage.fromMailMessage(mess, d);

								Date Receiveddate = message.getDeliveryTime();
								if (message.getMessageClass().equals("IPM.Contact")) {

									try {
										ExchangeFolderInfo subfolderInfo[] = new ExchangeFolderInfo[] { null };
										if (!clientforexchange_output.folderExists(
												clientforexchange_output.getMailboxInfo().getContactsUri(),
												calendertime + "/" + Folder, subfolderInfo)) {
											mailfolder = clientforexchange_output.createFolder(
													clientforexchange_output.getMailboxInfo().getContactsUri(),
													calendertime + "/" + Folder, null, "IPF.Contact").getUri();
										}

										MapiContact con = (MapiContact) message.toMapiMessageItem();

										clientforexchange_output.createContact(mailfolder, con);
										count_destination++;

									} catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {
										System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
										if (e.getMessage().contains(
												"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
												|| e.getMessage().contains(
														"No connection could be made because the target machine actively refused it.")
												|| e.getMessage().contains("ConnectFailure")
												|| e.getMessage().contains("Rate limit hit")
												|| e.getMessage().contains("Operation failed")
												|| e.getMessage().contains("Operation has been canceled")
												|| e.getMessage().contains(
														"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
											Progressbar.setVisible(false);

											i--;
										}
										connectionHandle(e.getMessage());
										mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
												+ mf.namingconventionmapi(message) + System.lineSeparator());
										e.printStackTrace();
										continue;
									}

								} else if (message.getMessageClass().equals("IPM.Appointment")
										|| message.getMessageClass().contains("IPM.Schedule.Meeting")) {

									try {

										ExchangeFolderInfo subfolderInfo[] = new ExchangeFolderInfo[] { null };
										if (!clientforexchange_output.folderExists(
												clientforexchange_output.getMailboxInfo().getCalendarUri(),
												calendertime + "/" + Folder, subfolderInfo)) {
											mailfolder = clientforexchange_output
													.createFolder(
															clientforexchange_output.getMailboxInfo().getCalendarUri(),
															calendertime + "/" + Folder, null, "IPF.Appointment")
													.getUri();
										}

										MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();
										cal.save(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics",
												AppointmentSaveFormat.Ics);
										File file = new File(
												temppathm + File.separator + mf.namingconventionmapi(message) + ".ics");
										AppointmentLoadOptions optiona = new AppointmentLoadOptions();
										optiona.getIgnoreSmtpAddressCheck();
										Appointment calDoc = Appointment.load(
												temppathm + File.separator + mf.namingconventionmapi(message) + ".ics",
												optiona);

										if (chckbx_calender_box.isSelected()) {
											if (Receiveddate.after(Calenderfilterstartdate)
													&& Receiveddate.before(Calenderfilterenddate)) {
												clientforexchange_output.createAppointment(calDoc, mailfolder);
												count_destination++;
											}

										} else {
											clientforexchange_output.createAppointment(calDoc, mailfolder);
											count_destination++;
										}

										file.delete();
									} catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {
										System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
										if (e.getMessage().contains(
												"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
												|| e.getMessage().contains(
														"No connection could be made because the target machine actively refused it.")
												|| e.getMessage().contains("ConnectFailure")
												|| e.getMessage().contains("Rate limit hit")
												|| e.getMessage().contains("Operation failed")
												|| e.getMessage().contains("Operation has been canceled")
												|| e.getMessage().contains(
														"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
											Progressbar.setVisible(false);

											i--;
										}
										connectionHandle(e.getMessage());
										mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " " + i
												+ mf.namingconventionmapi(message) + System.lineSeparator());
										e.printStackTrace();
										continue;
									}

								} else if (message.getMessageClass().equals("IPM.StickyNote")
										|| message.getMessageClass().equals("IPM.Task")) {
									try {
										MapiTask task = (MapiTask) message.toMapiMessageItem();
										MailConversionOptions options = new MailConversionOptions();
										options.setConvertAsTnef(true);
										String taskuri = clientforexchange_output.getMailboxInfo().getTasksUri();

										Receiveddate = task.getStartDate();
										if (task_box.isSelected()) {
											if (Receiveddate.after(mailfilterstartdate)
													&& Receiveddate.before(mailfilterenddate))
												clientforexchange_output.createTask(taskuri, task);
											count_destination++;
										} else {
											clientforexchange_output.createTask(taskuri, task);
											count_destination++;
										}

									} catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {
										e.printStackTrace();
										continue;
									}

								} else {
									try {
										String messageid = mailexchange(mess, Receiveddate, clientforexchange_output,
												subfolder);
										if (((message.getFlags()
												& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
											clientforexchange_output.setReadFlag(messageid, true);

										} else {
											clientforexchange_output.setReadFlag(messageid, false);
										}

									}

									catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {
										System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
										if (e.getMessage().equalsIgnoreCase(
												"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
												|| e.getMessage().contains(
														"No connection could be made because the target machine actively refused it.")
												|| e.getMessage().contains("ConnectFailure")
												|| e.getMessage().contains("Operation failed")
												|| e.getMessage().contains("Rate limit hit")
												|| e.getMessage().contains("Operation has been canceled")
												|| e.getMessage().contains(
														"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
											Progressbar.setVisible(false);

											i--;
										}
										connectionHandle(e.getMessage());
										mf.logger.warning("Exception : " + e.getMessage() + "Message " + " " + i
												+ mf.namingconventionmapi(message) + System.lineSeparator());
										continue;
									}

								}

								lbl_progressreport.setText("  Total Message Saved Count  " + count_destination + "  "
										+ Folder + "   Extarcting messsage " + message.getSubject());

							} catch (Exception e) {
								continue;
							}

						}
					}
				}
				if (folderInfo.hasSubFolders()) {
					getsubfolderpstost_exchange(folderInfo, subfolder);

				}
			} catch (Exception e) {
				continue;
			}

		}

	}

	public void getsubfolderpstost_exchange(FolderInfo folderi, String p) {
		FolderInfoCollection subfolder1 = folderi.getSubFolders();
		for (int k = 0; k < subfolder1.size(); k++) {

			try {
//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				// int count = 1;
				FolderInfo folderInfo = subfolder1.get_Item(k);
				String Folder = folderInfo.getDisplayName();
				Folder = Folder.replace(",", "").replace(".", "");
				Folder = getRidOfIllegalFileNameCharacters(Folder);
				Folder = Folder.replaceAll("[\\[\\]]", "");
				Folder = Folder.trim();

				String mailfolder = "";
				path = path + File.separator + Folder;

				String subfolder = p;
				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}

					if (pstfolderlist.get(l).equalsIgnoreCase(path)) {
						lbl_progressreport.setText("Getting : " + Folder);

						subfolder = clientforexchange_output.createFolder(p, Folder).getUri();
						listduplicacy.clear();

						MessageInfoCollection messageInfoCollection = folderInfo.getContents();

						int messagesize;
						if (demo) {
							if (messageInfoCollection.size() <= All_Data.demo_count) {
								messagesize = messageInfoCollection.size();
							} else {
								messagesize = All_Data.demo_count;
							}

						} else {
							messagesize = messageInfoCollection.size();
						}

						for (int i = 0; i < messagesize; i++) {

							try {
//								if (stop) {
//									break;
//								}
								if (stop) {
									break;
								}
								if ((i % 100) == 0) {
									System.gc();
								}
								MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

								MapiMessage message1 = pst.extractMessage(messageInfo);
								MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
								MailConversionOptions de = new MailConversionOptions();
								MailMessage mess = message1.toMailMessage(de);
								if (chckbxMigrateOrBackup.isSelected()) {
									mess.getAttachments().clear();
								}
								MapiMessage message = MapiMessage.fromMailMessage(mess, d);

								Date Receiveddate = message.getDeliveryTime();
								if (message.getMessageClass().equals("IPM.Contact")) {

									try {
										ExchangeFolderInfo subfolderInfo[] = new ExchangeFolderInfo[] { null };
										if (!clientforexchange_output.folderExists(
												clientforexchange_output.getMailboxInfo().getContactsUri(),
												calendertime + "/" + Folder, subfolderInfo)) {
											mailfolder = clientforexchange_output.createFolder(
													clientforexchange_output.getMailboxInfo().getContactsUri(),
													calendertime + "/" + Folder, null, "IPF.Contact").getUri();
										}

										MapiContact con = (MapiContact) message.toMapiMessageItem();

										clientforexchange_output.createContact(mailfolder, con);
										count_destination++;

									} catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {
										System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
										if (e.getMessage().contains(
												"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
												|| e.getMessage().contains(
														"No connection could be made because the target machine actively refused it.")
												|| e.getMessage().contains("ConnectFailure")
												|| e.getMessage().contains("Rate limit hit")
												|| e.getMessage().contains("Operation failed")
												|| e.getMessage().contains("Operation has been canceled")
												|| e.getMessage().contains(
														"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
											Progressbar.setVisible(false);

											i--;
										}
										connectionHandle(e.getMessage());
										mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
												+ mf.namingconventionmapi(message) + System.lineSeparator());
										e.printStackTrace();
										continue;
									}

								} else if (message.getMessageClass().equals("IPM.Appointment")
										|| message.getMessageClass().contains("IPM.Schedule.Meeting")) {

									try {

										ExchangeFolderInfo subfolderInfo[] = new ExchangeFolderInfo[] { null };
										if (!clientforexchange_output.folderExists(
												clientforexchange_output.getMailboxInfo().getCalendarUri(),
												calendertime + "/" + Folder, subfolderInfo)) {
											mailfolder = clientforexchange_output
													.createFolder(
															clientforexchange_output.getMailboxInfo().getCalendarUri(),
															calendertime + "/" + Folder, null, "IPF.Appointment")
													.getUri();
										}

										MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();
										cal.save(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics",
												AppointmentSaveFormat.Ics);
										File file = new File(
												temppathm + File.separator + mf.namingconventionmapi(message) + ".ics");
										AppointmentLoadOptions optiona = new AppointmentLoadOptions();
										optiona.getIgnoreSmtpAddressCheck();
										Appointment calDoc = Appointment.load(
												temppathm + File.separator + mf.namingconventionmapi(message) + ".ics",
												optiona);

										if (chckbx_calender_box.isSelected()) {
											if (Receiveddate.after(Calenderfilterstartdate)
													&& Receiveddate.before(Calenderfilterenddate)) {
												clientforexchange_output.createAppointment(calDoc, mailfolder);
												count_destination++;
											}

										} else {
											clientforexchange_output.createAppointment(calDoc, mailfolder);
											count_destination++;
										}

										file.delete();
									} catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {
										System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
										if (e.getMessage().contains(
												"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
												|| e.getMessage().contains(
														"No connection could be made because the target machine actively refused it.")
												|| e.getMessage().contains("ConnectFailure")
												|| e.getMessage().contains("Rate limit hit")
												|| e.getMessage().contains("Operation failed")
												|| e.getMessage().contains("Operation has been canceled")
												|| e.getMessage().contains(
														"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
											Progressbar.setVisible(false);

											i--;
										}
										connectionHandle(e.getMessage());
										mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " " + i
												+ mf.namingconventionmapi(message) + System.lineSeparator());
										e.printStackTrace();
										continue;
									}

								} else if (message.getMessageClass().equals("IPM.StickyNote")
										|| message.getMessageClass().equals("IPM.Task")) {
									try {
										MapiTask task = (MapiTask) message.toMapiMessageItem();
										MailConversionOptions options = new MailConversionOptions();
										options.setConvertAsTnef(true);
										String taskuri = clientforexchange_output.getMailboxInfo().getTasksUri();

										Receiveddate = task.getStartDate();
										if (task_box.isSelected()) {
											if (Receiveddate.after(mailfilterstartdate)
													&& Receiveddate.before(mailfilterenddate))
												clientforexchange_output.createTask(taskuri, task);
											count_destination++;
										} else {
											clientforexchange_output.createTask(taskuri, task);
											count_destination++;
										}

									} catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {
										e.printStackTrace();
										continue;
									}

								} else {
									try {
										String messageid = mailexchange(mess, Receiveddate, clientforexchange_output,
												subfolder);
										if (((message.getFlags()
												& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
											clientforexchange_output.setReadFlag(messageid, true);

										} else {
											clientforexchange_output.setReadFlag(messageid, false);
										}
									}

									catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {
										System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
										if (e.getMessage().contains(
												"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
												|| e.getMessage().contains(
														"No connection could be made because the target machine actively refused it.")
												|| e.getMessage().contains("ConnectFailure")
												|| e.getMessage().contains("Operation failed")
												|| e.getMessage().contains("Rate limit hit")
												|| e.getMessage().contains("Operation has been canceled")
												|| e.getMessage().contains(
														"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
											Progressbar.setVisible(false);

											i--;
										}
										connectionHandle(e.getMessage());
										mf.logger.warning("Exception : " + e.getMessage() + "Message " + " " + i
												+ mf.namingconventionmapi(message) + System.lineSeparator());
										continue;
									}

								}
								lbl_progressreport.setText("  Total Message Saved Count  " + count_destination + "  "
										+ Folder + "   Extarcting messsage " + message.getSubject());

							} catch (Exception e) {
								System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
								if (e.getMessage().equalsIgnoreCase(
										"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
										|| e.getMessage().contains(
												"No connection could be made because the target machine actively refused it.")
										|| e.getMessage().contains("ConnectFailure")
										|| e.getMessage().contains("Operation failed")
										|| e.getMessage().contains("Rate limit hit")
										|| e.getMessage().contains("Operation has been canceled")
										|| e.getMessage().contains(
												"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
									Progressbar.setVisible(false);

									i--;
								}
								connectionHandle(e.getMessage());
								continue;
							}

						}
					}
				}
				if (folderInfo.hasSubFolders()) {
					getsubfolderpstost_exchange(folderInfo, subfolder);

				}

				path = removefolder(path);

			} catch (Exception e) {
				System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
				if (e.getMessage()
						.contains("The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
						|| e.getMessage()
								.contains("No connection could be made because the target machine actively refused it.")
						|| e.getMessage().contains("ConnectFailure") || e.getMessage().contains("Operation failed")
						|| e.getMessage().contains("Rate limit hit")
						|| e.getMessage().contains("Operation has been canceled") || e.getMessage().contains(
								"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
					Progressbar.setVisible(false);

				}
				connectionHandle(e.getMessage());
				continue;
			}

		}

	}

	public void ConvertPSTOST_imap() {

		System.out.println("convert pstost file function call");

		pst = PersonalStorage.fromFile(filepath);
		MailConversionOptions options = new MailConversionOptions();

		FolderInfo folderInfo2 = pst.getRootFolder();
		String Folder = folderInfo2.getDisplayName();
		Folder = Folder.replace(",", "").replace(".", "");
		Folder = getRidOfIllegalFileNameCharacters(Folder);
		Folder = Folder.replaceAll("[\\[\\]]", "");
		Folder = Folder.trim();
		if (Folder.equalsIgnoreCase("")) {
			Folder = "Root Folder";
		}
		String path1 = Folder;
		path = path + "." + Folder;
		clientforimap_output.createFolder(iconnforimap_output, path);
		listduplicacy.clear();
		clientforimap_output.selectFolder(iconnforimap_output, path);
		MessageInfoCollection messageInfoCollection1 = folderInfo2.getContents();
		int countr = 0;
		int messagesize1;
		boolean s2 = false;
		if (demo) {
			if (messageInfoCollection1.size() <= All_Data.demo_count) {
				messagesize1 = messageInfoCollection1.size();
			} else {
				messagesize1 = All_Data.demo_count;
			}

		} else {
			messagesize1 = messageInfoCollection1.size();
		}
		System.out.println("message size : " + messagesize1);
		for (int i = 0; i < messagesize1; i++) {

			try {

//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}

				if ((i % 100) == 0) {
					System.gc();
				}
				if ((count_destination % 1000) == 0) {
					if (s2) {
						connectionHandle1();
					}
					s2 = true;
				}

				MessageInfo messageInfo = (MessageInfo) messageInfoCollection1.get_Item(i);

				MapiMessage message1 = pst.extractMessage(messageInfo);
				MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
				MailConversionOptions de = new MailConversionOptions();
				MailMessage mess1 = message1.toMailMessage(de);
				if (chckbxMigrateOrBackup.isSelected()) {
					mess1.getAttachments().clear();
				}
				MapiMessage message = MapiMessage.fromMailMessage(mess1, d);

				MailMessage mess = message.toMailMessage(options);
				Date Receiveddate = message.getDeliveryTime();
				if (message.getMessageClass().equals("IPM.Contact")) {
					MailMessage mapi = new MailMessage();
					try {
						MapiContact con = (MapiContact) message.toMapiMessageItem();
						try {
							mapi.setSubject(con.getSubject());
						} catch (Exception e) {

							mapi.setSubject("");
						}
						try {
							mapi.setBody(con.getBody());
						} catch (Exception e) {

							mapi.setBody("");
						}

						con.save(temppathm + File.separator + countr + "contacttemp.vcf", ContactSaveFormat.VCard);
						File file = new File(temppathm + File.separator + countr + "contacttemp.vcf");
						mapi.addAttachment(new Attachment(temppathm + File.separator + countr + "contacttemp.vcf"));
						file.delete();

						clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
						count_destination++;

						countr++;
					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {

						System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
						if (e.getMessage()
								.contains("The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
								|| e.getMessage().contains("ConnectFailure")
								|| e.getMessage().contains("Rate limit hit")
								|| e.getMessage().contains("Operation failed")
								|| e.getMessage().contains("Operation has been canceled") || e.getMessage().contains(
										"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
							Progressbar.setVisible(false);

							i--;
						}
						connectionHandle(e.getMessage());
						mf.logger.warning(e.getMessage() + "Contact" + " " + countr + System.lineSeparator());
						continue;
					}

				} else if (message.getMessageClass().equals("IPM.Appointment")) {
					MailMessage mapi = new MailMessage();
					try {

						MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

						try {
							mapi.setSubject(cal.getSubject());
						} catch (Exception e) {

							mapi.setSubject("");
						}
						try {
							mapi.setBody(cal.getBody());
						} catch (Exception e) {

							mapi.setBody("");
						}
						cal.save(temppathm + File.separator + countr + "caltemp.ics", AppointmentSaveFormat.Ics);
						File file = new File(temppathm + File.separator + countr + "caltemp.ics");

						mapi.addAttachment(new Attachment(temppathm + File.separator + countr + "caltemp.ics"));
						file.delete();
						Receiveddate = cal.getStartDate();
						if (chckbx_calender_box.isSelected()) {
							if (Receiveddate.after(Calenderfilterstartdate)
									&& Receiveddate.before(Calenderfilterenddate)) {

								clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
								count_destination++;

							} else if (Receiveddate.equals(Calenderfilterstartdate)
									|| Receiveddate.equals(Calenderfilterenddate)) {

								clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
								count_destination++;

							}

						} else {

							clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
							count_destination++;

						}

						countr++;
					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {

						System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
						if (e.getMessage()
								.contains("The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
								|| e.getMessage().contains("ConnectFailure")
								|| e.getMessage().contains("Rate limit hit")
								|| e.getMessage().contains("Operation failed")
								|| e.getMessage().contains("Operation has been canceled")
								|| e.getMessage().contains("Operation failed") || e.getMessage().contains(
										"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
							Progressbar.setVisible(false);

							i--;
						}
						connectionHandle(e.getMessage());

						mf.logger.warning(e.getMessage() + "Calendar" + " " + countr + System.lineSeparator());
						continue;
					}

				} else if (message.getMessageClass().equals("IPM.StickyNote")
						|| message.getMessageClass().equals("IPM.Task")) {

					String s = filetype;
					try {

						filetype = "MSG";
						if (message.getMessageClass().equals("IPM.Task")) {
							MapiTask task = (MapiTask) message.toMapiMessageItem();
							Receiveddate = task.getStartDate();
						}

						if (task_box.isSelected()) {
							if (Receiveddate.after(taskfilterstartdate) && Receiveddate.before(taskfilterenddate)) {
								clientforimap_output.appendMessage(iconnforimap_output, path, mess);
								count_destination++;

							} else if (Receiveddate.equals(taskfilterstartdate)
									|| Receiveddate.equals(taskfilterenddate)) {

								clientforimap_output.appendMessage(iconnforimap_output, path, mess);

								count_destination++;

							}

						} else {

							clientforimap_output.appendMessage(iconnforimap_output, path, mess);
							count_destination++;

						}

					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {

						System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
						if (e.getMessage()
								.contains("The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
								|| e.getMessage().contains("ConnectFailure")
								|| e.getMessage().contains("Rate limit hit")
								|| e.getMessage().contains("Operation failed")
								|| e.getMessage().contains("Operation has been canceled")
								|| e.getMessage().contains("Operation failed") || e.getMessage().contains(
										"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
							Progressbar.setVisible(false);

							i--;
						}
						connectionHandle(e.getMessage());
						mf.logger.warning(e.getMessage() + "Task" + " " + countr + System.lineSeparator());
						continue;
					} finally {
						filetype = s;
					}

				} else {
					try {

						String messageid = mailimap(mess, Receiveddate, path);

						if (((message.getFlags() & MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
							clientforimap_output.changeMessageFlags(iconnforimap_output, messageid,
									ImapMessageFlags.isRead());

						} else {

							clientforimap_output.removeMessageFlags(iconnforimap_output, messageid,
									ImapMessageFlags.isRead());

						}
					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {

						System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
						if (e.getMessage()
								.contains("The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
								|| e.getMessage().contains("ConnectFailure")
								|| e.getMessage().contains("Rate limit hit")
								|| e.getMessage().contains("Operation failed")
								|| e.getMessage().contains("Operation has been canceled")
								|| e.getMessage().contains("Operation failed") || e.getMessage().contains(
										"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
							Progressbar.setVisible(false);

							i--;
						}
						connectionHandle(e.getMessage());
						mf.logger.warning(
								e.getMessage() + "Message" + " " + message.getDeliveryTime() + System.lineSeparator());
						continue;
					}

				}
				lbl_progressreport.setText("Total message Saved Count " + count_destination + "  " + Folder
						+ " Extarcting messsage " + message.getSubject());

			} catch (Exception e) {

				System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
				if (e.getMessage()
						.contains("The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
						|| e.getMessage().contains("ConnectFailure") || e.getMessage().contains("Rate limit hit")
						|| e.getMessage().contains("Operation failed")
						|| e.getMessage().contains("Operation has been canceled")
						|| e.getMessage().contains("Operation failed") || e.getMessage().contains(
								"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
					Progressbar.setVisible(false);

					i--;
				}
				connectionHandle(e.getMessage());

				mf.logger.warning(e.getMessage() + System.lineSeparator());

				continue;

			}

		}

		FolderInfoCollection folderInf = pst.getRootFolder().getSubFolders();

		for (int j = 0; j < folderInf.size(); j++) {
			try {

//				if (stop) {
//					break;
//				}

				if (stop) {
					break;
				}
				FolderInfo folderInfo = folderInf.get_Item(j);

				String Folder1 = folderInfo.getDisplayName();

				Folder1 = Folder.replace(",", "").replace(".", "");
				Folder1 = getRidOfIllegalFileNameCharacters(Folder1);
				Folder1 = Folder1.replaceAll("[\\[\\]]", "");
				Folder1 = Folder1.trim();

				Folder = path1 + File.separator + Folder1;

				String sfolder = Folder;

				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}

					if (stop) {
						break;
					}
					if (pstfolderlist.get(l).equalsIgnoreCase(Folder)) {

						path = path + "." + folderInfo.getDisplayName().replaceAll("[\\[\\]]", "");

						lbl_progressreport.setText(" Getting Folder " + Folder);

						clientforimap_output.createFolder(iconnforimap_output, path);
						clientforimap_output.selectFolder(iconnforimap_output, path);
						listduplicacy.clear();

						MessageInfoCollection messageInfoCollection = folderInfo.getContents();
						int messagesize;
						if (demo) {
							if (messageInfoCollection.size() <= All_Data.demo_count) {
								messagesize = messageInfoCollection.size();
							} else {
								messagesize = All_Data.demo_count;
							}

						} else {
							messagesize = messageInfoCollection.size();
						}
						boolean s22 = false;
						for (int i = 0; i < messagesize; i++) {
							try {

//								if (stop) {
//									break;
//								}
								if (stop) {
									break;
								}
								if ((i % 100) == 0) {
									System.gc();
								}
								if ((count_destination % 1000) == 0) {
									if (s22) {
										connectionHandle1();
									}
									s22 = true;
								}
								MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

								MapiMessage message1 = pst.extractMessage(messageInfo);
								MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
								MailConversionOptions de = new MailConversionOptions();
								MailMessage mess = message1.toMailMessage(de);
								if (chckbxMigrateOrBackup.isSelected()) {
									mess.getAttachments().clear();
								}
								MapiMessage message = MapiMessage.fromMailMessage(mess, d);

								Date Receiveddate = message.getDeliveryTime();
								if (message.getMessageClass().equals("IPM.Contact")) {
									MailMessage mapi = new MailMessage();
									try {
										MapiContact con = (MapiContact) message.toMapiMessageItem();
										try {
											mapi.setSubject(con.getSubject());
										} catch (Exception e) {

											mapi.setSubject("");
										}

										try {
											mapi.setBody(con.getBody());
										} catch (Exception e) {

											mapi.setBody("");
										}
										con.save(temppathm + File.separator + countr + "contacttemp.vcf",
												ContactSaveFormat.VCard);
										File file = new File(temppathm + File.separator + countr + "contacttemp.vcf");
										mapi.addAttachment(new Attachment(
												temppathm + File.separator + countr + "contacttemp.vcf"));
										file.delete();

										clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
										count_destination++;

										countr++;
									} catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {

										if (e.getMessage().contains(
												"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
												|| e.getMessage().contains("ConnectFailure")
												|| e.getMessage().contains("Operation failed")
												|| e.getMessage().contains("Rate limit hit")
												|| e.getMessage().contains("Operation has been canceled")
												|| e.getMessage().contains(
														"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
											Progressbar.setVisible(false);

											i--;
										}
										connectionHandle(e.getMessage());
										mf.logger.warning(
												e.getMessage() + "Contact" + " " + countr + System.lineSeparator());
										continue;
									}

								} else if (message.getMessageClass().equals("IPM.Appointment")) {
									MailMessage mapi = new MailMessage();
									try {

										MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

										try {
											mapi.setSubject(cal.getSubject());
										} catch (Exception e) {

											mapi.setSubject("");
										}
										try {
											mapi.setBody(cal.getBody());
										} catch (Exception e) {

											mapi.setBody("");
										}
										cal.save(temppathm + File.separator + countr + "caltemp.ics",
												AppointmentSaveFormat.Ics);
										File file = new File(temppathm + File.separator + countr + "caltemp.ics");

										mapi.addAttachment(
												new Attachment(temppathm + File.separator + countr + "caltemp.ics"));
										file.delete();
										Receiveddate = cal.getStartDate();
										if (chckbx_calender_box.isSelected()) {
											if (Receiveddate.after(Calenderfilterstartdate)
													&& Receiveddate.before(Calenderfilterenddate)) {

												clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
												count_destination++;

											} else if (Receiveddate.equals(Calenderfilterstartdate)
													|| Receiveddate.equals(Calenderfilterenddate)) {

												clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
												count_destination++;

											}

										} else {

											clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
											count_destination++;

										}

										countr++;
									} catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {

										System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
										if (e.getMessage().contains(
												"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
												|| e.getMessage().contains("ConnectFailure")
												|| e.getMessage().contains("Operation failed")
												|| e.getMessage().contains("Rate limit hit")
												|| e.getMessage().contains("Operation has been canceled")
												|| e.getMessage().contains(
														"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
											Progressbar.setVisible(false);

											i--;
										}
										connectionHandle(e.getMessage());

										mf.logger.warning(
												e.getMessage() + "Calendar" + " " + countr + System.lineSeparator());
										continue;
									}

								} else if (message.getMessageClass().equals("IPM.StickyNote")
										|| message.getMessageClass().equals("IPM.Task")) {

									String s = filetype;
									try {

										filetype = "MSG";
										if (message.getMessageClass().equals("IPM.Task")) {
											MapiTask task = (MapiTask) message.toMapiMessageItem();
											Receiveddate = task.getStartDate();
										}

										if (task_box.isSelected()) {
											if (Receiveddate.after(taskfilterstartdate)
													&& Receiveddate.before(taskfilterenddate)) {
												clientforimap_output.appendMessage(iconnforimap_output, path, mess);
												count_destination++;

											} else if (Receiveddate.equals(taskfilterstartdate)
													|| Receiveddate.equals(taskfilterenddate)) {

												clientforimap_output.appendMessage(iconnforimap_output, path, mess);

												count_destination++;

											}

										} else {

											clientforimap_output.appendMessage(iconnforimap_output, path, mess);
											count_destination++;

										}

									} catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {

										if (e.getMessage().contains(
												"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
												|| e.getMessage().contains("ConnectFailure")
												|| e.getMessage().contains("Operation failed")
												|| e.getMessage().contains("Rate limit hit")
												|| e.getMessage().contains("Operation has been canceled")
												|| e.getMessage().contains(
														"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
											Progressbar.setVisible(false);

											i--;
										}
										connectionHandle(e.getMessage());
										mf.logger.warning(
												e.getMessage() + "Task" + " " + countr + System.lineSeparator());
										continue;
									} finally {
										filetype = s;
									}

								} else {
									try {

										String messageid = mailimap(mess, Receiveddate, path);

										if (((message.getFlags()
												& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
											clientforimap_output.changeMessageFlags(iconnforimap_output, messageid,
													ImapMessageFlags.isRead());

										} else {

											clientforimap_output.removeMessageFlags(iconnforimap_output, messageid,
													ImapMessageFlags.isRead());

										}

									} catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {

										if (e.getMessage().contains(
												"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
												|| e.getMessage().contains("ConnectFailure")
												|| e.getMessage().contains("Operation failed")
												|| e.getMessage().contains("Rate limit hit")
												|| e.getMessage().contains("Operation has been canceled")
												|| e.getMessage().contains(
														"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
											Progressbar.setVisible(false);

											i--;
										}
										connectionHandle(e.getMessage());

										mf.logger.warning(e.getMessage() + "Message" + " " + message.getDeliveryTime()
												+ System.lineSeparator());
										continue;
									}

								}
								lbl_progressreport.setText("Total message Saved Count " + count_destination + "  "
										+ Folder + " Extarcting messsage " + message.getSubject());

							} catch (Exception e) {

								System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
								if (e.getMessage().contains(
										"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
										|| e.getMessage().contains("ConnectFailure")
										|| e.getMessage().contains("Operation failed")
										|| e.getMessage().contains("Rate limit hit")
										|| e.getMessage().contains("Operation has been canceled")
										|| e.getMessage().contains(
												"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
									Progressbar.setVisible(false);

									i--;

								}
								connectionHandle(e.getMessage());

								mf.logger.warning(e.getMessage() + System.lineSeparator());

								continue;

							}

						}
					}
				}
				if (folderInfo.hasSubFolders()) {
					getsubfolderforpstost_imap(folderInfo, sfolder);
				}
				path = path.replace("." + folderInfo.getDisplayName(), "");
			} catch (Exception e) {

				System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
				if (e.getMessage()
						.contains("The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
						|| e.getMessage().contains("ConnectFailure") || e.getMessage().contains("Operation failed")
						|| e.getMessage().contains("Rate limit hit")
						|| e.getMessage().contains("Operation has been canceled") || e.getMessage().contains(
								"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
					Progressbar.setVisible(false);

				}
				connectionHandle(e.getMessage());
				mf.logger.warning(e.getMessage() + System.lineSeparator());

				continue;

			}

		}

	}

	public void getsubfolderforpstost_imap(FolderInfo f, String sfolder) {
		FolderInfoCollection subfolder = f.getSubFolders();

		for (int k = 0; k < subfolder.size(); k++) {

			try {

//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				FolderInfo folderf = subfolder.get_Item(k);

				String Folder = folderf.getDisplayName();
				Folder = Folder.replace(",", "").replace(".", "");
				Folder = getRidOfIllegalFileNameCharacters(Folder);
				Folder = Folder.replaceAll("[\\[\\]]", "");
				Folder = Folder.trim();

				sfolder = sfolder + File.separator + Folder;

				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (pstfolderlist.get(l).equalsIgnoreCase(sfolder)) {

						lbl_progressreport.setText("Getting Folder " + Folder);

						path = path + "." + Folder;
						clientforimap_output.createFolder(iconnforimap_output, path);
						clientforimap_output.selectFolder(iconnforimap_output, path);
						listduplicacy.clear();
						int countr = 1;
						MessageInfoCollection messageInfoCollection = null;
						try {
							messageInfoCollection = folderf.getContents();
						} catch (Exception e1) {

							e1.printStackTrace();
						}

						if (!(messageInfoCollection == null)) {

							boolean s22 = false;
							int messagesize;
							if (demo) {
								if (messageInfoCollection.size() <= All_Data.demo_count) {
									messagesize = messageInfoCollection.size();
								} else {
									messagesize = All_Data.demo_count;
								}

							} else {
								messagesize = messageInfoCollection.size();
							}

							for (int i = 0; i < messagesize; i++) {
								try {
//									if (stop) {
//										break;
//									}
									if (stop) {
										break;
									}
									if ((i % 100) == 0) {
										System.gc();
									}
									if ((count_destination % 1000) == 0) {
										if (s22) {
											connectionHandle1();
										}
										s22 = true;
									}

									MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

									MapiMessage message1 = pst.extractMessage(messageInfo);
									MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
									MailConversionOptions de = new MailConversionOptions();
									MailMessage mess = message1.toMailMessage(de);
									if (chckbxMigrateOrBackup.isSelected()) {
										mess.getAttachments().clear();
									}
									MapiMessage message = MapiMessage.fromMailMessage(mess, d);

									Date Receiveddate = message.getDeliveryTime();
									if (message.getMessageClass().equals("IPM.Contact")) {
										MailMessage mapi = new MailMessage();
										try {
											MapiContact con = (MapiContact) message.toMapiMessageItem();
											try {
												mapi.setSubject(con.getSubject());
											} catch (Exception e) {

												mapi.setSubject("");
											}
											try {
												mapi.setBody(con.getBody());
											} catch (Exception e) {

												mapi.setBody("");
											}
											con.save(temppathm + File.separator + mf.namingconventionmapi(message)
													+ ".vcf", ContactSaveFormat.VCard);
											File file = new File(temppathm + File.separator
													+ mf.namingconventionmapi(message) + ".vcf");
											mapi.addAttachment(new Attachment(temppathm + File.separator
													+ mf.namingconventionmapi(message) + ".vcf"));
											file.delete();

											clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
											count_destination++;

											countr++;
										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {

											System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
											if (e.getMessage().contains(
													"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
													|| e.getMessage().contains("ConnectFailure")
													|| e.getMessage().contains("Operation failed")
													|| e.getMessage().contains("Operation has been canceled")
													|| e.getMessage().contains(
															"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
												Progressbar.setVisible(false);

												i--;
											}
											connectionHandle(e.getMessage());
											mf.logger.warning(
													e.getMessage() + "Contact" + " " + countr + System.lineSeparator());
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.Appointment")) {
										MailMessage mapi = new MailMessage();
										try {

											MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

											try {
												mapi.setSubject(cal.getSubject());
											} catch (Exception e) {

												mapi.setSubject("");
											}
											try {
												mapi.setBody(cal.getBody());
											} catch (Exception e) {

												mapi.setBody("");
											}
											cal.save(temppathm + File.separator + mf.namingconventionmapi(message)
													+ ".ics", AppointmentSaveFormat.Ics);
											File file = new File(temppathm + File.separator
													+ mf.namingconventionmapi(message) + ".ics");

											mapi.addAttachment(new Attachment(temppathm + File.separator
													+ mf.namingconventionmapi(message) + ".ics"));
											file.delete();
											Receiveddate = cal.getStartDate();
											if (chckbx_calender_box.isSelected()) {
												if (Receiveddate.after(Calenderfilterstartdate)
														&& Receiveddate.before(Calenderfilterenddate)) {

													clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
													count_destination++;

												} else if (Receiveddate.equals(Calenderfilterstartdate)
														|| Receiveddate.equals(Calenderfilterenddate)) {

													clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
													count_destination++;

												}

											} else {

												clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
												count_destination++;

											}

											countr++;
										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {

											System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
											if (e.getMessage().contains(
													"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
													|| e.getMessage().contains("ConnectFailure")
													|| e.getMessage().contains("Operation failed")
													|| e.getMessage().contains("Operation has been canceled")
													|| e.getMessage().contains(
															"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
												Progressbar.setVisible(false);

												i--;
											}
											connectionHandle(e.getMessage());
											mf.logger.warning(e.getMessage() + "Calendar" + " " + countr
													+ System.lineSeparator());
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.StickyNote")
											|| message.getMessageClass().equals("IPM.Task")) {

										String s = filetype;
										try {

											filetype = "MSG";
											if (message.getMessageClass().equals("IPM.Task")) {
												MapiTask task = (MapiTask) message.toMapiMessageItem();
												Receiveddate = task.getStartDate();
											}

											if (task_box.isSelected()) {
												if (Receiveddate.after(taskfilterstartdate)
														&& Receiveddate.before(taskfilterenddate)) {
													clientforimap_output.appendMessage(iconnforimap_output, path, mess);
													count_destination++;

												} else if (Receiveddate.equals(taskfilterstartdate)
														|| Receiveddate.equals(taskfilterenddate)) {

													clientforimap_output.appendMessage(iconnforimap_output, path, mess);

													count_destination++;

												}

											} else {

												clientforimap_output.appendMessage(iconnforimap_output, path, mess);
												count_destination++;

											}

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {

											System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
											if (e.getMessage().contains(
													"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
													|| e.getMessage().contains("ConnectFailure")
													|| e.getMessage().contains("Operation failed")
													|| e.getMessage().contains("Rate limit hit")
													|| e.getMessage().contains("Operation has been canceled")
													|| e.getMessage().contains(
															"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
												Progressbar.setVisible(false);

												i--;
											}
											connectionHandle(e.getMessage());
											mf.logger.warning(
													e.getMessage() + "Task" + " " + countr + System.lineSeparator());
											continue;
										} finally {
											filetype = s;
										}

									} else {
										try {

											String messageid = mailimap(mess, Receiveddate, path);

											if (((message.getFlags()
													& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
												clientforimap_output.changeMessageFlags(iconnforimap_output, messageid,
														ImapMessageFlags.isRead());

											} else {

												clientforimap_output.removeMessageFlags(iconnforimap_output, messageid,
														ImapMessageFlags.isRead());

											}

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {

											if (e.getMessage().contains(
													"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
													|| e.getMessage().contains("ConnectFailure")
													|| e.getMessage().contains("Operation failed")
													|| e.getMessage().contains("Rate limit hit")
													|| e.getMessage().contains("Operation has been canceled")
													|| e.getMessage().contains(
															"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
												Progressbar.setVisible(false);

												i--;
											}
											connectionHandle(e.getMessage());
											mf.logger.warning(e.getMessage() + "Message" + " "
													+ message.getDeliveryTime() + System.lineSeparator());
											continue;
										}

									}
									lbl_progressreport.setText("Total message Saved Count " + count_destination + "  "
											+ Folder + " Extarcting messsage " + message.getSubject());

								} catch (Exception e) {

									if (e.getMessage().equalsIgnoreCase(
											"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
											|| e.getMessage().contains("ConnectFailure")
											|| e.getMessage().contains("Operation failed")
											|| e.getMessage().contains("Rate limit hit")
											|| e.getMessage().contains("Operation has been canceled")
											|| e.getMessage().contains(
													"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
										Progressbar.setVisible(false);

										i--;
									}
									connectionHandle(e.getMessage());
									mf.logger.warning(e.getMessage() + System.lineSeparator());

									continue;
								}
							}
						}
					}
				}
				if (folderf.hasSubFolders()) {

					getsubfolderforpstost_imap(folderf, sfolder);
				}

				path = path.replace("." + Folder, "");
				sfolder = removefolder(sfolder);
			} catch (Exception e) {

				if (e.getMessage()
						.contains("The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
						|| e.getMessage().contains("Operation failed") || e.getMessage().contains("Rate limit hit")
						|| e.getMessage().contains("Operation failed")
						|| e.getMessage().contains("Operation has been canceled") || e.getMessage().contains(
								"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
					Progressbar.setVisible(false);

				}
				connectionHandle(e.getMessage());
			}

		}

	}

	public void ConvertPSTOST_gmail() {

		System.out.println("fiel converted in to go daddy");

		pst = PersonalStorage.fromFile(filepath);
		MailConversionOptions options = new MailConversionOptions();

		FolderInfo folderInfo2 = pst.getRootFolder();
		String Folder = folderInfo2.getDisplayName();
		Folder = Folder.replace(",", "").replace(".", "");
		Folder = getRidOfIllegalFileNameCharacters(Folder);
		Folder = Folder.replaceAll("[\\[\\]]", "");
		Folder = Folder.trim();
		if (Folder.equalsIgnoreCase("")) {
			Folder = "Root Folder";
		}
		if (filetype.equalsIgnoreCase("GoDaddy email")) {
			Folder = Folder.replaceAll("[^a-zA-Z0-9]", "");

		}
		String path1 = Folder;
		path = path + "/" + Folder;
		clientforimap_output.createFolder(iconnforimap_output, path);
		listduplicacy.clear();
		clientforimap_output.selectFolder(iconnforimap_output, path);
		MessageInfoCollection messageInfoCollection1 = folderInfo2.getContents();
		int countr = 0;
		int messagesize1;

		boolean s2 = false;
		if (demo) {
			if (messageInfoCollection1.size() <= All_Data.demo_count) {
				messagesize1 = messageInfoCollection1.size();
			} else {
				messagesize1 = All_Data.demo_count;
			}

		} else {
			messagesize1 = messageInfoCollection1.size();
		}
		System.out.println("message size : " + messagesize1);
		for (int i = 0; i < messagesize1; i++) {

			try {

//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				if ((i % 100) == 0) {
					System.gc();
				}
				if ((count_destination % 500) == 0) {
					if (s2) {
						connectionHandle1();
					}
					s2 = true;
				}

				MessageInfo messageInfo = (MessageInfo) messageInfoCollection1.get_Item(i);

				MapiMessage message1 = pst.extractMessage(messageInfo);
				MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
				MailConversionOptions de = new MailConversionOptions();
				MailMessage mess1 = message1.toMailMessage(de);
				if (chckbxMigrateOrBackup.isSelected()) {
					mess1.getAttachments().clear();
				}
				MapiMessage message = MapiMessage.fromMailMessage(mess1, d);

				MailMessage mess = message.toMailMessage(options);
				Date Receiveddate = message.getDeliveryTime();
				if (message.getMessageClass().equals("IPM.Contact")) {
					MailMessage mapi = new MailMessage();
					try {
						MapiContact con = (MapiContact) message.toMapiMessageItem();
						try {
							mapi.setSubject(con.getSubject());
						} catch (Exception e) {

							mapi.setSubject("");
						}
						try {
							mapi.setBody(con.getBody());
						} catch (Exception e) {

							mapi.setBody("");
						}

						con.save(temppathm + File.separator + countr + "contacttemp.vcf", ContactSaveFormat.VCard);
						File file = new File(temppathm + File.separator + countr + "contacttemp.vcf");
						mapi.addAttachment(new Attachment(temppathm + File.separator + countr + "contacttemp.vcf"));
						file.delete();

						clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
						count_destination++;

						countr++;
					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {

						System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
						if (e.getMessage()
								.contains("The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
								|| e.getMessage().contains("ConnectFailure")
								|| e.getMessage().contains("Rate limit hit")
								|| e.getMessage().contains("Operation failed")
								|| e.getMessage().contains("Operation has been canceled") || e.getMessage().contains(
										"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
							Progressbar.setVisible(false);

							i--;
						}
						connectionHandle(e.getMessage());
						mf.logger.warning(e.getMessage() + "Contact" + " " + countr + System.lineSeparator());
						continue;
					}

				} else if (message.getMessageClass().equals("IPM.Appointment")) {
					MailMessage mapi = new MailMessage();
					try {

						MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

						try {
							mapi.setSubject(cal.getSubject());
						} catch (Exception e) {

							mapi.setSubject("");
						}
						try {
							mapi.setBody(cal.getBody());
						} catch (Exception e) {

							mapi.setBody("");
						}
						cal.save(temppathm + File.separator + countr + "caltemp.ics", AppointmentSaveFormat.Ics);
						File file = new File(temppathm + File.separator + countr + "caltemp.ics");

						mapi.addAttachment(new Attachment(temppathm + File.separator + countr + "caltemp.ics"));
						file.delete();
						Receiveddate = cal.getStartDate();
						if (chckbx_calender_box.isSelected()) {
							if (Receiveddate.after(Calenderfilterstartdate)
									&& Receiveddate.before(Calenderfilterenddate)) {

								clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
								count_destination++;

							} else if (Receiveddate.equals(Calenderfilterstartdate)
									|| Receiveddate.equals(Calenderfilterenddate)) {

								clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
								count_destination++;

							}

						} else {

							clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
							count_destination++;

						}

						countr++;
					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {

						System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
						if (e.getMessage()
								.contains("The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
								|| e.getMessage().contains("ConnectFailure")
								|| e.getMessage().contains("Rate limit hit")
								|| e.getMessage().contains("Operation failed")
								|| e.getMessage().contains("Operation has been canceled")
								|| e.getMessage().contains("Operation failed") || e.getMessage().contains(
										"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
							Progressbar.setVisible(false);

							i--;
						}
						connectionHandle(e.getMessage());

						mf.logger.warning(e.getMessage() + "Calendar" + " " + countr + System.lineSeparator());
						continue;
					}

				} else if (message.getMessageClass().equals("IPM.StickyNote")
						|| message.getMessageClass().equals("IPM.Task")) {

					String s = filetype;
					try {

						filetype = "MSG";
						if (message.getMessageClass().equals("IPM.Task")) {
							MapiTask task = (MapiTask) message.toMapiMessageItem();
							Receiveddate = task.getStartDate();
						}

						if (task_box.isSelected()) {
							if (Receiveddate.after(taskfilterstartdate) && Receiveddate.before(taskfilterenddate)) {
								clientforimap_output.appendMessage(iconnforimap_output, path, mess);
								count_destination++;

							} else if (Receiveddate.equals(taskfilterstartdate)
									|| Receiveddate.equals(taskfilterenddate)) {

								clientforimap_output.appendMessage(iconnforimap_output, path, mess);

								count_destination++;

							}

						} else {

							clientforimap_output.appendMessage(iconnforimap_output, path, mess);
							count_destination++;

						}

					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {

						System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
						if (e.getMessage()
								.contains("The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
								|| e.getMessage().contains("ConnectFailure")
								|| e.getMessage().contains("Rate limit hit")
								|| e.getMessage().contains("Operation failed")
								|| e.getMessage().contains("Operation has been canceled")
								|| e.getMessage().contains("Operation failed") || e.getMessage().contains(
										"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
							Progressbar.setVisible(false);

							i--;
						}
						connectionHandle(e.getMessage());
						mf.logger.warning(e.getMessage() + "Task" + " " + countr + System.lineSeparator());
						continue;
					} finally {
						filetype = s;
					}

				} else {
					try {

						String messageid = mailimap(mess, Receiveddate, path);

						if (((message.getFlags() & MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
							clientforimap_output.changeMessageFlags(iconnforimap_output, messageid,
									ImapMessageFlags.isRead());

						} else {

							clientforimap_output.removeMessageFlags(iconnforimap_output, messageid,
									ImapMessageFlags.isRead());

						}

					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {

						StringWriter sw = new StringWriter();
						e.printStackTrace(new PrintWriter(sw));
						String exceptionAsString = sw.toString();

						System.out.println(e.getMessage());
						if (exceptionAsString.contains("Message too large")) {
							File f = new File((System.getProperty("user.home") + File.separator + "Desktop")
									+ File.separator + calendertime + File.separator + "Attachment" + File.separator
									+ mf.namingconventionmapi(message));
							f.mkdirs();
							mf.logger.info(
									"Message size was greater than allowed size so attachment has been deleted and saved in "
											+ f.getAbsolutePath());
							for (MapiAttachment attachment : message.getAttachments()) {

								attachment.save(f.getAbsolutePath() + File.separator
										+ getRidOfIllegalFileNameCharacters(attachment.getLongFileName()));

							}
							try {
								mess.getAttachments().clear();

								System.out.println(mess.getAttachments().size());

								String messageid = mailimap(mess, Receiveddate, path);
								if (!messageid.equalsIgnoreCase("")) {
									if (((message.getFlags()
											& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
										clientforimap_output.changeMessageFlags(iconnforimap_output, messageid,
												ImapMessageFlags.isRead());

									} else {

										clientforimap_output.removeMessageFlags(iconnforimap_output, messageid,
												ImapMessageFlags.isRead());

									}
								}
							} catch (Exception e1) {

								e1.printStackTrace();
							}

						} else if (e.getMessage()
								.contains("The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
								|| e.getMessage().contains("ConnectFailure")
								|| e.getMessage().contains("Rate limit hit")
								|| e.getMessage().contains("Operation failed")
								|| e.getMessage().contains("Operation has been canceled")
								|| e.getMessage().contains("Operation failed") || e.getMessage().contains(
										"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
							Progressbar.setVisible(false);

							i--;
						}
						connectionHandle(e.getMessage());

						mf.logger.warning(
								e.getMessage() + "Message" + " " + message.getDeliveryTime() + System.lineSeparator());
						continue;
					}

				}
				lbl_progressreport.setText("Total message Saved Count " + count_destination + "  " + Folder
						+ " Extarcting messsage " + message.getSubject());

			} catch (Exception e) {

				if (e.getMessage()
						.contains("The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
						|| e.getMessage().contains("ConnectFailure") || e.getMessage().contains("Rate limit hit")
						|| e.getMessage().contains("Operation failed")
						|| e.getMessage().contains("Operation has been canceled")
						|| e.getMessage().contains("Operation failed") || e.getMessage().contains(
								"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
					Progressbar.setVisible(false);

					i--;
				}
				connectionHandle(e.getMessage());

				mf.logger.warning(e.getMessage() + System.lineSeparator());

				continue;

			}

		}

		FolderInfoCollection folderInf = pst.getRootFolder().getSubFolders();

		for (int j = 0; j < folderInf.size(); j++) {
			try {

//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				boolean s22 = false;
				FolderInfo folderInfo = folderInf.get_Item(j);
				// int count = 1;
				String Folder1 = folderInfo.getDisplayName();
				Folder1 = Folder1.replace(",", "").replace(".", "");
				Folder1 = getRidOfIllegalFileNameCharacters(Folder1);
				Folder1 = Folder1.replaceAll("[\\[\\]]", "");
				Folder1 = Folder1.trim();

				Folder = path1 + File.separator + Folder1;

				String sfolder = Folder;

				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (pstfolderlist.get(l).equalsIgnoreCase(Folder)) {

						lbl_progressreport.setText("Getting Folder " + Folder);

						String fol = folderInfo.getDisplayName().replaceAll("[\\[\\]]", "");

						if (filetype.equalsIgnoreCase("GoDaddy email")) {
							fol = fol.replaceAll("[^a-zA-Z0-9]", "");

						}

						path = path + "/" + fol;

						clientforimap_output.createFolder(iconnforimap_output, path);
						clientforimap_output.selectFolder(iconnforimap_output, path);

						listduplicacy.clear();
						MessageInfoCollection messageInfoCollection = folderInfo.getContents();
						int messagesize;
						if (demo) {
							if (messageInfoCollection.size() <= All_Data.demo_count) {
								messagesize = messageInfoCollection.size();
							} else {
								messagesize = All_Data.demo_count;
							}

						} else {
							messagesize = messageInfoCollection.size();
						}

						for (int i = 0; i < messagesize; i++) {

							try {
//								if (stop) {
//									break;
//								}
								if (stop) {
									break;
								}
								if ((i % 100) == 0) {
									System.gc();
								}
								if ((count_destination % 1000) == 0) {
									if (s22) {
										connectionHandle1();
									}
									s22 = true;
								}

								MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

								MapiMessage message1 = pst.extractMessage(messageInfo);
								MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
								MailConversionOptions de = new MailConversionOptions();
								MailMessage mess = message1.toMailMessage(de);
								if (chckbxMigrateOrBackup.isSelected()) {
									mess.getAttachments().clear();
								}
								MapiMessage message = MapiMessage.fromMailMessage(mess, d);

								Date Receiveddate = message.getDeliveryTime();
								if (message.getMessageClass().equals("IPM.Contact")) {
									MailMessage mapi = new MailMessage();
									try {
										MapiContact con = (MapiContact) message.toMapiMessageItem();
										try {
											mapi.setSubject(con.getSubject());
										} catch (Exception e) {

											mapi.setSubject("");
										}
										try {
											mapi.setBody(con.getBody());
										} catch (Exception e) {

											mapi.setBody("");
										}

										con.save(temppathm + File.separator + i + mf.namingconventionmapi(message)
												+ ".vcf", ContactSaveFormat.VCard);
										File file = new File(temppathm + File.separator + i
												+ mf.namingconventionmapi(message) + ".vcf");
										mapi.addAttachment(new Attachment(temppathm + File.separator + i
												+ mf.namingconventionmapi(message) + ".vcf"));
										file.delete();

										clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
										count_destination++;
										// count++;

									} catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {
										if (e.getMessage().equalsIgnoreCase(
												"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
												|| e.getMessage().equalsIgnoreCase("ConnectFailure")
												|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
												|| e.getMessage().contains("Operation failed")
												|| e.getMessage().contains("Rate limit hit")
												|| e.getMessage().equalsIgnoreCase(
														"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
											Progressbar.setVisible(false);

											i--;

										}
										connectionHandle(e.getMessage());
										mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " " + i
												+ mf.namingconventionmapi(message) + System.lineSeparator());
										e.printStackTrace();
										continue;
									}

								} else if (message.getMessageClass().equals("IPM.Appointment")) {
									MailMessage mapi = new MailMessage();
									try {

										MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

										try {
											mapi.setSubject(cal.getSubject());
										} catch (Exception e) {

											mapi.setSubject("");
										}
										try {
											mapi.setBody(cal.getBody());
										} catch (Exception e) {

											mapi.setBody("");
										}
										cal.save(temppathm + File.separator + i + mf.namingconventionmapi(message)
												+ ".ics", AppointmentSaveFormat.Ics);
										File file = new File(temppathm + File.separator + i
												+ mf.namingconventionmapi(message) + ".ics");

										mapi.addAttachment(new Attachment(temppathm + File.separator + i
												+ mf.namingconventionmapi(message) + ".ics"));
										file.delete();
										Receiveddate = cal.getStartDate();
										if (chckbx_calender_box.isSelected()) {
											if (Receiveddate.after(Calenderfilterstartdate)
													&& Receiveddate.before(Calenderfilterenddate)) {

												clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
												count_destination++;
												// count++;
											} else if (Receiveddate.equals(Calenderfilterstartdate)
													|| Receiveddate.equals(Calenderfilterenddate)) {

												clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
												count_destination++;
												// count++;
											}

										} else {

											clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
											count_destination++;
											// count++;
										}

									} catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {
										System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
										if (e.getMessage().equalsIgnoreCase(
												"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
												|| e.getMessage().equalsIgnoreCase("ConnectFailure")
												|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
												|| e.getMessage().contains("Operation failed")
												|| e.getMessage().contains("Rate limit hit")
												|| e.getMessage().equalsIgnoreCase(
														"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
											Progressbar.setVisible(false);

											i--;

										}
										connectionHandle(e.getMessage());
										mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " " + i
												+ mf.namingconventionmapi(message) + System.lineSeparator());
										e.printStackTrace();
										continue;
									}

								} else if (message.getMessageClass().equals("IPM.StickyNote")
										|| message.getMessageClass().equals("IPM.Task")) {

									String s = filetype;
									try {

										filetype = "MSG";
										if (message.getMessageClass().equals("IPM.Task")) {
											MapiTask task = (MapiTask) message.toMapiMessageItem();
											Receiveddate = task.getStartDate();
										}

										if (task_box.isSelected()) {
											if (Receiveddate.after(taskfilterstartdate)
													&& Receiveddate.before(taskfilterenddate)) {
												clientforimap_output.appendMessage(iconnforimap_output, path, mess);
												count_destination++;
												// count++;
											} else if (Receiveddate.equals(taskfilterstartdate)
													|| Receiveddate.equals(taskfilterenddate)) {

												clientforimap_output.appendMessage(iconnforimap_output, path, mess);

												count_destination++;
												// count++;

											}

										} else {

											clientforimap_output.appendMessage(iconnforimap_output, path, mess);
											count_destination++;
											// count++;

										}

									} catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {
										System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
										if (e.getMessage().equalsIgnoreCase(
												"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
												|| e.getMessage().equalsIgnoreCase("ConnectFailure")
												|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
												|| e.getMessage().contains("Operation failed")
												|| e.getMessage().contains("Rate limit hit")
												|| e.getMessage().equalsIgnoreCase(
														"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
											Progressbar.setVisible(false);

											i--;

										}
										connectionHandle(e.getMessage());
										mf.logger.warning("Exception : " + e.getMessage() + "Task" + " " + i
												+ mf.namingconventionmapi(message) + System.lineSeparator());
										e.printStackTrace();
										continue;
									} finally {
										filetype = s;
									}

								} else {
									try {

										String messageid = mailimap(mess, Receiveddate, path);

										if (((message.getFlags()
												& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
											clientforimap_output.changeMessageFlags(iconnforimap_output, messageid,
													ImapMessageFlags.isRead());

										} else {

											clientforimap_output.removeMessageFlags(iconnforimap_output, messageid,
													ImapMessageFlags.isRead());

										}
									} catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {
										System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());

										StringWriter sw = new StringWriter();
										e.printStackTrace(new PrintWriter(sw));
										String exceptionAsString = sw.toString();

										System.out.println(e.getMessage());
										if (exceptionAsString.contains("Message too large")) {
											File f = new File(
													(System.getProperty("user.home") + File.separator + "Desktop")
															+ File.separator + calendertime + File.separator
															+ "Attachment" + File.separator
															+ mf.namingconventionmapi(message));
											f.mkdirs();
											mf.logger.info(
													"Message size was greater than allowed size so attachment has been deleted and saved in "
															+ f.getAbsolutePath());
											for (MapiAttachment attachment : message.getAttachments()) {

												attachment.save(f.getAbsolutePath() + File.separator
														+ getRidOfIllegalFileNameCharacters(
																attachment.getLongFileName()));

											}
											try {
												mess.getAttachments().clear();

												System.out.println(mess.getAttachments().size());

												String messageid = mailimap(mess, Receiveddate, path);
												if (!messageid.equalsIgnoreCase("")) {
													if (((message.getFlags()
															& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
														clientforimap_output.changeMessageFlags(iconnforimap_output,
																messageid, ImapMessageFlags.isRead());

													} else {

														clientforimap_output.removeMessageFlags(iconnforimap_output,
																messageid, ImapMessageFlags.isRead());

													}
												}
											} catch (Exception e1) {

												e1.printStackTrace();
											}

										} else if (e.getMessage().equalsIgnoreCase(
												"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
												|| e.getMessage().equalsIgnoreCase("ConnectFailure")
												|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
												|| e.getMessage().contains("Operation failed")
												|| e.getMessage().contains("Rate limit hit")
												|| e.getMessage().equalsIgnoreCase(
														"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
											Progressbar.setVisible(false);

											i--;

										}
										connectionHandle(e.getMessage());
										mf.logger.warning("Exception : " + e.getMessage() + "Message " + " " + i
												+ mf.namingconventionmapi(message) + System.lineSeparator());
										e.printStackTrace();
										continue;
									}

								}
								lbl_progressreport.setText("  Total Message Saved Count  " + count_destination + "  "
										+ Folder + "   Extarcting messsage " + message.getSubject());

							} catch (Exception e) {
								System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
								if (e.getMessage().equalsIgnoreCase(
										"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
										|| e.getMessage().equalsIgnoreCase("ConnectFailure")
										|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
										|| e.getMessage().contains("Operation failed")
										|| e.getMessage().contains("Rate limit hit") || e.getMessage().equalsIgnoreCase(
												"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
									Progressbar.setVisible(false);

									i--;

								}
								connectionHandle(e.getMessage());
								continue;
							}

						}
					}
				}
				if (folderInfo.hasSubFolders()) {
					getsubfolderforpstost_gmail(folderInfo, sfolder);
				}
				path = removefoldergmail(path);
			} catch (Exception e) {
				continue;
			}

		}

	}

	public void getsubfolderforpstost_gmail(FolderInfo f, String sfolder) {
		FolderInfoCollection subfolder = f.getSubFolders();

		for (int k = 0; k < subfolder.size(); k++) {
			try {
//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				FolderInfo folderf = subfolder.get_Item(k);

				String Folder = folderf.getDisplayName();
				Folder = Folder.replace(",", "").replace(".", "");
				Folder = getRidOfIllegalFileNameCharacters(Folder);
				Folder = Folder.replaceAll("[\\[\\]]", "");
				Folder = Folder.trim();
				if (filetype.equalsIgnoreCase("GoDaddy email")) {
					Folder = Folder.replaceAll("[^a-zA-Z0-9]", "");

				}

				sfolder = sfolder + File.separator + Folder;

				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}

					if (pstfolderlist.get(l).equalsIgnoreCase(sfolder)) {

						path = path + "/" + Folder;
						lbl_progressreport.setText("Getting : " + Folder);
						clientforimap_output.createFolder(iconnforimap_output, path);
						clientforimap_output.selectFolder(iconnforimap_output, path);
						listduplicacy.clear();
						MessageInfoCollection messageInfoCollection = null;
						try {
							messageInfoCollection = folderf.getContents();
						} catch (Exception e1) {

							e1.printStackTrace();
						}

						if (!(messageInfoCollection == null)) {

							boolean s22 = false;
							int messagesize;
							if (demo) {
								if (messageInfoCollection.size() <= All_Data.demo_count) {
									messagesize = messageInfoCollection.size();
								} else {
									messagesize = All_Data.demo_count;
								}

							} else {
								messagesize = messageInfoCollection.size();
							}

							for (int i = 0; i < messagesize; i++) {
								try {
//									if (stop) {
//										break;
//									}
									if (stop) {
										break;
									}
									if ((i % 100) == 0) {
										System.gc();
									}
									if ((count_destination % 500) == 0) {
										if (s22) {
											connectionHandle1();
										}
										s22 = true;
									}

									// int count = 1;

									MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

									MapiMessage message1 = pst.extractMessage(messageInfo);
									MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
									MailConversionOptions de = new MailConversionOptions();
									MailMessage mess = message1.toMailMessage(de);
									if (chckbxMigrateOrBackup.isSelected()) {
										mess.getAttachments().clear();
									}
									MapiMessage message = MapiMessage.fromMailMessage(mess, d);
									Date Receiveddate = message.getDeliveryTime();
									if (message.getMessageClass().equals("IPM.Contact")) {
										MailMessage mapi = new MailMessage();
										try {
											MapiContact con = (MapiContact) message.toMapiMessageItem();
											try {
												mapi.setSubject(con.getSubject());
											} catch (Exception e) {

												mapi.setSubject("");
											}
											try {
												mapi.setBody(con.getBody());
											} catch (Exception e) {

												mapi.setBody("");
											}

											con.save(temppathm + File.separator + i + mf.namingconventionmapi(message)
													+ ".vcf", ContactSaveFormat.VCard);
											File file = new File(temppathm + File.separator + i
													+ mf.namingconventionmapi(message) + ".vcf");
											mapi.addAttachment(new Attachment(temppathm + File.separator + i
													+ mf.namingconventionmapi(message) + ".vcf"));
											file.delete();

											clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
											count_destination++;
										} catch (Exception e) {
											System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
											if (e.getMessage().equalsIgnoreCase(
													"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
													|| e.getMessage().equalsIgnoreCase("ConnectFailure")
													|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
													|| e.getMessage().contains("Operation failed")
													|| e.getMessage().contains("Rate limit hit")
													|| e.getMessage().equalsIgnoreCase(
															"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
												Progressbar.setVisible(false);

												i--;

											}
											connectionHandle(e.getMessage());
											mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
													+ System.lineSeparator());
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.Appointment")) {
										MailMessage mapi = new MailMessage();
										try {

											MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

											try {
												mapi.setSubject(cal.getSubject());
											} catch (Exception e) {

												mapi.setSubject("");
											}
											try {
												mapi.setBody(cal.getBody());
											} catch (Exception e) {

												mapi.setBody("");
											}
											cal.save(temppathm + File.separator + i + mf.namingconventionmapi(message)
													+ ".ics", AppointmentSaveFormat.Ics);
											File file = new File(temppathm + File.separator + i
													+ mf.namingconventionmapi(message) + ".ics");

											mapi.addAttachment(new Attachment(temppathm + File.separator + i
													+ mf.namingconventionmapi(message) + ".ics"));
											file.delete();
											if (chckbx_calender_box.isSelected()) {
												if (Receiveddate.after(Calenderfilterstartdate)
														&& Receiveddate.before(Calenderfilterenddate)) {
													clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
													count_destination++;
												}

											} else {
												clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
												count_destination++;
											}

										} catch (Exception e) {
											System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
											if (e.getMessage().equalsIgnoreCase(
													"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
													|| e.getMessage().equalsIgnoreCase("ConnectFailure")
													|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
													|| e.getMessage().contains("Operation failed")
													|| e.getMessage().contains("Rate limit hit")
													|| e.getMessage().equalsIgnoreCase(
															"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
												Progressbar.setVisible(false);

												i--;

											}
											connectionHandle(e.getMessage());
											mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
													+ System.lineSeparator());
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.StickyNote")
											|| message.getMessageClass().equals("IPM.Task")) {
										try {
											MapiTask task = (MapiTask) message.toMapiMessageItem();

											Receiveddate = task.getStartDate();
											if (task_box.isSelected()) {
												if (Receiveddate.after(taskfilterstartdate)
														&& Receiveddate.before(taskfilterenddate))
													clientforimap_output.appendMessage(iconnforimap_output, path, mess);
											} else {
												clientforimap_output.appendMessage(iconnforimap_output, path, mess);
											}
											count_destination++;
										} catch (Exception e) {
											System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
											if (e.getMessage().equalsIgnoreCase(
													"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
													|| e.getMessage().equalsIgnoreCase("ConnectFailure")
													|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
													|| e.getMessage().contains("Operation failed")
													|| e.getMessage().contains("Rate limit hit")
													|| e.getMessage().equalsIgnoreCase(
															"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
												Progressbar.setVisible(false);

												i--;

											}
											connectionHandle(e.getMessage());
											mf.logger.warning("Exception : " + e.getMessage() + "Task" + " "
													+ System.lineSeparator());
											continue;
										}

									} else {
										try {

											String messageid = mailimap(mess, Receiveddate, path);

											if (((message.getFlags()
													& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
												clientforimap_output.changeMessageFlags(iconnforimap_output, messageid,
														ImapMessageFlags.isRead());

											} else {

												clientforimap_output.removeMessageFlags(iconnforimap_output, messageid,
														ImapMessageFlags.isRead());

											}
										} catch (Exception e) {
											System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());

											StringWriter sw = new StringWriter();
											e.printStackTrace(new PrintWriter(sw));
											String exceptionAsString = sw.toString();

											System.out.println(e.getMessage());
											if (exceptionAsString.contains("Message too large")) {
												File f1 = new File(
														(System.getProperty("user.home") + File.separator + "Desktop")
																+ File.separator + calendertime + File.separator
																+ "Attachment" + File.separator
																+ mf.namingconventionmapi(message));
												f1.mkdirs();
												mf.logger.info(
														"Message size was greater than allowed size so attachment has been deleted and saved in "
																+ f1.getAbsolutePath());
												for (MapiAttachment attachment : message.getAttachments()) {

													attachment.save(f1.getAbsolutePath() + File.separator
															+ getRidOfIllegalFileNameCharacters(
																	attachment.getLongFileName()));

												}
												try {
													mess.getAttachments().clear();

													System.out.println(mess.getAttachments().size());

													String messageid = mailimap(mess, Receiveddate, path);
													if (!messageid.equalsIgnoreCase("")) {
														if (((message.getFlags()
																& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
															clientforimap_output.changeMessageFlags(iconnforimap_output,
																	messageid, ImapMessageFlags.isRead());

														} else {

															clientforimap_output.removeMessageFlags(iconnforimap_output,
																	messageid, ImapMessageFlags.isRead());

														}
													}
												} catch (Exception e1) {

													e1.printStackTrace();
												}

											} else if (e.getMessage().equalsIgnoreCase(
													"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
													|| e.getMessage().equalsIgnoreCase("ConnectFailure")
													|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
													|| e.getMessage().contains("Operation failed")
													|| e.getMessage().contains("Rate limit hit")
													|| e.getMessage().equalsIgnoreCase(
															"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
												Progressbar.setVisible(false);

												i--;

											}
											connectionHandle(e.getMessage());
											mf.logger.warning("Exception : " + e.getMessage() + "Message" + " "
													+ System.lineSeparator());
											continue;
										}

									}
									lbl_progressreport.setText("Total Message Saved Count  " + count_destination + "  "
											+ Folder + "   Extarcting messsage " + message.getSubject());

								} catch (Exception e) {
									if (e.getMessage().equalsIgnoreCase(
											"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
											|| e.getMessage().equalsIgnoreCase("ConnectFailure")
											|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
											|| e.getMessage().contains("Operation failed")
											|| e.getMessage().contains("Rate limit hit")
											|| e.getMessage().equalsIgnoreCase(
													"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
										Progressbar.setVisible(false);

										i--;

									}
									connectionHandle(e.getMessage());
									continue;
								}

							}
						}
					}
				}
				if (folderf.hasSubFolders()) {

					getsubfolderforpstost_gmail(folderf, sfolder);
				}

				path = removefoldergmail(path);
				sfolder = removefolder(sfolder);
				// System.out.println(path);
			} catch (Exception e) {
				continue;
			}
		}

	}

	public void ConvertPSTOST_csv() throws Exception {

		System.out.println("convert to csv file");

		pst = PersonalStorage.fromFile(filepath);

		FolderInfo folderInfo2 = pst.getRootFolder();
		Folder = folderInfo2.getDisplayName();
		Folder = Folder.replace(",", "").replace(".", "");
		Folder = getRidOfIllegalFileNameCharacters(Folder);
		Folder = Folder.replaceAll("[\\[\\]]", "");
		Folder = Folder.trim();
		if (Folder.equalsIgnoreCase("")) {
			Folder = "Root Folder";
		}
		String path1 = "";

		path = path + File.separator + Folder;
		path1 = Folder;

		MessageInfoCollection messageInfoCollection1 = folderInfo2.getContents();

		new File(destination_path + File.separator + path).mkdirs();

		File file1 = new File(destination_path + File.separator + path + File.separator
				+ getRidOfIllegalFileNameCharacters(Folder) + ".csv");

		FileWriter outputfile1 = new FileWriter(file1);
		CSVWriter writer1 = new CSVWriter(outputfile1);

		if (Folder.contains("contact") || Folder.contains("Contact") || Folder.contains("Address")) {

			String[] header = { "First Name", "Middle Name", "Last Name", "Prefix", "Email 1 Address Type",
					"Email 1 Display Name", "Email 1 Email Address", "Email 1 Fax Number", "Email 2 Address Type",
					"Email 2 Display Name", "Email 2 Email Address", "Email 2 Fax Number", "Email 3 Address Type",
					"Email 3 Display Name", "Email 3 Email Address", "Email 3 Display Name", "Home Fax Email Address",
					"Home Fax Address Type", "Home Fax Display Name", "Home  Fax Number", "Primary Fax Email Address",
					"Primary Fax Address Type", "Primary Fax Display Name", "Primary Fax Number",
					"Business Fax Email Address", "Business Fax Address Type", "Business Fax Display Name",
					"Business Fax Number", "Wedding Anniversary", "Birthday", "File Under", "File Under ID",
					"Generation", "Tittle", "Account", "Business Home Page", "Computer Network Name", "Customer ID",
					"Free Business Location", "FTP Site", "Gender", "Government ID Number", "Hobbies", "HTML",
					"Instant Messaging Address", "Language", "Location", "Notes", "Organizational ID Number",
					"Personal Home Page", "Referred by Name", "Spouse Name", " Home Address", "Home Address City",
					"Home Address Country", "Home Address Country Code", "Home Address Postal  Code",
					"Home Address Post Office Box", "Home Address State Or Province", "Other Address",
					"Other Address City", "Other Address Country", "Other Address Country",
					"Other Address Country Code", "Other Address Postal Code", "Other Address Post Office Box",
					"Other Address State Or Province", "Work Address", "Work Address City", "Work Address Country",
					"Work Address Country", "Work Address Country Code", "Work Address Postal Code",
					"Work Address Post Office Box", "Work Address State Or Province", "Assistant", "Company Name",
					"Depart Name", "Manager Name", "Office Location", "Profession", "Assistant Telephone Number",
					"Business2 Telephone Number", "Business Telephone Number", "Callback Telephone Number",
					"Car Telephone Number", "Company Main Telephone Number", "Home2 Telephone Number",
					"Home Telephone Number", "ISDN Number", "Mobile Telephone Number", "Other Telephone Number",
					"Pager Telephone Number", "Primary Telephone Number", "Radio Telephone Number", "Telex Number",
					"TTY/TDD Phone Number" };

			writer.writeNext(header);
		} else if (Folder.contains("Calender") || Folder.contains("calender") || Folder.contains("Appiontment")) {

			String[] header = { "Subject", "Start Date", "End Date", "All day event", "Reminder on/off	Reminder Time",
					"Meeting Workspace URL", "Billing Information", "Categories", "Location", "Mileage" };

			writer.writeNext(header);
		}

		else {

			String[] header1 = { "Date", "Subject", "Body", "From", "To", "CC:", "Attachment path" };

			writer1.writeNext(header1);

		}

		int messagesize1;
		listduplicacy.clear();

		if (demo) {
			if (messageInfoCollection1.size() <= All_Data.demo_count) {
				messagesize1 = messageInfoCollection1.size();
			} else {
				messagesize1 = All_Data.demo_count;
			}

		} else {
			messagesize1 = messageInfoCollection1.size();
		}
		System.out.println("message size : " + messagesize1);
		for (int i = 0; i < messagesize1; i++) {

			try {

//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				if ((i % 100) == 0) {
					System.gc();
				}
				MessageInfo messageInfo = (MessageInfo) messageInfoCollection1.get_Item(i);

				MapiMessage message1 = pst.extractMessage(messageInfo);
				MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
				MailConversionOptions de = new MailConversionOptions();
				MailMessage mess1 = message1.toMailMessage(de);
				if (chckbxMigrateOrBackup.isSelected()) {
					mess1.getAttachments().clear();
				}
				MapiMessage message = MapiMessage.fromMailMessage(mess1, d);

				Date Receiveddate = message.getDeliveryTime();
				if (message.getMessageClass().equals("IPM.Contact")) {
					try {
						Mapimess_CSV(message, writer1);

						// count++;

					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " " + i
								+ mf.namingconventionmapi(message) + System.lineSeparator());

						e.printStackTrace();
						continue;
					}

				} else if (message.getMessageClass().equals("IPM.Appointment")) {

					try {

						MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

						Receiveddate = cal.getStartDate();
						if (chckbx_calender_box.isSelected()) {
							if (Receiveddate.after(Calenderfilterstartdate)
									&& Receiveddate.before(Calenderfilterenddate)) {
								Mapimess_CSV(message, writer1);

								// count++;
							} else if (Receiveddate.equals(Calenderfilterstartdate)
									|| Receiveddate.equals(Calenderfilterenddate)) {

								Mapimess_CSV(message, writer1);

								// count++;
							}

						} else {

							Mapimess_CSV(message, writer1);

							// count++;
						}

					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " " + i
								+ mf.namingconventionmapi(message) + System.lineSeparator());
						e.printStackTrace();
						continue;
					}

				} else if (message.getMessageClass().equals("IPM.StickyNote")
						|| message.getMessageClass().equals("IPM.Task")) {

					String s = filetype;
					try {

						filetype = "MSG";
						if (message.getMessageClass().equals("IPM.Task")) {
							MapiTask task = (MapiTask) message.toMapiMessageItem();
							Receiveddate = task.getStartDate();
						}

						if (task_box.isSelected()) {
							if (Receiveddate.after(taskfilterstartdate) && Receiveddate.before(taskfilterenddate)) {
								Mapimessage_file(message);
							} else if (Receiveddate.equals(taskfilterstartdate)
									|| Receiveddate.equals(taskfilterenddate)) {

								Mapimess_CSV(message, writer1);

								// count++;
							}

						} else {

							Mapimess_CSV(message, writer1);

							// count++;

						}

					} catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						mf.logger.warning("Exception : " + e.getMessage() + "Tasks" + " " + i
								+ mf.namingconventionmapi(message) + System.lineSeparator());
						e.printStackTrace();
						continue;
					} finally {
						filetype = s;
					}

				} else {
					try {
						mapicsv(message, Receiveddate, writer1);
					}

					catch (OutOfMemoryError ep) {
						mf.logger.info(
								"Out of memory error:" + ep.getMessage() + "  " + mf.namingconventionmapi(message));
					} catch (Exception e) {
						mf.logger.warning("Exception : " + e.getMessage() + "Message " + " " + i
								+ mf.namingconventionmapi(message) + System.lineSeparator());
						e.printStackTrace();
						continue;
					}

				}

				lbl_progressreport.setText("Total Message Saved Count  " + count_destination + "  " + Folder
						+ "   Extarcting messsage " + message.getSubject());

			} catch (Exception e) {
				continue;
			}

		}

		writer1.close();

		FolderInfoCollection folderInf = pst.getRootFolder().getSubFolders();

		for (int j = 0; j < folderInf.size(); j++) {
			try {
//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}

				FolderInfo folderInfo = folderInf.get_Item(j);
				String Folder = folderInfo.getDisplayName();
				Folder = Folder.replace(",", "").replace(".", "");
				Folder = getRidOfIllegalFileNameCharacters(Folder);
				Folder = Folder.replaceAll("[\\[\\]]", "");
				Folder = Folder.trim();

				// progressBar_message_p3.setStringPainted(true);
				// progressBar_message_p3.setValue(0);
				path = path + File.separator + Folder;
				String path3 = path1 + File.separator + Folder;

				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (pstfolderlist.get(l).trim().equalsIgnoreCase(path3)) {

						lbl_progressreport.setText("Getting Folder " + Folder);

						new File(destination_path + File.separator + path).mkdirs();

						File file = new File(
								destination_path + File.separator + path + File.separator + Folder + ".csv");

						FileWriter outputfile = new FileWriter(file);

						CSVWriter writer = new CSVWriter(outputfile);

						if (Folder.contains("contact") || Folder.contains("Contact") || Folder.contains("Address")) {

//							

//								

							String[] header = { "First Name", "Middle Name", "Last Name", "Prefix",
									"Email 1 Address Type", "Email 1 Display Name", "Email 1 Email Address",
									"Email 1 Fax Number", "Email 2 Address Type", "Email 2 Display Name",
									"Email 2 Email Address", "Email 2 Fax Number", "Email 3 Address Type",
									"Email 3 Display Name", "Email 3 Email Address", "Email 3 Display Name",
									"Home Fax Email Address", "Home Fax Address Type", "Home Fax Display Name",
									"Home  Fax Number", "Primary Fax Email Address", "Primary Fax Address Type",
									"Primary Fax Display Name", "Primary Fax Number", "Business Fax Email Address",
									"Business Fax Address Type", "Business Fax Display Name", "Business Fax Number",
									"Wedding Anniversary", "Birthday", "File Under", "File Under ID", "Generation",
									"Tittle", "Account", "Business Home Page", "Computer Network Name", "Customer ID",
									"Free Business Location", "FTP Site", "Gender", "Government ID Number", "Hobbies",
									"HTML", "Instant Messaging Address", "Language", "Location", "Notes",
									"Organizational ID Number", "Personal Home Page", "Referred by Name", "Spouse Name",
									" Home Address", "Home Address City", "Home Address Country",
									"Home Address Country Code", "Home Address Postal  Code",
									"Home Address Post Office Box", "Home Address State Or Province", "Other Address",
									"Other Address City", "Other Address Country", "Other Address Country",
									"Other Address Country Code", "Other Address Postal Code",
									"Other Address Post Office Box", "Other Address State Or Province", "Work Address",
									"Work Address City", "Work Address Country", "Work Address Country",
									"Work Address Country Code", "Work Address Postal Code",
									"Work Address Post Office Box", "Work Address State Or Province", "Assistant",
									"Company Name", "Depart Name", "Manager Name", "Office Location", "Profession",
									"Assistant Telephone Number", "Business2 Telephone Number",
									"Business Telephone Number", "Callback Telephone Number", "Car Telephone Number",
									"Company Main Telephone Number", "Home2 Telephone Number", "Home Telephone Number",
									"ISDN Number", "Mobile Telephone Number", "Other Telephone Number",
									"Pager Telephone Number", "Primary Telephone Number", "Radio Telephone Number",
									"Telex Number", "TTY/TDD Phone Number" };

							writer.writeNext(header);
						} else if (Folder.contains("Calender") || Folder.contains("calender")
								|| Folder.contains("Appiontment")) {

							String[] header = { "Subject", "Start Date", "End Date", "All day event",
									"Reminder on/off	Reminder Time", "Meeting Workspace URL", "Billing Information",
									"Categories", "Location", "Mileage" };

							writer.writeNext(header);
						}

						else {

							String[] header = { "Date", "Subject", "Body", "From", "To", "CC:", "Attachment path" };

							writer.writeNext(header);
						}

						MessageInfoCollection messageInfoCollection = folderInfo.getContents();
						listduplicacy.clear();
						int messagesize;
						if (demo) {
							if (messageInfoCollection.size() <= All_Data.demo_count) {
								messagesize = messageInfoCollection.size();
							} else {
								messagesize = All_Data.demo_count;
							}

						} else {
							messagesize = messageInfoCollection.size();
						}

						for (int i = 0; i < messagesize; i++) {

							try {

//								if (stop) {
//									break;
//								}
								if (stop) {
									break;
								}
								if ((i % 100) == 0) {
									System.gc();
								}
								MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

								MapiMessage message1 = pst.extractMessage(messageInfo);
								MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
								MailConversionOptions de = new MailConversionOptions();
								MailMessage mess = message1.toMailMessage(de);
								if (chckbxMigrateOrBackup.isSelected()) {
									mess.getAttachments().clear();
								}
								MapiMessage message = MapiMessage.fromMailMessage(mess, d);

								Date Receiveddate = message.getDeliveryTime();
								if (message.getMessageClass().equals("IPM.Contact")) {
									try {
										Mapimess_CSV(message, writer);

										// count++;

									} catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {
										mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " " + i
												+ mf.namingconventionmapi(message) + System.lineSeparator());

										e.printStackTrace();
										continue;
									}

								} else if (message.getMessageClass().equals("IPM.Appointment")) {

									try {

										MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

										Receiveddate = cal.getStartDate();
										if (chckbx_calender_box.isSelected()) {
											if (Receiveddate.after(Calenderfilterstartdate)
													&& Receiveddate.before(Calenderfilterenddate)) {
												Mapimess_CSV(message, writer);

												// count++;
											} else if (Receiveddate.equals(Calenderfilterstartdate)
													|| Receiveddate.equals(Calenderfilterenddate)) {

												Mapimess_CSV(message, writer);

												// count++;
											}

										} else {

											Mapimess_CSV(message, writer);

											// count++;
										}

									} catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {
										mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " " + i
												+ mf.namingconventionmapi(message) + System.lineSeparator());
										e.printStackTrace();
										continue;
									}

								} else if (message.getMessageClass().equals("IPM.StickyNote")
										|| message.getMessageClass().equals("IPM.Task")) {

									String s = filetype;
									try {

										filetype = "MSG";
										if (message.getMessageClass().equals("IPM.Task")) {
											MapiTask task = (MapiTask) message.toMapiMessageItem();
											Receiveddate = task.getStartDate();
										}

										if (task_box.isSelected()) {
											if (Receiveddate.after(taskfilterstartdate)
													&& Receiveddate.before(taskfilterenddate)) {
												Mapimessage_file(message);
											} else if (Receiveddate.equals(taskfilterstartdate)
													|| Receiveddate.equals(taskfilterenddate)) {
												Mapimess_CSV(message, writer);
											}

										} else {

											Mapimess_CSV(message, writer);

										}

									} catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {
										mf.logger.warning("Exception : " + e.getMessage() + "Tasks" + " " + i
												+ mf.namingconventionmapi(message) + System.lineSeparator());
										e.printStackTrace();
										continue;
									} finally {
										filetype = s;
									}

								} else {
									try {
										mapicsv(message, Receiveddate, writer);
									}

									catch (OutOfMemoryError ep) {
										mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
												+ mf.namingconventionmapi(message));
									} catch (Exception e) {
										mf.logger.warning("Exception : " + e.getMessage() + "Message " + " " + i
												+ mf.namingconventionmapi(message) + System.lineSeparator());
										e.printStackTrace();
										continue;
									}

								}

								lbl_progressreport.setText("Total Message Saved Count  " + count_destination + "  "
										+ Folder + "   Extarcting messsage " + message.getSubject());

							} catch (Exception e) {
								continue;
							}

						}

						writer.close();
					}
				}

				if (folderInfo.hasSubFolders()) {
					getsubfolderforPSTOST_CSV(folderInfo, path3);
				}
				path = removefolder(path);
			} catch (Exception e) {
				continue;
			}

		}

	}

	public void getsubfolderforPSTOST_CSV(FolderInfo f, String path3) {
		FolderInfoCollection folderInf = f.getSubFolders();

		for (int j = 0; j < folderInf.size(); j++) {
			try {
//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				FolderInfo folderf = folderInf.get_Item(j);

				String Folder = folderf.getDisplayName();
				Folder = Folder.replace(",", "").replace(".", "");
				Folder = getRidOfIllegalFileNameCharacters(Folder);
				Folder = Folder.replaceAll("[\\[\\]]", "");
				Folder = Folder.trim();

				path = path + File.separator + Folder;
				path3 = path3 + File.separator + Folder;

				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (pstfolderlist.get(l).equalsIgnoreCase(path3)) {
						new File(destination_path + File.separator + path).mkdirs();

						try {
							File file = new File(destination_path + File.separator + path + File.separator
									+ getRidOfIllegalFileNameCharacters(Folder) + ".csv");

							FileWriter outputfile = new FileWriter(file);

							CSVWriter writer = new CSVWriter(outputfile);

							if (Folder.contains("contact") || Folder.contains("Contact")
									|| Folder.contains("Address")) {

//								

								String[] header = { "First Name", "Middle Name", "Last Name", "Prefix",
										"Email 1 Address Type", "Email 1 Display Name", "Email 1 Email Address",
										"Email 1 Fax Number", "Email 2 Address Type", "Email 2 Display Name",
										"Email 2 Email Address", "Email 2 Fax Number", "Email 2 Fax Number",
										"Email 3 Address Type", "Email 3 Display Name", "Email 3 Email Address",
										"Email 3 Display Name", "Home Fax Email Address", "Home Fax Address Type",
										"Home Fax Display Name", "Home  Fax Number", "Primary Fax Email Address",
										"Primary Fax Address Type", "Primary Fax Display Name", "Primary Fax Number",
										"Business Fax Email Address", "Business Fax Address Type",
										"Business Fax Display Name", "Business Fax Number", "Wedding Anniversary",
										"Birthday", "File Under", "File Under ID", "Generation", "Tittle", "Account",
										"Business Home Page", "Computer Network Name", "Customer ID",
										"Free Business Location", "FTP Site", "Gender", "Government ID Number",
										"Hobbies", "HTML", "Instant Messaging Address", "Language", "Location", "Notes",
										"Organizational ID Number", "Personal Home Page", "Referred by Name",
										"Spouse Name", " Home Address", "Home Address City", "Home Address Country",
										"Home Address Country Code", "Home Address Postal  Code",
										"Home Address Post Office Box", "Home Address State Or Province",
										"Other Address", "Other Address City", "Other Address Country",
										"Other Address Country", "Other Address Country Code",
										"Other Address Postal Code", "Other Address Post Office Box",
										"Other Address State Or Province", "Work Address", "Work Address City",
										"Work Address Country", "Work Address Country", "Work Address Country Code",
										"Work Address Postal Code", "Work Address Post Office Box",
										"Work Address State Or Province", "Assistant", "Company Name", "Depart Name",
										"Manager Name", "Office Location", "Profession", "Assistant Telephone Number",
										"Business2 Telephone Number", "Business Telephone Number",
										"Callback Telephone Number", "Car Telephone Number",
										"Company Main Telephone Number", "Home2 Telephone Number",
										"Home Telephone Number", "ISDN Number", "Mobile Telephone Number",
										"Other Telephone Number", "Pager Telephone Number", "Primary Telephone Number",
										"Radio Telephone Number", "Telex Number", "TTY/TDD Phone Number" };

								writer.writeNext(header);
							} else if (Folder.contains("Calender") || Folder.contains("calender")
									|| Folder.contains("Appiontment")) {

								String[] header = { "Subject", "Start Date", "End Date", "All day event",
										"Reminder on/off	Reminder Time", "Meeting Workspace URL",
										"Billing Information", "Categories", "Location", "Mileage" };

								writer.writeNext(header);
							}

							else {

								String[] header = { "Date", "Subject", "Body", "From", "To", "CC:", "Attachment path" };
								writer.writeNext(header);
							}

							MessageInfoCollection messageInfoCollection = null;
							try {
								messageInfoCollection = folderf.getContents();
							} catch (Exception e1) {

								e1.printStackTrace();
							}

							if (!(messageInfoCollection == null)) {

								listduplicacy.clear();
								int messagesize;
								if (demo) {
									if (messageInfoCollection.size() <= All_Data.demo_count) {
										messagesize = messageInfoCollection.size();
									} else {
										messagesize = All_Data.demo_count;
									}

								} else {
									messagesize = messageInfoCollection.size();
								}

								for (int i = 0; i < messagesize; i++) {
									try {
//										if (stop) {
//											break;
//										}
										if (stop) {
											break;
										}
										if ((i % 100) == 0) {
											System.gc();
										}
										MessageInfo messageInfo = (MessageInfo) messageInfoCollection.get_Item(i);

										MapiMessage message1 = pst.extractMessage(messageInfo);
										MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
										MailConversionOptions de = new MailConversionOptions();
										MailMessage mess = message1.toMailMessage(de);
										if (chckbxMigrateOrBackup.isSelected()) {
											mess.getAttachments().clear();
										}
										MapiMessage message = MapiMessage.fromMailMessage(mess, d);

										Date Receiveddate = message.getDeliveryTime();
										if (message.getMessageClass().equals("IPM.Contact")) {
											try {

												Mapimess_CSV(message, writer);

											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
														+ System.lineSeparator());
												continue;
											}

										} else if (message.getMessageClass().equals("IPM.Appointment")) {

											try {

												if (chckbx_calender_box.isSelected()) {
													if (Receiveddate.after(Calenderfilterstartdate)
															&& Receiveddate.before(Calenderfilterenddate))
														Mapimess_CSV(message, writer);

												} else {
													Mapimess_CSV(message, writer);

												}

											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
														+ System.lineSeparator());
												continue;
											}

										} else if (message.getMessageClass().equals("IPM.StickyNote")
												|| message.getMessageClass().equals("IPM.Task")) {
											try {

												MapiTask task = (MapiTask) message.toMapiMessageItem();

												Receiveddate = task.getStartDate();
												if (task_box.isSelected()) {
													if (Receiveddate.after(taskfilterstartdate)
															&& Receiveddate.before(taskfilterenddate))
														Mapimess_CSV(message, writer);

												} else {
													Mapimess_CSV(message, writer);

												}

											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Task" + " "
														+ System.lineSeparator());
												continue;
											}

										} else {
											try {
												mapicsv(message, Receiveddate, writer);
											}

											catch (Exception e) {
												e.printStackTrace();
												continue;
											}

										}

										lbl_progressreport.setText("  Total Message Saved Count  " + count_destination
												+ "  " + Folder + "   Extarcting messsage " + message.getSubject());

									} catch (Exception e) {
										continue;
									}

								}
							}

							writer.close();
						} catch (Exception e) {
							continue;
						}
					}
				}
				if (folderf.hasSubFolders()) {
					getsubfolderforPSTOST_CSV(folderf, path3);
				}
				path3 = path3.replace(File.separator + Folder, "");
				path = removefolder(path);
			} catch (Exception e) {
				continue;
			}
		}

	}

	public void ConvertOLM_file() {
		storage = new OlmStorage(filepath);

		try {
			for (OlmFolder folder : storage.getFolderHierarchy()) {
				String Folder = folder.getName().replaceAll("[\\[\\]]", "").trim();
				String path3 = Folder;
				String clonepath = path;
				path = path + File.separator + Folder;
				foldermessagecount = 0;
				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (pstfolderlist.get(l).equalsIgnoreCase(path3)) {

						lbl_progressreport.setText("Getting Folder " + folder.getName().replaceAll("[\\[\\]]", ""));

						Folder = path;

						if (chckbxMaintainFolderStructure.isSelected()) {
							new File(destination_path + File.separator + path).mkdirs();
							clonepath = path;
						}

						if (folder.hasMessages()) {
							listduplicacy.clear();
							long foldercount = folder.getMessageCount();
							Iterator<MapiMessage> it = storage.enumerateMessages(folder).iterator();
							for (int i11 = 0; i11 < foldercount; i11++) {
								try {
									if (!it.hasNext() || (it.next() == null)) {
										System.out.println("Null");
										continue;
									}
								} catch (Exception e) {
									e.printStackTrace();
								}

								try {
									MapiMessage message1 = it.next();
									MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
									MailConversionOptions de = new MailConversionOptions();
									MailMessage mess = message1.toMailMessage(de);
									if (chckbxMigrateOrBackup.isSelected()) {
										mess.getAttachments().clear();
									}
									Date c = mess.getDate();

									String date = c.toString();
									String[] datearr = date.split("\\s");
									String[] time = datearr[3].split(":");
									int i = Integer.parseInt(time[0]);

									Calendar calendar = new GregorianCalendar();
									TimeZone timeZone = calendar.getTimeZone();
									TimeZone timezone = TimeZone.getTimeZone(timeZone.getID());
									int ms = timezone.getOffset(Calendar.ZONE_OFFSET);
									if (i < 1) {
										time[0] = String.valueOf(i + 12 + (convertMillisintohour(ms)));
									} else {
										time[0] = String.valueOf(i + (convertMillisintohour(ms)));
									}

									int i1 = Integer.parseInt(time[1]);
									time[1] = String.valueOf(i1 + (convertMillisintomin(ms)));

									date = date.replace(datearr[3], time[0] + ":" + time[1] + ":" + time[2]);

									Calendar call = Calendar.getInstance();
									call.setTime(c);
									call.set(Calendar.HOUR_OF_DAY, Integer.parseInt(time[0]));
									call.set(Calendar.MINUTE, Integer.parseInt(time[1]));
									call.set(Calendar.SECOND, Integer.parseInt(time[2]));
									call.set(Calendar.MILLISECOND, 0);
									call.setTimeZone(TimeZone.getDefault());
									SimpleDateFormat sdf = new SimpleDateFormat("MMM dd HH:mm:ss z yyyy");
									System.out.println(sdf.format(call.getTime()));
									String strDate = sdf.format(call.getTime());
									c1 = sdf.parse(strDate);
									mess.setDate(c1);

									MapiMessage message = MapiMessage.fromMailMessage(mess, d);
									int bct = message.getBodyType();
									if (bct == 0) {
										message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
									} else {
										message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
									}
//									if (stop) {
//										break;
//									}
									if (stop) {
										break;
									}
									if (demo) {
										if (foldermessagecount == All_Data.demo_count) {
											break;
										}
									}
									if ((foldermessagecount % 100) == 0) {
										System.gc();
									}

									foldermessagecount++;

									if (message.getMessageClass().equals("IPM.Contact")) {
										try {
											MapiContact con = (MapiContact) message.toMapiMessageItem();

											con.save(
													destination_path + File.separator + clonepath + File.separator
															+ contactname(con) + "_" + foldermessagecount + ".vcf",
													ContactSaveFormat.VCard);
											count_destination++;
											foldermessagecount++;

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
													+ foldermessagecount + mf.namingconventionmapi(message)
													+ System.lineSeparator());
											e.printStackTrace();
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.Appointment")) {

										try {

											MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

											cal.save(
													destination_path + File.separator + clonepath + File.separator
															+ foldermessagecount + "_"
															+ mf.namingconventionforcal(message, cal) + ".ics",
													AppointmentSaveFormat.Ics);
											count_destination++;
											foldermessagecount++;

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
													+ foldermessagecount + mf.namingconventionmapi(message)
													+ System.lineSeparator());
											e.printStackTrace();
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.StickyNote")
											|| message.getMessageClass().equals("IPM.Task")) {
										try {
											Date Receiveddate = message.getDeliveryTime();

											mapifile mf1 = new mapifile(mf, filetype, destination_path, clonepath,
													count_destination, message, Receiveddate, task_box.isSelected(),
													taskfilterstartdate, taskfilterenddate, filepath);
											Thread saveTh = new Thread(mf1);
											saveTh.start();
											saveTh.join();
											count_destination = mf1.k;

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Task" + " "
													+ foldermessagecount + mf.namingconventionmapi(message)
													+ System.lineSeparator());
											e.printStackTrace();
											continue;
										}

									}

									else {

										Date Receiveddate = message.getDeliveryTime();
										mapifile mf1 = new mapifile(mf, filetype, destination_path, clonepath,
												count_destination, message, Receiveddate, task_box.isSelected(),
												taskfilterstartdate, taskfilterenddate, filepath);
										Thread saveTh = new Thread(mf1);
										saveTh.start();
										saveTh.join();
										count_destination = mf1.k;
									}

									lbl_progressreport.setText("Total Message Saved Count  " + count_destination + "  "
											+ Folder + "   Extarcting messsage " + message.getSubject());

								} catch (Exception e) {

									continue;
								}
							}

						}
					}
				}
				if (folder.getSubFolders().size() > 0) {

					getFolderforfile(folder, storage, path, path3, clonepath);

				}
				path = removefolder(path);
			}
		} catch (Exception e) {
			return;

		} finally {
			storage.dispose();
		}
	}

	private void getFolderforfile(OlmFolder folder, OlmStorage storage, String path1, String path3, String clonepath) {

		try {

			for (OlmFolder subFolder : folder.getSubFolders()) {
				path = path1 + File.separator
						+ subFolder.getName().replaceAll("[\\[\\]]", "").replaceAll("[\\[\\]]", "").trim();
				path3 = path3 + File.separator
						+ subFolder.getName().replaceAll("[\\[\\]]", "").replaceAll("[\\[\\]]", "").trim();
				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					foldermessagecount = 0;
					if (pstfolderlist.get(l).equalsIgnoreCase(path3)) {
						// System.out.println(Folder);
						// int count = 1;

						Folder = path;

						lbl_progressreport.setText("Getting Folder " + subFolder.getName().replaceAll("[\\[\\]]", ""));

						if (chckbxMaintainFolderStructure.isSelected()) {
							new File(destination_path + File.separator + path).mkdirs();
							clonepath = path;
						}

						foldermessagecount = 0;

						if (subFolder.hasMessages()) {
							listduplicacy.clear();
							try {

								long foldercount = subFolder.getMessageCount();
								Iterator<MapiMessage> it = storage.enumerateMessages(subFolder).iterator();
								for (int i11 = 0; i11 < foldercount; i11++) {
									try {
										if (!it.hasNext() || (it.next() == null)) {
											System.out.println("Null");
											continue;
										}
									} catch (Exception e) {
										e.printStackTrace();
									}

									try {
										MapiMessage message1 = it.next();
										MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
										MailConversionOptions de = new MailConversionOptions();
										MailMessage mess = message1.toMailMessage(de);
										if (chckbxMigrateOrBackup.isSelected()) {
											mess.getAttachments().clear();
										}
										Date c = mess.getDate();

										String date = c.toString();
										String[] datearr = date.split("\\s");
										String[] time = datearr[3].split(":");
										int i = Integer.parseInt(time[0]);

										Calendar calendar = new GregorianCalendar();
										TimeZone timeZone = calendar.getTimeZone();
										TimeZone timezone = TimeZone.getTimeZone(timeZone.getID());
										int ms = timezone.getOffset(Calendar.ZONE_OFFSET);
										if (i < 1) {
											time[0] = String.valueOf(i + 12 + (convertMillisintohour(ms)));
										} else {
											time[0] = String.valueOf(i + (convertMillisintohour(ms)));
										}

										int i1 = Integer.parseInt(time[1]);
										time[1] = String.valueOf(i1 + (convertMillisintomin(ms)));

										date = date.replace(datearr[3], time[0] + ":" + time[1] + ":" + time[2]);

										Calendar call = Calendar.getInstance();
										call.setTime(c);
										call.set(Calendar.HOUR_OF_DAY, Integer.parseInt(time[0]));
										call.set(Calendar.MINUTE, Integer.parseInt(time[1]));
										call.set(Calendar.SECOND, Integer.parseInt(time[2]));
										call.set(Calendar.MILLISECOND, 0);
										call.setTimeZone(TimeZone.getDefault());
										SimpleDateFormat sdf = new SimpleDateFormat("MMM dd HH:mm:ss z yyyy");
										System.out.println(sdf.format(call.getTime()));
										String strDate = sdf.format(call.getTime());
										c1 = sdf.parse(strDate);
										mess.setDate(c1);

										MapiMessage message = MapiMessage.fromMailMessage(mess, d);
										int bct = message.getBodyType();
										if (bct == 0) {
											message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
										} else {
											message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
										}

//										if (stop) {
//											break;
//										}
										if (stop) {
											break;
										}
										if (demo) {
											if (foldermessagecount == All_Data.demo_count) {
												break;
											}
										}
										if ((foldermessagecount % 100) == 0) {
											System.gc();
										}

										if (message.getMessageClass().equals("IPM.Contact")) {
											try {
												MapiContact con = (MapiContact) message.toMapiMessageItem();

												con.save(
														destination_path + File.separator + clonepath + File.separator
																+ contactname(con) + "_" + foldermessagecount + ".vcf",
														ContactSaveFormat.VCard);
												count_destination++;
												foldermessagecount++;

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
														+ foldermessagecount + mf.namingconventionmapi(message)
														+ System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										} else if (message.getMessageClass().equals("IPM.Appointment")) {

											try {

												MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

												cal.save(
														destination_path + File.separator + clonepath + File.separator
																+ foldermessagecount + "_"
																+ mf.namingconventionforcal(message, cal) + ".ics",
														AppointmentSaveFormat.Ics);

												count_destination++;
												foldermessagecount++;

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
														+ foldermessagecount + mf.namingconventionmapi(message)
														+ System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										} else if (message.getMessageClass().equals("IPM.StickyNote")
												|| message.getMessageClass().equals("IPM.Task")) {
											try {
												Date Receiveddate = message.getDeliveryTime();
												mapifile mf1 = new mapifile(mf, filetype, destination_path, clonepath,
														count_destination, message, Receiveddate, task_box.isSelected(),
														taskfilterstartdate, taskfilterenddate, filepath);
												Thread saveTh = new Thread(mf1);
												saveTh.start();
												saveTh.join();

												count_destination = mf1.k;

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Task" + " "
														+ foldermessagecount + mf.namingconventionmapi(message)
														+ System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										}

										else {

											Date Receiveddate = message.getDeliveryTime();
											mapifile mf1 = new mapifile(mf, filetype, destination_path, clonepath,
													count_destination, message, Receiveddate, task_box.isSelected(),
													taskfilterstartdate, taskfilterenddate, filepath);
											Thread saveTh = new Thread(mf1);
											saveTh.start();
											saveTh.join();
											count_destination = mf1.k;
										}

										lbl_progressreport.setText("Total Message Saved Count  " + count_destination
												+ "  " + Folder + "   Extarcting messsage " + message.getSubject());

									} catch (Exception e) {

										continue;
									}
								}
							} catch (Exception e) {
								for (int i = 0; i < 1; i++) {
									e.printStackTrace();
									continue;
								}
							}
						}
					}
				}

				if (subFolder.getSubFolders().size() > 0) {

					getFolderforfile(subFolder, storage, path, path3, clonepath);

				}

				path = removefolder(path);
				path3 = removefolder(path3);
			}

		} catch (Exception e) {
			return;
		}
	}

	public void ConvertOLM_vcfics() {
		storage = new OlmStorage(filepath);

		try {
			for (OlmFolder folder : storage.getFolderHierarchy()) {
				String Folder = folder.getName().replaceAll("[\\[\\]]", "").trim();
				String path3 = Folder;
				String clonepath = path;
				path = path + File.separator + Folder;
				foldermessagecount = 0;
				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (pstfolderlist.get(l).equalsIgnoreCase(path3)) {

						lbl_progressreport.setText("Getting Folder " + folder.getName().replaceAll("[\\[\\]]", ""));

						Folder = path;

						if (folder.hasMessages()) {
							listduplicacy.clear();
							long foldercount = folder.getMessageCount();
							Iterator<MapiMessage> it = storage.enumerateMessages(folder).iterator();
							for (int i11 = 0; i11 < foldercount; i11++) {
								try {
									if (!it.hasNext() || (it.next() == null)) {
										System.out.println("Null");
										continue;
									}
								} catch (Exception e) {
									e.printStackTrace();
								}

								try {
									MapiMessage message1 = it.next();
									MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
									MailConversionOptions de = new MailConversionOptions();
									MailMessage mess = message1.toMailMessage(de);
									if (chckbxMigrateOrBackup.isSelected()) {
										mess.getAttachments().clear();
									}
									Date c = mess.getDate();

									String date = c.toString();
									String[] datearr = date.split("\\s");
									String[] time = datearr[3].split(":");
									int i = Integer.parseInt(time[0]);

									Calendar calendar = new GregorianCalendar();
									TimeZone timeZone = calendar.getTimeZone();
									TimeZone timezone = TimeZone.getTimeZone(timeZone.getID());
									int ms = timezone.getOffset(Calendar.ZONE_OFFSET);
									if (i < 1) {
										time[0] = String.valueOf(i + 12 + (convertMillisintohour(ms)));
									} else {
										time[0] = String.valueOf(i + (convertMillisintohour(ms)));
									}

									int i1 = Integer.parseInt(time[1]);
									time[1] = String.valueOf(i1 + (convertMillisintomin(ms)));

									date = date.replace(datearr[3], time[0] + ":" + time[1] + ":" + time[2]);

									Calendar call = Calendar.getInstance();
									call.setTime(c);
									call.set(Calendar.HOUR_OF_DAY, Integer.parseInt(time[0]));
									call.set(Calendar.MINUTE, Integer.parseInt(time[1]));
									call.set(Calendar.SECOND, Integer.parseInt(time[2]));
									call.set(Calendar.MILLISECOND, 0);
									call.setTimeZone(TimeZone.getDefault());
									SimpleDateFormat sdf = new SimpleDateFormat("MMM dd HH:mm:ss z yyyy");
									System.out.println(sdf.format(call.getTime()));
									String strDate = sdf.format(call.getTime());
									c1 = sdf.parse(strDate);
									mess.setDate(c1);

									MapiMessage message = MapiMessage.fromMailMessage(mess, d);
									int bct = message.getBodyType();
									if (bct == 0) {
										message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
									} else {
										message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
									}
//									if (stop) {
//										break;
//									}
									if (stop) {
										break;
									}
									if (demo) {
										if (foldermessagecount == All_Data.demo_count) {
											break;
										}
									}
									if ((foldermessagecount % 100) == 0) {
										System.gc();
									}

									foldermessagecount++;

									if (message.getMessageClass().equals("IPM.Contact")) {
										if (filetype.equalsIgnoreCase("VCF")) {
											if (chckbxMaintainFolderStructure.isSelected()) {
												new File(destination_path + File.separator + path).mkdirs();
												clonepath = path;
											}
											try {
												MapiContact con = (MapiContact) message.toMapiMessageItem();

												con.save(
														destination_path + File.separator + clonepath + File.separator
																+ contactname(con) + "_" + foldermessagecount + ".vcf",
														ContactSaveFormat.VCard);
												count_destination++;
												foldermessagecount++;

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
														+ foldermessagecount + mf.namingconventionmapi(message)
														+ System.lineSeparator());
												e.printStackTrace();
												continue;
											}
										} else {
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.Appointment")) {
										if (filetype.equalsIgnoreCase("ICS")) {
											if (chckbxMaintainFolderStructure.isSelected()) {
												new File(destination_path + File.separator + path).mkdirs();
												clonepath = path;
											}
											try {

												MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

												cal.save(
														destination_path + File.separator + clonepath + File.separator
																+ foldermessagecount + "_"
																+ mf.namingconventionforcal(message, cal) + ".ics",
														AppointmentSaveFormat.Ics);
												count_destination++;
												foldermessagecount++;

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
														+ foldermessagecount + mf.namingconventionmapi(message)
														+ System.lineSeparator());
												e.printStackTrace();
												continue;
											}
										}

										else {
											continue;
										}

									}

									else {
										continue;
									}

									lbl_progressreport.setText("Total Message Saved Count  " + count_destination + "  "
											+ Folder + "   Extarcting messsage " + message.getSubject());

								} catch (Exception e) {

									continue;
								}
							}

						}
					}
				}
				if (folder.getSubFolders().size() > 0) {

					getFolderforvcfics(folder, storage, path, path3, clonepath);

				}
				path = removefolder(path);
			}
		} catch (

		Exception e) {
			return;

		} finally {
			storage.dispose();
		}
	}

	private void getFolderforvcfics(OlmFolder folder, OlmStorage storage, String path1, String path3,
			String clonepath) {

		try {

			for (OlmFolder subFolder : folder.getSubFolders()) {
				path = path1 + File.separator
						+ subFolder.getName().replaceAll("[\\[\\]]", "").replaceAll("[\\[\\]]", "").trim();
				path3 = path3 + File.separator
						+ subFolder.getName().replaceAll("[\\[\\]]", "").replaceAll("[\\[\\]]", "").trim();
				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					foldermessagecount = 0;
					if (pstfolderlist.get(l).equalsIgnoreCase(path3)) {
						// System.out.println(Folder);
						// int count = 1;

						Folder = path;

						lbl_progressreport.setText("Getting Folder " + subFolder.getName().replaceAll("[\\[\\]]", ""));

						foldermessagecount = 0;

						if (subFolder.hasMessages()) {
							listduplicacy.clear();
							try {

								long foldercount = subFolder.getMessageCount();
								Iterator<MapiMessage> it = storage.enumerateMessages(subFolder).iterator();
								for (int i11 = 0; i11 < foldercount; i11++) {
									try {
										if (!it.hasNext() || (it.next() == null)) {
											System.out.println("Null");
											continue;
										}
									} catch (Exception e) {
										e.printStackTrace();
									}

									try {
										MapiMessage message1 = it.next();
										MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
										MailConversionOptions de = new MailConversionOptions();
										MailMessage mess = message1.toMailMessage(de);
										if (chckbxMigrateOrBackup.isSelected()) {
											mess.getAttachments().clear();
										}
										Date c = mess.getDate();

										String date = c.toString();
										String[] datearr = date.split("\\s");
										String[] time = datearr[3].split(":");
										int i = Integer.parseInt(time[0]);

										Calendar calendar = new GregorianCalendar();
										TimeZone timeZone = calendar.getTimeZone();
										TimeZone timezone = TimeZone.getTimeZone(timeZone.getID());
										int ms = timezone.getOffset(Calendar.ZONE_OFFSET);
										if (i < 1) {
											time[0] = String.valueOf(i + 12 + (convertMillisintohour(ms)));
										} else {
											time[0] = String.valueOf(i + (convertMillisintohour(ms)));
										}

										int i1 = Integer.parseInt(time[1]);
										time[1] = String.valueOf(i1 + (convertMillisintomin(ms)));

										date = date.replace(datearr[3], time[0] + ":" + time[1] + ":" + time[2]);

										Calendar call = Calendar.getInstance();
										call.setTime(c);
										call.set(Calendar.HOUR_OF_DAY, Integer.parseInt(time[0]));
										call.set(Calendar.MINUTE, Integer.parseInt(time[1]));
										call.set(Calendar.SECOND, Integer.parseInt(time[2]));
										call.set(Calendar.MILLISECOND, 0);
										call.setTimeZone(TimeZone.getDefault());
										SimpleDateFormat sdf = new SimpleDateFormat("MMM dd HH:mm:ss z yyyy");
										System.out.println(sdf.format(call.getTime()));
										String strDate = sdf.format(call.getTime());
										c1 = sdf.parse(strDate);
										mess.setDate(c1);

										MapiMessage message = MapiMessage.fromMailMessage(mess, d);
										int bct = message.getBodyType();
										if (bct == 0) {
											message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
										} else {
											message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
										}

//										if (stop) {
//											break;
//										}
										if (stop) {
											break;
										}
										if (demo) {
											if (foldermessagecount == All_Data.demo_count) {
												break;
											}
										}
										if ((foldermessagecount % 100) == 0) {
											System.gc();
										}

										if (message.getMessageClass().equals("IPM.Contact")) {
											if (filetype.equalsIgnoreCase("VCF")) {
												if (chckbxMaintainFolderStructure.isSelected()) {
													new File(destination_path + File.separator + path).mkdirs();
													clonepath = path;
												}
												try {
													MapiContact con = (MapiContact) message.toMapiMessageItem();

													con.save(
															destination_path + File.separator + clonepath
																	+ File.separator + contactname(con) + "_"
																	+ foldermessagecount + ".vcf",
															ContactSaveFormat.VCard);
													count_destination++;
													foldermessagecount++;

												} catch (OutOfMemoryError ep) {
													mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
															+ mf.namingconventionmapi(message));
												} catch (Exception e) {
													mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
															+ foldermessagecount + mf.namingconventionmapi(message)
															+ System.lineSeparator());
													e.printStackTrace();
													continue;
												}
											} else {
												continue;
											}

										} else if (message.getMessageClass().equals("IPM.Appointment")) {
											if (filetype.equalsIgnoreCase("ICS")) {
												if (chckbxMaintainFolderStructure.isSelected()) {
													new File(destination_path + File.separator + path).mkdirs();
													clonepath = path;
												}
												try {

													MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

													cal.save(
															destination_path + File.separator + clonepath
																	+ File.separator + foldermessagecount + "_"
																	+ mf.namingconventionforcal(message, cal) + ".ics",
															AppointmentSaveFormat.Ics);

													count_destination++;
													foldermessagecount++;

												} catch (OutOfMemoryError ep) {
													mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
															+ mf.namingconventionmapi(message));
												} catch (Exception e) {
													mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
															+ foldermessagecount + mf.namingconventionmapi(message)
															+ System.lineSeparator());
													e.printStackTrace();
													continue;
												}
											}

											else {
												continue;
											}

										}

										else {
											continue;
										}

										lbl_progressreport.setText("Total Message Saved Count  " + count_destination
												+ "  " + Folder + "   Extarcting messsage " + message.getSubject());

									} catch (Exception e) {

										continue;
									}
								}
							} catch (Exception e) {
								for (int i = 0; i < 1; i++) {
									e.printStackTrace();
									continue;
								}
							}
						}
					}
				}

				if (subFolder.getSubFolders().size() > 0) {

					getFolderforvcfics(subFolder, storage, path, path3, clonepath);

				}

				path = removefolder(path);
				path3 = removefolder(path3);
			}

		} catch (Exception e) {
			return;
		}
	}

	public void ConvertOLM_CSV() {
		storage = new OlmStorage(filepath);

		try {
			for (OlmFolder folder : storage.getFolderHierarchy()) {
				String foldern = folder.getName().replaceAll("[\\[\\]]", "").trim();
				String path3 = foldern;
				path = path + File.separator + foldern;
				foldermessagecount = 0;
				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (pstfolderlist.get(l).equalsIgnoreCase(path3)) {

						lbl_progressreport.setText("Getting Folder " + folder.getName().replaceAll("[\\[\\]]", ""));

						Folder = path;

						new File(destination_path + File.separator + path).mkdirs();

						File file = new File(destination_path + File.separator + path + File.separator

								+ getRidOfIllegalFileNameCharacters(folder.getName()) + ".csv");

						FileWriter outputfile = new FileWriter(file);

						CSVWriter writer = new CSVWriter(outputfile);

						if (Folder.contains("contact") || Folder.contains("Contact") || Folder.contains("Address")) {

//							

							String[] header = { "First Name", "Middle Name", "Last Name", "Prefix",
									"Email 1 Address Type", "Email 1 Display Name", "Email 1 Email Address",
									"Email 1 Fax Number", "Email 2 Address Type", "Email 2 Display Name",
									"Email 2 Email Address", "Email 2 Fax Number", "Email 2 Fax Number",
									"Email 3 Address Type", "Email 3 Display Name", "Email 3 Email Address",
									"Email 3 Display Name", "Home Fax Email Address", "Home Fax Address Type",
									"Home Fax Display Name", "Home  Fax Number", "Primary Fax Email Address",
									"Primary Fax Address Type", "Primary Fax Display Name", "Primary Fax Number",
									"Business Fax Email Address", "Business Fax Address Type",
									"Business Fax Display Name", "Business Fax Number", "Wedding Anniversary",
									"Birthday", "File Under", "File Under ID", "Generation", "Tittle", "Account",
									"Business Home Page", "Computer Network Name", "Customer ID",
									"Free Business Location", "FTP Site", "Gender", "Government ID Number", "Hobbies",
									"HTML", "Instant Messaging Address", "Language", "Location", "Notes",
									"Organizational ID Number", "Personal Home Page", "Referred by Name", "Spouse Name",
									" Home Address", "Home Address City", "Home Address Country",
									"Home Address Country Code", "Home Address Postal  Code",
									"Home Address Post Office Box", "Home Address State Or Province", "Other Address",
									"Other Address City", "Other Address Country", "Other Address Country",
									"Other Address Country Code", "Other Address Postal Code",
									"Other Address Post Office Box", "Other Address State Or Province", "Work Address",
									"Work Address City", "Work Address Country", "Work Address Country",
									"Work Address Country Code", "Work Address Postal Code",
									"Work Address Post Office Box", "Work Address State Or Province", "Assistant",
									"Company Name", "Depart Name", "Manager Name", "Office Location", "Profession",
									"Assistant Telephone Number", "Business2 Telephone Number",
									"Business Telephone Number", "Callback Telephone Number", "Car Telephone Number",
									"Company Main Telephone Number", "Home2 Telephone Number", "Home Telephone Number",
									"ISDN Number", "Mobile Telephone Number", "Other Telephone Number",
									"Pager Telephone Number", "Primary Telephone Number", "Radio Telephone Number",
									"Telex Number", "TTY/TDD Phone Number" };

							writer.writeNext(header);
						} else if (Folder.contains("Task") || Folder.contains("task") || Folder.contains("todo")
								|| Folder.contains("ToDo")) {

							String[] header = { "Subject", "Start Date", "Due Date", "Percentage Complete",
									"Estimate Effort", "Actual Effort", "Owner", "Last User", "Last Delegate",
									"Attende size", "Original Display Name", "Display Name", "Email Address",
									"Fax Number", "Address Type", "Comapanies", "Categories", "Mileage", "Billing",
									"Sensitivity", "Status", "History" };
							writer.writeNext(header);

						} else if (Folder.contains("Calender") || Folder.contains("calender")
								|| Folder.contains("calendar") || Folder.contains("Calendar")
								|| Folder.contains("Appiontment")) {

							String[] header = { "Subject", "Start Date", "End Date", "All day event",
									"Reminder on/off	Reminder Time", "Meeting Workspace URL", "Billing Information",
									"Categories", "Location", "Mileage" };

							writer.writeNext(header);
						}

						else {

							String[] header = { "From", "To", "CC:", "Bcc", "Attachment path" };

							writer.writeNext(header);
						}

						if (folder.hasMessages()) {
							listduplicacy.clear();
							long foldercount = folder.getMessageCount();
							Iterator<MapiMessage> it = storage.enumerateMessages(folder).iterator();
							for (int i11 = 0; i11 < foldercount; i11++) {
								try {
									if (!it.hasNext() || (it.next() == null)) {
										System.out.println("Null");
										continue;
									}
								} catch (Exception e) {
									e.printStackTrace();
								}

								try {
									MapiMessage message1 = it.next();
									MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
									MailConversionOptions de = new MailConversionOptions();
									MailMessage mess = message1.toMailMessage(de);
									if (chckbxMigrateOrBackup.isSelected()) {
										mess.getAttachments().clear();
									}
									Date c = mess.getDate();

									String date = c.toString();
									String[] datearr = date.split("\\s");
									String[] time = datearr[3].split(":");
									int i = Integer.parseInt(time[0]);

									Calendar calendar = new GregorianCalendar();
									TimeZone timeZone = calendar.getTimeZone();
									TimeZone timezone = TimeZone.getTimeZone(timeZone.getID());
									int ms = timezone.getOffset(Calendar.ZONE_OFFSET);
									if (i < 1) {
										time[0] = String.valueOf(i + 12 + (convertMillisintohour(ms)));
									} else {
										time[0] = String.valueOf(i + (convertMillisintohour(ms)));
									}

									int i1 = Integer.parseInt(time[1]);
									time[1] = String.valueOf(i1 + (convertMillisintomin(ms)));

									date = date.replace(datearr[3], time[0] + ":" + time[1] + ":" + time[2]);

									Calendar call = Calendar.getInstance();
									call.setTime(c);
									call.set(Calendar.HOUR_OF_DAY, Integer.parseInt(time[0]));
									call.set(Calendar.MINUTE, Integer.parseInt(time[1]));
									call.set(Calendar.SECOND, Integer.parseInt(time[2]));
									call.set(Calendar.MILLISECOND, 0);
									call.setTimeZone(TimeZone.getDefault());
									SimpleDateFormat sdf = new SimpleDateFormat("MMM dd HH:mm:ss z yyyy");
									System.out.println(sdf.format(call.getTime()));
									String strDate = sdf.format(call.getTime());
									Date c1 = sdf.parse(strDate);
									mess.setDate(c1);

									MapiMessage message = MapiMessage.fromMailMessage(mess, d);
									int bct = message.getBodyType();
									if (bct == 0) {
										message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
									} else {
										message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
									}
//									if (stop) {
//										break;
//									}
									if (stop) {
										break;
									}
									if (demo) {
										if (foldermessagecount == All_Data.demo_count) {
											break;
										}
									}
									if ((foldermessagecount % 100) == 0) {
										System.gc();
									}

									if (message.getMessageClass().equals("IPM.Contact")) {
										try {

											Mapimess_CSV(message, writer);
											foldermessagecount++;

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
													+ foldermessagecount + mf.namingconventionmapi(message)
													+ System.lineSeparator());
											e.printStackTrace();
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.Appointment")) {

										try {

											Mapimess_CSV(message, writer);
											foldermessagecount++;

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
													+ foldermessagecount + mf.namingconventionmapi(message)
													+ System.lineSeparator());
											e.printStackTrace();
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.StickyNote")
											|| message.getMessageClass().equals("IPM.Task")
											|| message.getMessageClass().equals("IPM.Note")) {
										try {

											Mapimess_CSV(message, writer);
											foldermessagecount++;

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Task" + " "
													+ foldermessagecount + mf.namingconventionmapi(message)
													+ System.lineSeparator());
											e.printStackTrace();
											continue;
										}

									}

									else {

										Date Receiveddate = message.getDeliveryTime();

										mapicsv(message, Receiveddate, writer);

									}

									lbl_progressreport.setText("Total Message Saved Count  " + count_destination + "  "
											+ Folder + "   Extarcting messsage " + message.getSubject());

								} catch (Exception e) {

									continue;
								}

							}
							writer.close();
						}
					}
				}
				if (folder.getSubFolders().size() > 0) {

					getFolderforCSV(folder, storage, path, path3);

				}
				path = removefolder(path);
			}

		} catch (Exception e) {
			return;

		} finally {
			storage.dispose();
		}

	}

	private void getFolderforCSV(OlmFolder folder, OlmStorage storage, String path1, String path3) {
		try {

			for (OlmFolder subFolder : folder.getSubFolders()) {
				path = path1 + File.separator
						+ subFolder.getName().replaceAll("[\\[\\]]", "").replaceAll("[\\[\\]]", "").trim();
				path3 = path3 + File.separator
						+ subFolder.getName().replaceAll("[\\[\\]]", "").replaceAll("[\\[\\]]", "").trim();
				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					foldermessagecount = 0;
					if (pstfolderlist.get(l).equalsIgnoreCase(path3)) {

						Folder = path;

						lbl_progressreport.setText("Getting Folder " + subFolder.getName().replaceAll("[\\[\\]]", ""));

						new File(destination_path + File.separator + path).mkdirs();

						File file = new File(destination_path + File.separator + path + File.separator

								+ getRidOfIllegalFileNameCharacters(subFolder.getName().replaceAll("[\\[\\]]", ""))
								+ ".csv");

						FileWriter outputfile = new FileWriter(file);

						CSVWriter writer = new CSVWriter(outputfile);

						if (Folder.contains("contact") || Folder.contains("Contact") || Folder.contains("Address")) {

//							

							String[] header = { "First Name", "Middle Name", "Last Name", "Prefix",
									"Email 1 Address Type", "Email 1 Display Name", "Email 1 Email Address",
									"Email 1 Fax Number", "Email 2 Address Type", "Email 2 Display Name",
									"Email 2 Email Address", "Email 2 Fax Number", "Email 2 Fax Number",
									"Email 3 Address Type", "Email 3 Display Name", "Email 3 Email Address",
									"Email 3 Display Name", "Home Fax Email Address", "Home Fax Address Type",
									"Home Fax Display Name", "Home  Fax Number", "Primary Fax Email Address",
									"Primary Fax Address Type", "Primary Fax Display Name", "Primary Fax Number",
									"Business Fax Email Address", "Business Fax Address Type",
									"Business Fax Display Name", "Business Fax Number", "Wedding Anniversary",
									"Birthday", "File Under", "File Under ID", "Generation", "Tittle", "Account",
									"Business Home Page", "Computer Network Name", "Customer ID",
									"Free Business Location", "FTP Site", "Gender", "Government ID Number", "Hobbies",
									"HTML", "Instant Messaging Address", "Language", "Location", "Notes",
									"Organizational ID Number", "Personal Home Page", "Referred by Name", "Spouse Name",
									" Home Address", "Home Address City", "Home Address Country",
									"Home Address Country Code", "Home Address Postal  Code",
									"Home Address Post Office Box", "Home Address State Or Province", "Other Address",
									"Other Address City", "Other Address Country", "Other Address Country",
									"Other Address Country Code", "Other Address Postal Code",
									"Other Address Post Office Box", "Other Address State Or Province", "Work Address",
									"Work Address City", "Work Address Country", "Work Address Country",
									"Work Address Country Code", "Work Address Postal Code",
									"Work Address Post Office Box", "Work Address State Or Province", "Assistant",
									"Company Name", "Depart Name", "Manager Name", "Office Location", "Profession",
									"Assistant Telephone Number", "Business2 Telephone Number",
									"Business Telephone Number", "Callback Telephone Number", "Car Telephone Number",
									"Company Main Telephone Number", "Home2 Telephone Number", "Home Telephone Number",
									"ISDN Number", "Mobile Telephone Number", "Other Telephone Number",
									"Pager Telephone Number", "Primary Telephone Number", "Radio Telephone Number",
									"Telex Number", "TTY/TDD Phone Number" };

							writer.writeNext(header);
						} else if (Folder.contains("Calender") || Folder.contains("calender")
								|| Folder.contains("calendar") || Folder.contains("Calendar")
								|| Folder.contains("Appiontment")) {

							String[] header = { "Subject", "Start Date", "End Date", "All day event",
									"Reminder on/off	Reminder Time", "Meeting Workspace URL", "Billing Information",
									"Categories", "Location", "Mileage" };

							writer.writeNext(header);
						} else if (Folder.contains("Task") || Folder.contains("task") || Folder.contains("todo")
								|| Folder.contains("ToDo")) {

							String[] header = { "Subject", "Start Date", "Due Date", "Percentage Complete",
									"Estimate Effort", "Actual Effort", "Owner", "Last User", "Last Delegate",
									"Attende size", "Original Display Name", "Display Name", "Email Address",
									"Fax Number", "Address Type", "Comapanies", "Categories", "Mileage", "Billing",
									"Sensitivity", "Status", "History" };
							writer.writeNext(header);

						}

						else {

							String[] header = { "From", "To", "CC:", "Bcc", "Attachment path" };

							writer.writeNext(header);
						}

						foldermessagecount = 0;

						if (subFolder.hasMessages()) {
							listduplicacy.clear();
							try {

								long foldercount = subFolder.getMessageCount();
								Iterator<MapiMessage> it = storage.enumerateMessages(subFolder).iterator();
								for (int i11 = 0; i11 < foldercount; i11++) {
									try {
										if (!it.hasNext() || (it.next() == null)) {
											System.out.println("Null");
											continue;
										}
									} catch (Exception e) {
										e.printStackTrace();
									}

									try {
										MapiMessage message1 = it.next();

										MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
										MailConversionOptions de = new MailConversionOptions();
										MailMessage mess = message1.toMailMessage(de);

										Date c = mess.getDate();

										String date = c.toString();
										String[] datearr = date.split("\\s");
										String[] time = datearr[3].split(":");
										int i = Integer.parseInt(time[0]);

										Calendar calendar = new GregorianCalendar();
										TimeZone timeZone = calendar.getTimeZone();
										TimeZone timezone = TimeZone.getTimeZone(timeZone.getID());
										int ms = timezone.getOffset(Calendar.ZONE_OFFSET);
										if (i < 1) {
											time[0] = String.valueOf(i + 12 + (convertMillisintohour(ms)));
										} else {
											time[0] = String.valueOf(i + (convertMillisintohour(ms)));
										}

										int i1 = Integer.parseInt(time[1]);
										time[1] = String.valueOf(i1 + (convertMillisintomin(ms)));

										date = date.replace(datearr[3], time[0] + ":" + time[1] + ":" + time[2]);

										Calendar call = Calendar.getInstance();
										call.setTime(c);
										call.set(Calendar.HOUR_OF_DAY, Integer.parseInt(time[0]));
										call.set(Calendar.MINUTE, Integer.parseInt(time[1]));
										call.set(Calendar.SECOND, Integer.parseInt(time[2]));
										call.set(Calendar.MILLISECOND, 0);
										call.setTimeZone(TimeZone.getDefault());
										SimpleDateFormat sdf = new SimpleDateFormat("MMM dd HH:mm:ss z yyyy");
										System.out.println(sdf.format(call.getTime()));
										String strDate = sdf.format(call.getTime());
										Date c1 = sdf.parse(strDate);
										mess.setDate(c1);

										MapiMessage message = MapiMessage.fromMailMessage(mess, d);
										int bct = message.getBodyType();
										if (bct == 0) {
											message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
										} else {
											message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
										}
//										if (stop) {
//											break;
//										}
										if (stop) {
											break;
										}
										if (demo) {
											if (foldermessagecount == All_Data.demo_count) {
												break;
											}
										}
										if ((foldermessagecount % 100) == 0) {
											System.gc();
										}

										if (message.getMessageClass().equals("IPM.Contact")) {
											try {

												Mapimess_CSV(message, writer);
												foldermessagecount++;

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
														+ foldermessagecount + mf.namingconventionmapi(message)
														+ System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										} else if (message.getMessageClass().equals("IPM.Appointment")) {

											try {

												Mapimess_CSV(message, writer);
												foldermessagecount++;

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
														+ foldermessagecount + mf.namingconventionmapi(message)
														+ System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										} else if (message.getMessageClass().equals("IPM.StickyNote")
												|| message.getMessageClass().equals("IPM.Task")
												|| message.getMessageClass().equals("IPM.Note")) {
											try {

												Mapimess_CSV(message, writer);
												foldermessagecount++;

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Task" + " "
														+ foldermessagecount + mf.namingconventionmapi(message)
														+ System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										}

										else {

											Date Receiveddate = message.getDeliveryTime();

											mapicsv(message, Receiveddate, writer);

										}

										lbl_progressreport.setText("Total Message Saved Count  " + count_destination
												+ "  " + Folder + "   Extarcting messsage " + message.getSubject());

									} catch (Exception e) {

										continue;
									}
								}

							} catch (Exception e) {
								for (int i = 0; i < 1; i++) {

									continue;
								}
							}

							writer.close();
						}
					}
				}

				if (subFolder.getSubFolders().size() > 0) {

					getFolderforCSV(subFolder, storage, path, path3);

				}

				path = removefolder(path);
				path3 = removefolder(path3);
			}

		} catch (Exception e) {
			return;
		}
	}

	public void ConvertOLM_exchange() {
		storage = new OlmStorage(filepath);

		try {
			for (OlmFolder folder : storage.getFolderHierarchy()) {
				foldermessagecount = 0;
				path = folder.getName().replaceAll("[\\[\\]]", "").trim();

				String subfolder = Folderuri;

				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (pstfolderlist.get(l).equalsIgnoreCase(path)) {

						subfolder = clientforexchange_output
								.createFolder(Folderuri, folder.getName().replaceAll("[\\[\\]]", "")).getUri();

						lbl_progressreport.setText("Getting Folder " + folder.getName().replaceAll("[\\[\\]]", ""));

						Folder = path;

						if (folder.hasMessages()) {
							listduplicacy.clear();
							long foldercount = folder.getMessageCount();
							Iterator<MapiMessage> it = storage.enumerateMessages(folder).iterator();
							for (int i11 = 0; i11 < foldercount; i11++) {
								try {
									if (!it.hasNext() || (it.next() == null)) {
										System.out.println("Null");
										continue;
									}
								} catch (Exception e) {
									e.printStackTrace();
								}

								try {
									MapiMessage message1 = it.next();
									MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
									MailConversionOptions de = new MailConversionOptions();
									MailMessage mess = message1.toMailMessage(de);
									if (chckbxMigrateOrBackup.isSelected()) {
										mess.getAttachments().clear();
									}
									Date c = mess.getDate();

									String date = c.toString();
									String[] datearr = date.split("\\s");
									String[] time = datearr[3].split(":");
									int i = Integer.parseInt(time[0]);

									Calendar calendar = new GregorianCalendar();
									TimeZone timeZone = calendar.getTimeZone();
									TimeZone timezone = TimeZone.getTimeZone(timeZone.getID());
									int ms = timezone.getOffset(Calendar.ZONE_OFFSET);
									if (i < 1) {
										time[0] = String.valueOf(i + 12 + (convertMillisintohour(ms)));
									} else {
										time[0] = String.valueOf(i + (convertMillisintohour(ms)));
									}

									int i1 = Integer.parseInt(time[1]);
									time[1] = String.valueOf(i1 + (convertMillisintomin(ms)));

									date = date.replace(datearr[3], time[0] + ":" + time[1] + ":" + time[2]);

									Calendar call = Calendar.getInstance();
									call.setTime(c);
									call.set(Calendar.HOUR_OF_DAY, Integer.parseInt(time[0]));
									call.set(Calendar.MINUTE, Integer.parseInt(time[1]));
									call.set(Calendar.SECOND, Integer.parseInt(time[2]));
									call.set(Calendar.MILLISECOND, 0);
									call.setTimeZone(TimeZone.getDefault());
									SimpleDateFormat sdf = new SimpleDateFormat("MMM dd HH:mm:ss z yyyy");
									System.out.println(sdf.format(call.getTime()));
									String strDate = sdf.format(call.getTime());
									Date c1 = sdf.parse(strDate);
									mess.setDate(c1);

									MapiMessage message = MapiMessage.fromMailMessage(mess, d);
									int bct = message.getBodyType();
									if (bct == 0) {
										message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
									} else {
										message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
									}
//									if (stop) {
//										break;
//									}
									if (stop) {
										break;
									}
									if (demo) {
										if (foldermessagecount == All_Data.demo_count) {
											break;
										}
									}
									if ((foldermessagecount % 100) == 0) {
										System.gc();
									}

									Date Receiveddate = message.getDeliveryTime();
									if (message.getMessageClass().equals("IPM.Contact")) {
										try {
											MailMessage mapi = new MailMessage();
											MapiContact con = (MapiContact) message.toMapiMessageItem();
											try {
												mapi.setSubject(con.getSubject());
											} catch (Exception e) {

												mapi.setSubject("");
											}

											try {
												mapi.setBody(con.getBody());
											} catch (Exception e) {

												mapi.setBody("");
											}
											con.save(
													temppathm + File.separator + foldermessagecount
															+ mf.namingconventionmapi(message) + ".vcf",
													ContactSaveFormat.VCard);
											File file = new File(temppathm + File.separator + foldermessagecount
													+ mf.namingconventionmapi(message) + ".vcf");
											mapi.addAttachment(new Attachment(temppathm + File.separator
													+ foldermessagecount + mf.namingconventionmapi(message) + ".vcf"));
											file.delete();

											clientforexchange_output.appendMessage(subfolder, mapi);
											count_destination++;
											foldermessagecount++;

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {

											if (e.getMessage().equalsIgnoreCase(
													"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
													|| e.getMessage().equalsIgnoreCase("ConnectFailure")
													|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
													|| e.getMessage().contains("Operation failed")
													|| e.getMessage().contains("Rate limit hit")
													|| e.getMessage().equalsIgnoreCase(
															"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
												Progressbar.setVisible(false);

											}
											connectionHandle(e.getMessage());
											mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
													+ foldermessagecount + mf.namingconventionmapi(message)
													+ System.lineSeparator());

											e.printStackTrace();
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.Appointment")) {
										MailMessage mapi = new MailMessage();
										try {

											MapiCalendar cal1 = (MapiCalendar) message.toMapiMessageItem();

											try {
												mapi.setSubject(cal1.getSubject());
											} catch (Exception e) {

												mapi.setSubject("");
											}
											try {
												mapi.setBody(cal1.getBody());
											} catch (Exception e) {

												mapi.setBody("");
											}
											cal1.save(
													temppathm + File.separator + foldermessagecount
															+ mf.namingconventionmapi(message) + ".ics",
													AppointmentSaveFormat.Ics);
											File file = new File(temppathm + File.separator + foldermessagecount
													+ mf.namingconventionmapi(message) + ".ics");

											mapi.addAttachment(new Attachment(temppathm + File.separator
													+ foldermessagecount + mf.namingconventionmapi(message) + ".ics"));
											file.delete();
											if (chckbx_calender_box.isSelected()) {
												if (Receiveddate.after(Calenderfilterstartdate)
														&& Receiveddate.before(Calenderfilterenddate)) {
													clientforexchange_output.appendMessage(subfolder, mapi);
													count_destination++;
													foldermessagecount++;
												}

											} else {
												clientforexchange_output.appendMessage(subfolder, mapi);
												count_destination++;
												foldermessagecount++;
											}

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
											if (e.getMessage().equalsIgnoreCase(
													"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
													|| e.getMessage().equalsIgnoreCase("ConnectFailure")
													|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
													|| e.getMessage().contains("Operation failed")
													|| e.getMessage().contains("Rate limit hit")
													|| e.getMessage().equalsIgnoreCase(
															"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
												Progressbar.setVisible(false);

											}
											connectionHandle(e.getMessage());
											mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
													+ foldermessagecount + mf.namingconventionmapi(message)
													+ System.lineSeparator());

											e.printStackTrace();
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.StickyNote")
											|| message.getMessageClass().equals("IPM.Task")) {
										try {

											if (chckbx_Mail_Filter.isSelected()) {
												if (Receiveddate.after(mailfilterstartdate)
														&& Receiveddate.before(mailfilterenddate)) {
													clientforexchange_output.appendMessage(subfolder, message, true);
													count_destination++;
													foldermessagecount++;

												}
											} else {
												clientforexchange_output.appendMessage(subfolder, message, true);
												count_destination++;
												foldermessagecount++;
											}

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
											if (e.getMessage().equalsIgnoreCase(
													"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
													|| e.getMessage().equalsIgnoreCase("ConnectFailure")
													|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
													|| e.getMessage().contains("Operation failed")
													|| e.getMessage().contains("Rate limit hit")
													|| e.getMessage().equalsIgnoreCase(
															"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
												Progressbar.setVisible(false);

											}
											connectionHandle(e.getMessage());
											mf.logger.warning("Exception : " + e.getMessage() + "Task" + " "
													+ mf.namingconventionmapi(message) + System.lineSeparator());

											e.printStackTrace();
											continue;
										}
									} else {

										String messageid = mapiexchange(message, Receiveddate, clientforexchange_output,
												subfolder);

										if (((message.getFlags()
												& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
											clientforexchange_output.setReadFlag(messageid, true);

										} else {
											clientforexchange_output.setReadFlag(messageid, false);
										}
									}

									lbl_progressreport.setText("Total Message Saved Count  " + count_destination + "  "
											+ Folder + "   Extarcting messsage " + message.getSubject());
								} catch (Exception e) {
									if (e.getMessage().equalsIgnoreCase(
											"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
											|| e.getMessage().equalsIgnoreCase("ConnectFailure")
											|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
											|| e.getMessage().contains("Operation failed")
											|| e.getMessage().contains("Rate limit hit")
											|| e.getMessage().equalsIgnoreCase(
													"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
										Progressbar.setVisible(false);

									}
									connectionHandle(e.getMessage());

									continue;
								}
							}

						}
					}
				}
				if (folder.getSubFolders().size() > 0) {
					getFolderforexchange(folder, storage, path, subfolder);

				}

			}
		} catch (Exception e) {

			if (e.getMessage()
					.equalsIgnoreCase("The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
					|| e.getMessage().equalsIgnoreCase("ConnectFailure")
					|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
					|| e.getMessage().contains("Operation failed") || e.getMessage().contains("Rate limit hit")
					|| e.getMessage().equalsIgnoreCase(
							"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
				Progressbar.setVisible(false);

			}
			connectionHandle(e.getMessage());
			return;

		} finally {
			storage.dispose();
		}

	}

	private void getFolderforexchange(OlmFolder folder, OlmStorage storage, String path1, String folderuri) {

		try {

			for (OlmFolder subFolder : folder.getSubFolders()) {
				path = path1 + File.separator
						+ subFolder.getName().replaceAll("[\\[\\]]", "").replaceAll("[\\[\\]]", "").trim();

				String subFolderuri = folderuri;

				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					foldermessagecount = 0;
					if (pstfolderlist.get(l).equalsIgnoreCase(path)) {
						// System.out.println(Folder);
						// int count = 1;

						Folder = path;

						lbl_progressreport.setText("Getting Folder " + folder.getName().replaceAll("[\\[\\]]", ""));

						subFolderuri = clientforexchange_output
								.createFolder(folderuri, subFolder.getName().replaceAll("[\\[\\]]", "")).getUri();
						// int messagesize = 0;

						if (subFolder.hasMessages()) {
							listduplicacy.clear();
							try {

								// progressBar_message_p3.setValue(0);
								// progressBar_message_p3.setStringPainted(true);

								long foldercount = subFolder.getMessageCount();
								Iterator<MapiMessage> it = storage.enumerateMessages(subFolder).iterator();
								for (int i11 = 0; i11 < foldercount; i11++) {
									try {
										if (!it.hasNext() || (it.next() == null)) {
											System.out.println("Null");
											continue;
										}
									} catch (Exception e) {
										e.printStackTrace();
									}

									try {
										MapiMessage message1 = it.next();
										MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
										MailConversionOptions de = new MailConversionOptions();
										MailMessage mess = message1.toMailMessage(de);
										if (chckbxMigrateOrBackup.isSelected()) {
											mess.getAttachments().clear();
										}
										Date c = mess.getDate();

										String date = c.toString();
										String[] datearr = date.split("\\s");
										String[] time = datearr[3].split(":");
										int i = Integer.parseInt(time[0]);

										Calendar calendar = new GregorianCalendar();
										TimeZone timeZone = calendar.getTimeZone();
										TimeZone timezone = TimeZone.getTimeZone(timeZone.getID());
										int ms = timezone.getOffset(Calendar.ZONE_OFFSET);
										if (i < 1) {
											time[0] = String.valueOf(i + 12 + (convertMillisintohour(ms)));
										} else {
											time[0] = String.valueOf(i + (convertMillisintohour(ms)));
										}

										int i1 = Integer.parseInt(time[1]);
										time[1] = String.valueOf(i1 + (convertMillisintomin(ms)));

										date = date.replace(datearr[3], time[0] + ":" + time[1] + ":" + time[2]);

										Calendar call = Calendar.getInstance();
										call.setTime(c);
										call.set(Calendar.HOUR_OF_DAY, Integer.parseInt(time[0]));
										call.set(Calendar.MINUTE, Integer.parseInt(time[1]));
										call.set(Calendar.SECOND, Integer.parseInt(time[2]));
										call.set(Calendar.MILLISECOND, 0);
										call.setTimeZone(TimeZone.getDefault());
										SimpleDateFormat sdf = new SimpleDateFormat("MMM dd HH:mm:ss z yyyy");
										System.out.println(sdf.format(call.getTime()));
										String strDate = sdf.format(call.getTime());
										Date c1 = sdf.parse(strDate);
										mess.setDate(c1);

										MapiMessage message = MapiMessage.fromMailMessage(mess, d);
										int bct = message.getBodyType();
										if (bct == 0) {
											message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
										} else {
											message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
										}
//										if (stop) {
//											break;
//										}
										if (stop) {
											break;
										}
										if (demo) {
											if (foldermessagecount == All_Data.demo_count) {
												break;
											}
										}
										if ((foldermessagecount % 100) == 0) {
											System.gc();
										}

										Date Receiveddate = message.getDeliveryTime();

										if (message.getMessageClass().equals("IPM.Contact")) {
											try {
												MailMessage mapi = new MailMessage();
												MapiContact con = (MapiContact) message.toMapiMessageItem();
												try {
													mapi.setSubject(con.getSubject());
												} catch (Exception e) {

													mapi.setSubject("");
												}
												try {
													mapi.setBody(con.getBody());
												} catch (Exception e) {

													mapi.setBody("");
												}
												con.save(
														temppathm + File.separator + foldermessagecount
																+ mf.namingconventionmapi(message) + ".vcf",
														ContactSaveFormat.VCard);
												File file = new File(temppathm + File.separator + foldermessagecount
														+ mf.namingconventionmapi(message) + ".vcf");
												mapi.addAttachment(
														new Attachment(temppathm + File.separator + foldermessagecount
																+ mf.namingconventionmapi(message) + ".vcf"));
												file.delete();

												clientforexchange_output.appendMessage(subFolderuri, message, true);
												count_destination++;
												foldermessagecount++;
												// mapi.close();;

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												if (e.getMessage().equalsIgnoreCase(
														"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
														|| e.getMessage().equalsIgnoreCase("ConnectFailure")
														|| e.getMessage()
																.equalsIgnoreCase("Operation has been canceled")
														|| e.getMessage().contains("Operation failed")
														|| e.getMessage().contains("Rate limit hit")
														|| e.getMessage().equalsIgnoreCase(
																"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
													Progressbar.setVisible(false);

												}
												connectionHandle(e.getMessage());
												mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
														+ foldermessagecount + mf.namingconventionmapi(message)
														+ System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										} else if (message.getMessageClass().equals("IPM.Appointment")) {
											MailMessage mapi = new MailMessage();
											try {

												MapiCalendar cal1 = (MapiCalendar) message.toMapiMessageItem();
												try {
													mapi.setSubject(cal1.getSubject());
												} catch (Exception e) {

													mapi.setSubject("");
												}
												try {
													mapi.setBody(cal1.getBody());
												} catch (Exception e) {

													mapi.setBody("");
												}
												cal1.save(
														temppathm + File.separator + foldermessagecount
																+ mf.namingconventionmapi(message) + ".ics",
														AppointmentSaveFormat.Ics);
												File file = new File(temppathm + File.separator + foldermessagecount
														+ mf.namingconventionmapi(message) + ".ics");

												mapi.addAttachment(
														new Attachment(temppathm + File.separator + foldermessagecount
																+ mf.namingconventionmapi(message) + ".ics"));
												file.delete();
												if (chckbx_calender_box.isSelected()) {
													if (Receiveddate.after(Calenderfilterstartdate)
															&& Receiveddate.before(Calenderfilterenddate)) {
														clientforexchange_output.appendMessage(subFolderuri, message,
																true);
														count_destination++;
														foldermessagecount++;
													}

												} else {
													clientforexchange_output.appendMessage(subFolderuri, message, true);
													count_destination++;
													foldermessagecount++;
												}
												//// mapi.close();;
											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												if (e.getMessage().equalsIgnoreCase(
														"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
														|| e.getMessage().equalsIgnoreCase("ConnectFailure")
														|| e.getMessage()
																.equalsIgnoreCase("Operation has been canceled")
														|| e.getMessage().contains("Operation failed")
														|| e.getMessage().contains("Rate limit hit")
														|| e.getMessage().equalsIgnoreCase(
																"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
													Progressbar.setVisible(false);

												}
												connectionHandle(e.getMessage());
												mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
														+ foldermessagecount + mf.namingconventionmapi(message)
														+ System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										} else if (message.getMessageClass().equals("IPM.StickyNote")
												|| message.getMessageClass().equals("IPM.Task")
												|| message.getMessageClass().equals("IPM.Note")) {
											try {

												clientforexchange_output.appendMessage(subFolderuri, message, true);

												count_destination++;
												foldermessagecount++;
											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												if (e.getMessage().equalsIgnoreCase(
														"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
														|| e.getMessage().equalsIgnoreCase("ConnectFailure")
														|| e.getMessage()
																.equalsIgnoreCase("Operation has been canceled")
														|| e.getMessage().contains("Operation failed")
														|| e.getMessage().contains("Rate limit hit")
														|| e.getMessage().equalsIgnoreCase(
																"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
													Progressbar.setVisible(false);

												}
												connectionHandle(e.getMessage());
												mf.logger.warning("Exception : " + e.getMessage() + "Task" + " "
														+ foldermessagecount + mf.namingconventionmapi(message)
														+ System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										}

										else {

											String messageid = mapiexchange(message, Receiveddate,
													clientforexchange_output, subfolder);

											if (((message.getFlags()
													& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
												clientforexchange_output.setReadFlag(messageid, true);

											} else {
												clientforexchange_output.setReadFlag(messageid, false);
											}
										}

										lbl_progressreport.setText("Total Message Saved Count  " + count_destination
												+ "  " + Folder + "   Extarcting messsage " + message.getSubject());

									} catch (Exception e) {
										if (e.getMessage().equalsIgnoreCase(
												"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
												|| e.getMessage().equalsIgnoreCase("ConnectFailure")
												|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
												|| e.getMessage().contains("Operation failed")
												|| e.getMessage().contains("Rate limit hit")
												|| e.getMessage().equalsIgnoreCase(
														"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
											Progressbar.setVisible(false);

										}
										connectionHandle(e.getMessage());

										continue;
									}
								}
							} catch (Exception e) {
								if (e.getMessage().equalsIgnoreCase(
										"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
										|| e.getMessage().equalsIgnoreCase("ConnectFailure")
										|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
										|| e.getMessage().contains("Operation failed")
										|| e.getMessage().contains("Rate limit hit") || e.getMessage().equalsIgnoreCase(
												"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
									Progressbar.setVisible(false);

								}
								connectionHandle(e.getMessage());
								for (int i = 0; i < 1; i++) {
									e.printStackTrace();
									continue;
								}
							}
						}
					}
				}
				// read sub-folders
				if (subFolder.getSubFolders().size() > 0) {

					getFolderforexchange(subFolder, storage, path, subFolderuri);

				}

				path = removefolder(path);

			}

		} catch (Exception e) {
			if (e.getMessage()
					.equalsIgnoreCase("The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
					|| e.getMessage().equalsIgnoreCase("ConnectFailure")
					|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
					|| e.getMessage().contains("Operation failed") || e.getMessage().contains("Rate limit hit")
					|| e.getMessage().equalsIgnoreCase(
							"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
				Progressbar.setVisible(false);

			}
			connectionHandle(e.getMessage());
			return;
		}

	}

	public void ConvertOLM_gmail() {
		storage = new OlmStorage(filepath);

		MailConversionOptions options = new MailConversionOptions();

		try {
			for (OlmFolder folder : storage.getFolderHierarchy()) {

				String path1 = folder.getName().replaceAll("[\\[\\]]", "").trim();
				foldermessagecount = 0;

				for (int l = 0; l < pstfolderlist.size(); l++) {

//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (pstfolderlist.get(l).equalsIgnoreCase(path1)) {
						boolean s22 = false;
						String sol = folder.getName().replaceAll("[\\[\\]]", "");
						if (filetype.equalsIgnoreCase("GoDaddy email")) {
							sol = sol.replaceAll("[^a-zA-Z0-9]", "");

						}
						path = path + "/" + sol;

						clientforimap_output.createFolder(iconnforimap_output, path);
						clientforimap_output.selectFolder(iconnforimap_output, path);

						lbl_progressreport.setText("Getting Folder " + folder.getName().replaceAll("[\\[\\]]", ""));

						Folder = path;

						if (folder.hasMessages()) {
							listduplicacy.clear();
							long foldercount = folder.getMessageCount();
							Iterator<MapiMessage> it = storage.enumerateMessages(folder).iterator();
							for (int i11 = 0; i11 < foldercount; i11++) {
								try {
									if (!it.hasNext() || (it.next() == null)) {
										System.out.println("Null");
										continue;
									}
								} catch (Exception e) {
									e.printStackTrace();
								}

								try {
									MapiMessage message1 = it.next();

									MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
									MailConversionOptions de = new MailConversionOptions();
									MailMessage mess = message1.toMailMessage(de);
									if (chckbxMigrateOrBackup.isSelected()) {
										mess.getAttachments().clear();
									}
									Date c = mess.getDate();

									String date = c.toString();
									String[] datearr = date.split("\\s");
									String[] time = datearr[3].split(":");
									int i = Integer.parseInt(time[0]);

									Calendar calendar = new GregorianCalendar();
									TimeZone timeZone = calendar.getTimeZone();
									TimeZone timezone = TimeZone.getTimeZone(timeZone.getID());
									int ms = timezone.getOffset(Calendar.ZONE_OFFSET);
									if (i < 1) {
										time[0] = String.valueOf(i + 12 + (convertMillisintohour(ms)));
									} else {
										time[0] = String.valueOf(i + (convertMillisintohour(ms)));
									}

									int i1 = Integer.parseInt(time[1]);
									time[1] = String.valueOf(i1 + (convertMillisintomin(ms)));

									date = date.replace(datearr[3], time[0] + ":" + time[1] + ":" + time[2]);

									Calendar call = Calendar.getInstance();
									call.setTime(c);
									call.set(Calendar.HOUR_OF_DAY, Integer.parseInt(time[0]));
									call.set(Calendar.MINUTE, Integer.parseInt(time[1]));
									call.set(Calendar.SECOND, Integer.parseInt(time[2]));
									call.set(Calendar.MILLISECOND, 0);
									call.setTimeZone(TimeZone.getDefault());
									SimpleDateFormat sdf = new SimpleDateFormat("MMM dd HH:mm:ss z yyyy");
									System.out.println(sdf.format(call.getTime()));
									String strDate = sdf.format(call.getTime());
									Date c1 = sdf.parse(strDate);
									mess.setDate(c1);

									MapiMessage message = MapiMessage.fromMailMessage(mess, d);
									int bct = message.getBodyType();
									if (bct == 0) {
										message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
									} else {
										message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
									}
//									if (stop) {
//										break;
//									}
									if (stop) {
										break;
									}
									if (demo) {
										if (foldermessagecount == All_Data.demo_count) {
											break;
										}
									}
									if ((foldermessagecount % 100) == 0) {
										System.gc();
									}
									if ((count_destination % 500) == 0) {
										if (s22) {
											connectionHandle1();
										}
										s22 = true;
									}

									MailMessage mess1 = message.toMailMessage(options);
									Date Receiveddate = message.getDeliveryTime();
									if (message.getMessageClass().equals("IPM.Contact")) {
										MailMessage mapi = new MailMessage();
										try {
											MapiContact con = (MapiContact) message.toMapiMessageItem();
											try {
												mapi.setSubject(con.getSubject());
											} catch (Exception e) {

												mapi.setSubject("");
											}
											try {
												mapi.setBody(con.getBody());
											} catch (Exception e) {

												mapi.setBody("");
											}
											con.save(temppathm + File.separator + mf.namingconventionmapi(message)
													+ ".vcf", ContactSaveFormat.VCard);
											File file = new File(temppathm + File.separator
													+ mf.namingconventionmapi(message) + ".vcf");
											mapi.addAttachment(new Attachment(temppathm + File.separator
													+ mf.namingconventionmapi(message) + ".vcf"));
											file.delete();

											clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
											count_destination++;
											foldermessagecount++;
											// count++;

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
													+ mf.namingconventionmapi(message) + System.lineSeparator());
											e.printStackTrace();
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.Appointment")) {
										MailMessage mapi = new MailMessage();
										try {

											MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

											try {
												mapi.setSubject(cal.getSubject());
											} catch (Exception e) {

												mapi.setSubject("");
											}
											try {
												mapi.setBody(cal.getBody());
											} catch (Exception e) {

												mapi.setBody("");
											}
											cal.save(temppathm + File.separator + mf.namingconventionmapi(message)
													+ ".ics", AppointmentSaveFormat.Ics);
											File file = new File(temppathm + File.separator
													+ mf.namingconventionmapi(message) + ".ics");

											mapi.addAttachment(new Attachment(temppathm + File.separator
													+ mf.namingconventionmapi(message) + ".ics"));
											file.delete();
											Receiveddate = cal.getStartDate();
											if (chckbx_calender_box.isSelected()) {
												if (Receiveddate.after(Calenderfilterstartdate)
														&& Receiveddate.before(Calenderfilterenddate)) {

													clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
													count_destination++;
													foldermessagecount++;
													// count++;
												} else if (Receiveddate.equals(Calenderfilterstartdate)
														|| Receiveddate.equals(Calenderfilterenddate)) {

													clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
													count_destination++;
													foldermessagecount++;
													// count++;
												}

											} else {

												clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
												count_destination++;
												foldermessagecount++;
												// count++;
											}

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
											if (e.getMessage().contains(
													"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
													|| e.getMessage().contains("ConnectFailure")
													|| e.getMessage().contains("Operation has been canceled")
													|| e.getMessage().contains("Operation failed")
													|| e.getMessage().contains("Rate limit hit")
													|| e.getMessage().contains(
															"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
												Progressbar.setVisible(false);

											}
											connectionHandle(e.getMessage());
											mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
													+ mf.namingconventionmapi(message) + System.lineSeparator());
											e.printStackTrace();
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.StickyNote")
											|| message.getMessageClass().equals("IPM.Task")) {

										String s = filetype;
										try {

											filetype = "MSG";
											if (message.getMessageClass().equals("IPM.Task")) {
												MapiTask task = (MapiTask) message.toMapiMessageItem();
												Receiveddate = task.getStartDate();
											}

											if (task_box.isSelected()) {
												if (Receiveddate.after(taskfilterstartdate)
														&& Receiveddate.before(taskfilterenddate)) {
													clientforimap_output.appendMessage(iconnforimap_output, path,
															mess1);
													count_destination++;
													foldermessagecount++;
													// count++;
												} else if (Receiveddate.equals(taskfilterstartdate)
														|| Receiveddate.equals(taskfilterenddate)) {

													clientforimap_output.appendMessage(iconnforimap_output, path,
															mess1);

													count_destination++;
													foldermessagecount++;
													// count++;

												}

											} else {

												clientforimap_output.appendMessage(iconnforimap_output, path, mess1);
												count_destination++;
												// count++;

											}

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
											if (e.getMessage().contains(
													"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
													|| e.getMessage().contains("ConnectFailure")
													|| e.getMessage().contains("Operation has been canceled")
													|| e.getMessage().contains("Operation failed")
													|| e.getMessage().contains("Rate limit hit")
													|| e.getMessage().contains(
															"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
												Progressbar.setVisible(false);

											}
											connectionHandle(e.getMessage());
											mf.logger.warning("Exception : " + e.getMessage() + "Task" + " "
													+ mf.namingconventionmapi(message) + System.lineSeparator());
											e.printStackTrace();
											continue;
										} finally {
											filetype = s;
										}

									} else {
										try {

											String messageid = mailimap(mess1, Receiveddate, path);
											if (((message.getFlags()
													& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
												clientforimap_output.changeMessageFlags(iconnforimap_output, messageid,
														ImapMessageFlags.isRead());

											} else {

												clientforimap_output.removeMessageFlags(iconnforimap_output, messageid,
														ImapMessageFlags.isRead());

											}

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
											if (e.getMessage().contains(
													"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
													|| e.getMessage().contains("ConnectFailure")
													|| e.getMessage().contains("Operation has been canceled")
													|| e.getMessage().contains("Operation failed")
													|| e.getMessage().contains("Rate limit hit")
													|| e.getMessage().contains(
															"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
												Progressbar.setVisible(false);

											}
											connectionHandle(e.getMessage());
											mf.logger.warning("Exception : " + e.getMessage() + "Message " + " "
													+ mf.namingconventionmapi(message) + System.lineSeparator());
											e.printStackTrace();
											continue;
										}

									}

									lbl_progressreport.setText("Total Message Saved Count  " + count_destination + "  "
											+ Folder + "   Extarcting messsage " + message.getSubject());

								} catch (Exception e) {

									if (e.getMessage().contains(
											"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
											|| e.getMessage().contains("ConnectFailure")
											|| e.getMessage().contains("Operation has been canceled")
											|| e.getMessage().contains("Operation failed")
											|| e.getMessage().contains("Rate limit hit") || e.getMessage().contains(
													"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
										Progressbar.setVisible(false);

									}
									connectionHandle(e.getMessage());
									continue;
								}
							}

						}
					}
				}
				if (folder.getSubFolders().size() > 0) {

					getFolderforgmail(folder, path1);

				}

				path = removefoldergmail(path);

			}
		} catch (Exception e) {
			return;

		} finally {
			storage.dispose();
		}

	}

	private void getFolderforgmail(OlmFolder folder, String Foldercheck) {
		try {
			MailConversionOptions options = new MailConversionOptions();
			for (OlmFolder subFolder : folder.getSubFolders()) {

				String Folderna = subFolder.getName().replaceAll("[\\[\\]]", "").trim();
				foldermessagecount = 0;
				String Folderchecks = Foldercheck + File.separator + Folderna;
				// path = path1 + File.separator + subFolder.getName().replaceAll("[\\[\\]]",
				// "").replaceAll("[\\[\\]]",
				// "");
				boolean s22 = false;
				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (pstfolderlist.get(l).equalsIgnoreCase(Folderchecks)) {
						String sol = subFolder.getName().replaceAll("[\\[\\]]", "");
						if (filetype.equalsIgnoreCase("GoDaddy email")) {
							sol = sol.replaceAll("[^a-zA-Z0-9]", "");

						}
						path = path + "/" + sol;

						Folder = path;

						lbl_progressreport.setText("Getting Folder " + sol);

						clientforimap_output.createFolder(iconnforimap_output, path);
						clientforimap_output.selectFolder(iconnforimap_output, path);

						foldermessagecount = 0;
						// int messagesize = 0;

						if (subFolder.hasMessages()) {
							listduplicacy.clear();
							try {

								// progressBar_message_p3.setValue(0);
								// progressBar_message_p3.setStringPainted(true);
								long foldercount = subFolder.getMessageCount();
								Iterator<MapiMessage> it = storage.enumerateMessages(subFolder).iterator();
								for (int i11 = 0; i11 < foldercount; i11++) {
									try {
										if (!it.hasNext() || (it.next() == null)) {
											System.out.println("Null");
											continue;
										}
									} catch (Exception e) {
										e.printStackTrace();
									}

									try {
										MapiMessage message1 = it.next();
										if ((count_destination % 500) == 0) {
											if (s22) {
												connectionHandle1();
											}
											s22 = true;
										}

										MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
										MailConversionOptions de = new MailConversionOptions();
										MailMessage mess = message1.toMailMessage(de);
										if (chckbxMigrateOrBackup.isSelected()) {
											mess.getAttachments().clear();
										}
										Date c = mess.getDate();

										String date = c.toString();
										String[] datearr = date.split("\\s");
										String[] time = datearr[3].split(":");
										int i = Integer.parseInt(time[0]);

										Calendar calendar = new GregorianCalendar();
										TimeZone timeZone = calendar.getTimeZone();
										TimeZone timezone = TimeZone.getTimeZone(timeZone.getID());
										int ms = timezone.getOffset(Calendar.ZONE_OFFSET);
										if (i < 1) {
											time[0] = String.valueOf(i + 12 + (convertMillisintohour(ms)));
										} else {
											time[0] = String.valueOf(i + (convertMillisintohour(ms)));
										}

										int i1 = Integer.parseInt(time[1]);
										time[1] = String.valueOf(i1 + (convertMillisintomin(ms)));

										date = date.replace(datearr[3], time[0] + ":" + time[1] + ":" + time[2]);

										Calendar call = Calendar.getInstance();
										call.setTime(c);
										call.set(Calendar.HOUR_OF_DAY, Integer.parseInt(time[0]));
										call.set(Calendar.MINUTE, Integer.parseInt(time[1]));
										call.set(Calendar.SECOND, Integer.parseInt(time[2]));
										call.set(Calendar.MILLISECOND, 0);
										call.setTimeZone(TimeZone.getDefault());
										SimpleDateFormat sdf = new SimpleDateFormat("MMM dd HH:mm:ss z yyyy");
										System.out.println(sdf.format(call.getTime()));
										String strDate = sdf.format(call.getTime());
										Date c1 = sdf.parse(strDate);
										mess.setDate(c1);

										MapiMessage message = MapiMessage.fromMailMessage(mess, d);
										int bct = message.getBodyType();
										if (bct == 0) {
											message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
										} else {
											message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
										}
//										if (stop) {
//											break;
//										}
										if (stop) {
											break;
										}
										if (demo) {
											if (foldermessagecount == All_Data.demo_count) {
												break;
											}
										}
										if ((foldermessagecount % 100) == 0) {
											System.gc();
										}

										MailMessage mess1 = message.toMailMessage(options);
										Date Receiveddate = message.getDeliveryTime();
										if (message.getMessageClass().equals("IPM.Contact")) {
											MailMessage mapi = new MailMessage();
											try {
												MapiContact con = (MapiContact) message.toMapiMessageItem();
												try {
													mapi.setSubject(con.getSubject());
												} catch (Exception e) {

													mapi.setSubject("");
												}
												try {
													mapi.setBody(con.getBody());
												} catch (Exception e) {

													mapi.setBody("");
												}
												con.save(temppathm + File.separator + mf.namingconventionmapi(message)
														+ ".vcf", ContactSaveFormat.VCard);
												File file = new File(temppathm + File.separator
														+ mf.namingconventionmapi(message) + ".vcf");
												mapi.addAttachment(new Attachment(temppathm + File.separator
														+ mf.namingconventionmapi(message) + ".vcf"));
												file.delete();

												clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
												count_destination++;
												foldermessagecount++;
												// count++;

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
														+ mf.namingconventionmapi(message) + System.lineSeparator());

												if (e.getMessage().contains(
														"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
														|| e.getMessage().contains("ConnectFailure")
														|| e.getMessage().contains("Operation has been canceled")
														|| e.getMessage().contains("Operation failed")
														|| e.getMessage().contains("Rate limit hit")
														|| e.getMessage().contains(
																"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
													Progressbar.setVisible(false);

												}
												connectionHandle(e.getMessage());
												continue;
											}

										} else if (message.getMessageClass().equals("IPM.Appointment")) {
											MailMessage mapi = new MailMessage();
											try {

												MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

												try {
													mapi.setSubject(cal.getSubject());
												} catch (Exception e) {

													mapi.setSubject("");
												}
												try {
													mapi.setBody(cal.getBody());
												} catch (Exception e) {

													mapi.setBody("");
												}
												cal.save(temppathm + File.separator + mf.namingconventionmapi(message)
														+ ".ics", AppointmentSaveFormat.Ics);
												File file = new File(temppathm + File.separator
														+ mf.namingconventionmapi(message) + ".ics");

												mapi.addAttachment(new Attachment(temppathm + File.separator
														+ mf.namingconventionmapi(message) + ".ics"));
												file.delete();
												Receiveddate = cal.getStartDate();
												if (chckbx_calender_box.isSelected()) {
													if (Receiveddate.after(Calenderfilterstartdate)
															&& Receiveddate.before(Calenderfilterenddate)) {

														clientforimap_output.appendMessage(iconnforimap_output, path,
																mapi);
														count_destination++;
														foldermessagecount++;
														// count++;
													} else if (Receiveddate.equals(Calenderfilterstartdate)
															|| Receiveddate.equals(Calenderfilterenddate)) {

														clientforimap_output.appendMessage(iconnforimap_output, path,
																mapi);
														count_destination++;
														foldermessagecount++;
														// count++;
													}

												} else {

													clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
													count_destination++;
													foldermessagecount++;
													// count++;
												}

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
												if (e.getMessage().contains(
														"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
														|| e.getMessage().contains("ConnectFailure")
														|| e.getMessage().contains("Operation has been canceled")
														|| e.getMessage().contains("Operation failed")
														|| e.getMessage().contains("Rate limit hit")
														|| e.getMessage().contains(
																"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
													Progressbar.setVisible(false);

												}
												connectionHandle(e.getMessage());
												mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
														+ mf.namingconventionmapi(message) + System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										} else if (message.getMessageClass().equals("IPM.StickyNote")
												|| message.getMessageClass().equals("IPM.Task")) {

											String s = filetype;
											try {

												filetype = "MSG";
												if (message.getMessageClass().equals("IPM.Task")) {
													MapiTask task = (MapiTask) message.toMapiMessageItem();
													Receiveddate = task.getStartDate();
												}

												if (task_box.isSelected()) {
													if (Receiveddate.after(taskfilterstartdate)
															&& Receiveddate.before(taskfilterenddate)) {
														clientforimap_output.appendMessage(iconnforimap_output, path,
																mess1);
														count_destination++;
														foldermessagecount++;
														// count++;
													} else if (Receiveddate.equals(taskfilterstartdate)
															|| Receiveddate.equals(taskfilterenddate)) {

														clientforimap_output.appendMessage(iconnforimap_output, path,
																mess1);

														count_destination++;
														foldermessagecount++;
														// count++;

													}

												} else {

													clientforimap_output.appendMessage(iconnforimap_output, path,
															mess1);
													count_destination++;
													foldermessagecount++;
													// count++;

												}

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
												if (e.getMessage().contains(
														"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
														|| e.getMessage().contains("ConnectFailure")
														|| e.getMessage().contains("Operation has been canceled")
														|| e.getMessage().contains("Operation failed")
														|| e.getMessage().contains("Rate limit hit")
														|| e.getMessage().contains(
																"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
													Progressbar.setVisible(false);

												}
												connectionHandle(e.getMessage());
												mf.logger.warning("Exception : " + e.getMessage() + "Task" + " "
														+ mf.namingconventionmapi(message) + System.lineSeparator());
												e.printStackTrace();
												continue;
											} finally {
												filetype = s;
											}

										} else {
											try {
												String messageid = mailimap(mess1, Receiveddate, path);
												if (((message.getFlags()
														& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
													clientforimap_output.changeMessageFlags(iconnforimap_output,
															messageid, ImapMessageFlags.isRead());

												} else {

													clientforimap_output.removeMessageFlags(iconnforimap_output,
															messageid, ImapMessageFlags.isRead());

												}
											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
												if (e.getMessage().contains(
														"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
														|| e.getMessage().contains("ConnectFailure")
														|| e.getMessage().contains("Operation has been canceled")
														|| e.getMessage().contains("Operation failed")
														|| e.getMessage().contains("Rate limit hit")
														|| e.getMessage().contains(
																"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
													Progressbar.setVisible(false);

												}
												connectionHandle(e.getMessage());
												mf.logger.warning("Exception : " + e.getMessage() + "Message " + " "
														+ mf.namingconventionmapi(message) + System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										}

										lbl_progressreport.setText("Total Message Saved Count  " + count_destination
												+ "  " + subFolder.getName().replaceAll("[\\[\\]]", "")
												+ "   Extarcting messsage " + message.getSubject());

									} catch (Exception e) {

										if (e.getMessage().contains(
												"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
												|| e.getMessage().contains("ConnectFailure")
												|| e.getMessage().contains("Operation has been canceled")
												|| e.getMessage().contains("Operation failed")
												|| e.getMessage().contains("Rate limit hit") || e.getMessage().contains(
														"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
											Progressbar.setVisible(false);

										}
										connectionHandle(e.getMessage());
										continue;
									}
								}
							} catch (Exception e) {
								for (int i = 0; i < 1; i++) {
									e.printStackTrace();
									continue;
								}
							}
						}
					}
				}

				if (subFolder.getSubFolders().size() > 0) {

					getFolderforgmail(subFolder, Folderchecks);

				}

				path = removefoldergmail(path);
				Folderchecks = removefolder(Foldercheck);
			}

		} catch (Exception e) {
			return;
		}

	}

	public void ConvertOLM_imap() {
		storage = new OlmStorage(filepath);

		MailConversionOptions options = new MailConversionOptions();

		try {
			for (OlmFolder folder : storage.getFolderHierarchy()) {
				foldermessagecount = 0;
				path1 = "";
				path1 = folder.getName().replaceAll("[\\[\\]]", "").trim();

				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (pstfolderlist.get(l).equalsIgnoreCase(path1)) {

						path = path + "." + folder.getName().replaceAll("[\\[\\]]", "");
						boolean s22 = false;
						clientforimap_output.createFolder(iconnforimap_output, path);
						clientforimap_output.selectFolder(iconnforimap_output, path);

						lbl_progressreport.setText("Getting Folder " + folder.getName().replaceAll("[\\[\\]]", ""));

						Folder = path;

						if (folder.hasMessages()) {
							listduplicacy.clear();
							long foldercount = folder.getMessageCount();
							Iterator<MapiMessage> it = storage.enumerateMessages(folder).iterator();
							for (int i11 = 0; i11 < foldercount; i11++) {
								try {
									if (!it.hasNext() || (it.next() == null)) {
										System.out.println("Null");
										continue;
									}
								} catch (Exception e) {
									e.printStackTrace();
								}

								try {
									MapiMessage message1 = it.next();

									MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
									MailConversionOptions de = new MailConversionOptions();
									MailMessage mess = message1.toMailMessage(de);
									if (chckbxMigrateOrBackup.isSelected()) {
										mess.getAttachments().clear();
									}
									Date c = mess.getDate();

									String date = c.toString();
									String[] datearr = date.split("\\s");
									String[] time = datearr[3].split(":");
									int i = Integer.parseInt(time[0]);

									Calendar calendar = new GregorianCalendar();
									TimeZone timeZone = calendar.getTimeZone();
									TimeZone timezone = TimeZone.getTimeZone(timeZone.getID());
									int ms = timezone.getOffset(Calendar.ZONE_OFFSET);
									if (i < 1) {
										time[0] = String.valueOf(i + 12 + (convertMillisintohour(ms)));
									} else {
										time[0] = String.valueOf(i + (convertMillisintohour(ms)));
									}

									int i1 = Integer.parseInt(time[1]);
									time[1] = String.valueOf(i1 + (convertMillisintomin(ms)));

									date = date.replace(datearr[3], time[0] + ":" + time[1] + ":" + time[2]);

									Calendar call = Calendar.getInstance();
									call.setTime(c);
									call.set(Calendar.HOUR_OF_DAY, Integer.parseInt(time[0]));
									call.set(Calendar.MINUTE, Integer.parseInt(time[1]));
									call.set(Calendar.SECOND, Integer.parseInt(time[2]));
									call.set(Calendar.MILLISECOND, 0);
									call.setTimeZone(TimeZone.getDefault());
									SimpleDateFormat sdf = new SimpleDateFormat("MMM dd HH:mm:ss z yyyy");
									System.out.println(sdf.format(call.getTime()));
									String strDate = sdf.format(call.getTime());
									Date c1 = sdf.parse(strDate);
									mess.setDate(c1);

									MapiMessage message = MapiMessage.fromMailMessage(mess, d);
									int bct = message.getBodyType();
									if (bct == 0) {
										message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
									} else {
										message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
									}
//									if (stop) {
//										break;
//									}
									if (stop) {
										break;
									}
									if (demo) {
										if (foldermessagecount == All_Data.demo_count) {
											break;
										}
									}
									if ((foldermessagecount % 100) == 0) {
										System.gc();
									}
									if ((count_destination % 1000) == 0) {
										if (s22) {
											connectionHandle1();
										}
										s22 = true;
									}

									MailMessage mess1 = message.toMailMessage(options);
									Date Receiveddate = message.getDeliveryTime();
									if (message.getMessageClass().equals("IPM.Contact")) {
										MailMessage mapi = new MailMessage();
										try {
											MapiContact con = (MapiContact) message.toMapiMessageItem();
											try {
												mapi.setSubject(con.getSubject());
											} catch (Exception e) {

												mapi.setSubject("");
											}
											try {
												mapi.setBody(con.getBody());
											} catch (Exception e) {

												mapi.setBody("");
											}
											con.save(temppathm + File.separator + mf.namingconventionmapi(message)
													+ ".vcf", ContactSaveFormat.VCard);
											File file = new File(temppathm + File.separator
													+ mf.namingconventionmapi(message) + ".vcf");
											mapi.addAttachment(new Attachment(temppathm + File.separator
													+ mf.namingconventionmapi(message) + ".vcf"));
											file.delete();

											clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
											count_destination++;
											foldermessagecount++;
											// count++;

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
													+ mf.namingconventionmapi(message) + System.lineSeparator());
											e.printStackTrace();
											if (e.getMessage().contains(
													"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
													|| e.getMessage().contains("ConnectFailure")
													|| e.getMessage().contains("Operation has been canceled")
													|| e.getMessage().contains("Operation failed")
													|| e.getMessage().contains("Rate limit hit")
													|| e.getMessage().contains(
															"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
												Progressbar.setVisible(false);

											}
											connectionHandle(e.getMessage());

											continue;
										}

									} else if (message.getMessageClass().equals("IPM.Appointment")) {
										MailMessage mapi = new MailMessage();
										try {

											MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

											try {
												mapi.setSubject(cal.getSubject());
											} catch (Exception e) {

												mapi.setSubject("");
											}
											try {
												mapi.setBody(cal.getBody());
											} catch (Exception e) {

												mapi.setBody("");
											}
											cal.save(temppathm + File.separator + mf.namingconventionmapi(message)
													+ ".ics", AppointmentSaveFormat.Ics);
											File file = new File(temppathm + File.separator
													+ mf.namingconventionmapi(message) + ".ics");

											mapi.addAttachment(new Attachment(temppathm + File.separator
													+ mf.namingconventionmapi(message) + ".ics"));
											file.delete();
											Receiveddate = cal.getStartDate();
											if (chckbx_calender_box.isSelected()) {
												if (Receiveddate.after(Calenderfilterstartdate)
														&& Receiveddate.before(Calenderfilterenddate)) {

													clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
													count_destination++;
													foldermessagecount++;
													// count++;
												} else if (Receiveddate.equals(Calenderfilterstartdate)
														|| Receiveddate.equals(Calenderfilterenddate)) {

													clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
													count_destination++;
													foldermessagecount++;
													// count++;
												}

											} else {

												clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
												count_destination++;
												foldermessagecount++;
												// count++;
											}

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
											if (e.getMessage().contains(
													"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
													|| e.getMessage().contains("ConnectFailure")
													|| e.getMessage().contains("Operation has been canceled")
													|| e.getMessage().contains("Operation failed")
													|| e.getMessage().contains("Rate limit hit")
													|| e.getMessage().contains(
															"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
												Progressbar.setVisible(false);

											}
											connectionHandle(e.getMessage());
											mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
													+ mf.namingconventionmapi(message) + System.lineSeparator());
											e.printStackTrace();
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.StickyNote")
											|| message.getMessageClass().equals("IPM.Task")) {

										String s = filetype;
										try {

											filetype = "MSG";
											if (message.getMessageClass().equals("IPM.Task")) {
												MapiTask task = (MapiTask) message.toMapiMessageItem();
												Receiveddate = task.getStartDate();
											}

											if (task_box.isSelected()) {
												if (Receiveddate.after(taskfilterstartdate)
														&& Receiveddate.before(taskfilterenddate)) {
													clientforimap_output.appendMessage(iconnforimap_output, path,
															mess1);
													count_destination++;
													foldermessagecount++;
													// count++;
												} else if (Receiveddate.equals(taskfilterstartdate)
														|| Receiveddate.equals(taskfilterenddate)) {

													clientforimap_output.appendMessage(iconnforimap_output, path,
															mess1);

													count_destination++;
													foldermessagecount++;
													// count++;

												}

											} else {

												clientforimap_output.appendMessage(iconnforimap_output, path, mess1);
												count_destination++;
												foldermessagecount++;
												// count++;

											}

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
											if (e.getMessage().contains(
													"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
													|| e.getMessage().contains("ConnectFailure")
													|| e.getMessage().contains("Operation has been canceled")
													|| e.getMessage().contains("Operation failed")
													|| e.getMessage().contains("Rate limit hit")
													|| e.getMessage().contains(
															"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
												Progressbar.setVisible(false);

											}
											connectionHandle(e.getMessage());
											mf.logger.warning("Exception : " + e.getMessage() + "Task" + " "
													+ mf.namingconventionmapi(message) + System.lineSeparator());
											e.printStackTrace();
											continue;
										} finally {
											filetype = s;
										}

									} else {
										try {

											String messageid = mailimap(mess1, Receiveddate, destination_path);
											if (((message.getFlags()
													& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
												clientforimap_output.changeMessageFlags(iconnforimap_output, messageid,
														ImapMessageFlags.isRead());

											} else {

												clientforimap_output.removeMessageFlags(iconnforimap_output, messageid,
														ImapMessageFlags.isRead());

											}

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
											if (e.getMessage().contains(
													"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
													|| e.getMessage().contains("ConnectFailure")
													|| e.getMessage().contains("Operation has been canceled")
													|| e.getMessage().contains("Operation failed")
													|| e.getMessage().contains("Rate limit hit")
													|| e.getMessage().contains(
															"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
												Progressbar.setVisible(false);

											}
											connectionHandle(e.getMessage());
											mf.logger.warning("Exception : " + e.getMessage() + "Message " + " "
													+ mf.namingconventionmapi(message) + System.lineSeparator());
											e.printStackTrace();
											continue;
										}

									}

									lbl_progressreport.setText("Total Message Saved Count  " + count_destination + "  "
											+ folder.getName().replaceAll("[\\[\\]]", "") + "   Extarcting messsage "
											+ message.getSubject());

								} catch (Exception e) {

									if (e.getMessage().contains(
											"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
											|| e.getMessage().contains("ConnectFailure")
											|| e.getMessage().contains("Operation has been canceled")
											|| e.getMessage().contains("Operation failed")
											|| e.getMessage().contains("Rate limit hit") || e.getMessage().contains(
													"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
										Progressbar.setVisible(false);

									}
									connectionHandle(e.getMessage());

									continue;
								}
							}

						}
					}
				}
				if (folder.getSubFolders().size() > 0) {

					getFolderforimap(folder, path1);

				}

				path = path.replace("." + folder.getName().replaceAll("[\\[\\]]", ""), "");

			}
		} catch (Exception e) {
			return;

		} finally {
			storage.dispose();
		}

	}

	private void getFolderforimap(OlmFolder folder, String Foldercheck) {
		try {
			MailConversionOptions options = new MailConversionOptions();
			for (OlmFolder subFolder : folder.getSubFolders()) {

				String Folderna = subFolder.getName().replaceAll("[\\[\\]]", "").trim();
				foldermessagecount = 0;
				String Folderchecks = Foldercheck + File.separator + Folderna;
				// path = path1 + File.separator + subFolder.getName().replaceAll("[\\[\\]]",
				// "").replaceAll("[\\[\\]]",
				// "");
				boolean s22 = false;
				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (pstfolderlist.get(l).equalsIgnoreCase(Folderchecks)) {

						path = path + "." + subFolder.getName().replaceAll("[\\[\\]]", "");

						Folder = path;

						lbl_progressreport.setText("Getting Folder " + folder.getName().replaceAll("[\\[\\]]", ""));

						clientforimap_output.createFolder(iconnforimap_output, path);
						clientforimap_output.selectFolder(iconnforimap_output, path);

						foldermessagecount = 0;

						if (subFolder.hasMessages()) {
							listduplicacy.clear();
							try {

								long foldercount = subFolder.getMessageCount();
								Iterator<MapiMessage> it = storage.enumerateMessages(subFolder).iterator();
								for (int i11 = 0; i11 < foldercount; i11++) {
									try {
										if (!it.hasNext() || (it.next() == null)) {
											System.out.println("Null");
											continue;
										}
									} catch (Exception e) {
										e.printStackTrace();
									}

									try {
										MapiMessage message1 = it.next();
										if ((count_destination % 1000) == 0) {
											if (s22) {
												connectionHandle1();
											}
											s22 = true;
										}
										MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
										MailConversionOptions de = new MailConversionOptions();
										MailMessage mess = message1.toMailMessage(de);
										if (chckbxMigrateOrBackup.isSelected()) {
											mess.getAttachments().clear();
										}
										Date c = mess.getDate();

										String date = c.toString();
										String[] datearr = date.split("\\s");
										String[] time = datearr[3].split(":");
										int i = Integer.parseInt(time[0]);

										Calendar calendar = new GregorianCalendar();
										TimeZone timeZone = calendar.getTimeZone();
										TimeZone timezone = TimeZone.getTimeZone(timeZone.getID());
										int ms = timezone.getOffset(Calendar.ZONE_OFFSET);
										if (i < 1) {
											time[0] = String.valueOf(i + 12 + (convertMillisintohour(ms)));
										} else {
											time[0] = String.valueOf(i + (convertMillisintohour(ms)));
										}

										int i1 = Integer.parseInt(time[1]);
										time[1] = String.valueOf(i1 + (convertMillisintomin(ms)));

										date = date.replace(datearr[3], time[0] + ":" + time[1] + ":" + time[2]);

										Calendar call = Calendar.getInstance();
										call.setTime(c);
										call.set(Calendar.HOUR_OF_DAY, Integer.parseInt(time[0]));
										call.set(Calendar.MINUTE, Integer.parseInt(time[1]));
										call.set(Calendar.SECOND, Integer.parseInt(time[2]));
										call.set(Calendar.MILLISECOND, 0);
										call.setTimeZone(TimeZone.getDefault());
										SimpleDateFormat sdf = new SimpleDateFormat("MMM dd HH:mm:ss z yyyy");
										System.out.println(sdf.format(call.getTime()));
										String strDate = sdf.format(call.getTime());
										Date c1 = sdf.parse(strDate);
										mess.setDate(c1);

										MapiMessage message = MapiMessage.fromMailMessage(mess, d);
										int bct = message.getBodyType();
										if (bct == 0) {
											message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
										} else {
											message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
										}

//										if (stop) {
//											break;
//										}
										if (stop) {
											break;
										}
										if (demo) {
											if (foldermessagecount == All_Data.demo_count) {
												break;
											}
										}
										if ((foldermessagecount % 100) == 0) {
											System.gc();
										}

										foldermessagecount++;
										MailMessage mess1 = message.toMailMessage(options);
										Date Receiveddate = message.getDeliveryTime();
										if (message.getMessageClass().equals("IPM.Contact")) {
											MailMessage mapi = new MailMessage();
											try {
												MapiContact con = (MapiContact) message.toMapiMessageItem();
												try {
													mapi.setSubject(con.getSubject());
												} catch (Exception e) {

													mapi.setSubject("");
												}
												try {
													mapi.setBody(con.getBody());
												} catch (Exception e) {

													mapi.setBody("");
												}
												con.save(temppathm + File.separator + mf.namingconventionmapi(message)
														+ ".vcf", ContactSaveFormat.VCard);
												File file = new File(temppathm + File.separator
														+ mf.namingconventionmapi(message) + ".vcf");
												mapi.addAttachment(new Attachment(temppathm + File.separator
														+ mf.namingconventionmapi(message) + ".vcf"));
												file.delete();

												clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
												count_destination++;
												foldermessagecount++;
												// count++;

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
														+ mf.namingconventionmapi(message) + System.lineSeparator());
												e.printStackTrace();
												if (e.getMessage().contains(
														"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
														|| e.getMessage().contains("ConnectFailure")
														|| e.getMessage().contains("Operation has been canceled")
														|| e.getMessage().contains("Operation failed")
														|| e.getMessage().contains("Rate limit hit")
														|| e.getMessage().contains(
																"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
													Progressbar.setVisible(false);

												}
												connectionHandle(e.getMessage());

												continue;
											}

										} else if (message.getMessageClass().equals("IPM.Appointment")) {
											MailMessage mapi = new MailMessage();
											try {

												MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

												try {
													mapi.setSubject(cal.getSubject());
												} catch (Exception e) {

													mapi.setSubject("");
												}
												try {
													mapi.setBody(cal.getBody());
												} catch (Exception e) {

													mapi.setBody("");
												}
												cal.save(temppathm + File.separator + mf.namingconventionmapi(message)
														+ ".ics", AppointmentSaveFormat.Ics);
												File file = new File(temppathm + File.separator
														+ mf.namingconventionmapi(message) + ".ics");

												mapi.addAttachment(new Attachment(temppathm + File.separator
														+ mf.namingconventionmapi(message) + ".ics"));
												file.delete();
												Receiveddate = cal.getStartDate();
												if (chckbx_calender_box.isSelected()) {
													if (Receiveddate.after(Calenderfilterstartdate)
															&& Receiveddate.before(Calenderfilterenddate)) {

														clientforimap_output.appendMessage(iconnforimap_output, path,
																mapi);
														count_destination++;
														foldermessagecount++;
														// count++;
													} else if (Receiveddate.equals(Calenderfilterstartdate)
															|| Receiveddate.equals(Calenderfilterenddate)) {

														clientforimap_output.appendMessage(iconnforimap_output, path,
																mapi);
														count_destination++;
														foldermessagecount++;
														// count++;
													}

												} else {

													clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
													count_destination++;
													foldermessagecount++;
													// count++;
												}

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
												if (e.getMessage().contains(
														"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
														|| e.getMessage().contains("ConnectFailure")
														|| e.getMessage().contains("Operation failed")
														|| e.getMessage().contains("Rate limit hit")
														|| e.getMessage().contains("Operation has been canceled")
														|| e.getMessage().contains(
																"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
													Progressbar.setVisible(false);

												}
												connectionHandle(e.getMessage());
												mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
														+ mf.namingconventionmapi(message) + System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										} else if (message.getMessageClass().equals("IPM.StickyNote")
												|| message.getMessageClass().equals("IPM.Task")) {

											String s = filetype;
											try {

												filetype = "MSG";
												if (message.getMessageClass().equals("IPM.Task")) {
													MapiTask task = (MapiTask) message.toMapiMessageItem();
													Receiveddate = task.getStartDate();
												}

												if (task_box.isSelected()) {
													if (Receiveddate.after(taskfilterstartdate)
															&& Receiveddate.before(taskfilterenddate)) {
														clientforimap_output.appendMessage(iconnforimap_output, path,
																mess1);
														count_destination++;
														foldermessagecount++;
														// count++;
													} else if (Receiveddate.equals(taskfilterstartdate)
															|| Receiveddate.equals(taskfilterenddate)) {

														clientforimap_output.appendMessage(iconnforimap_output, path,
																mess1);

														count_destination++;
														foldermessagecount++;
														// count++;

													}

												} else {

													clientforimap_output.appendMessage(iconnforimap_output, path,
															mess1);
													count_destination++;
													foldermessagecount++;
													// count++;

												}

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
												if (e.getMessage().contains(
														"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
														|| e.getMessage().contains("ConnectFailure")
														|| e.getMessage().contains("Operation failed")
														|| e.getMessage().contains("Rate limit hit")
														|| e.getMessage().contains("Operation has been canceled")
														|| e.getMessage().contains(
																"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
													Progressbar.setVisible(false);

												}
												connectionHandle(e.getMessage());
												mf.logger.warning("Exception : " + e.getMessage() + "Task" + " "
														+ mf.namingconventionmapi(message) + System.lineSeparator());
												e.printStackTrace();
												continue;
											} finally {
												filetype = s;
											}

										} else {
											try {

												String messageid = mailimap(mess1, Receiveddate, destination_path);
												if (((message.getFlags()
														& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
													clientforimap_output.changeMessageFlags(iconnforimap_output,
															messageid, ImapMessageFlags.isRead());

												} else {

													clientforimap_output.removeMessageFlags(iconnforimap_output,
															messageid, ImapMessageFlags.isRead());

												}

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
												if (e.getMessage().contains(
														"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
														|| e.getMessage().contains("ConnectFailure")
														|| e.getMessage().contains("Operation failed")
														|| e.getMessage().contains("Rate limit hit")
														|| e.getMessage().contains("Operation has been canceled")
														|| e.getMessage().contains(
																"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
													Progressbar.setVisible(false);

												}
												connectionHandle(e.getMessage());
												mf.logger.warning("Exception : " + e.getMessage() + "Message " + " "
														+ mf.namingconventionmapi(message) + System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										}

										lbl_progressreport.setText("Total Message Saved Count  " + count_destination
												+ "  " + subFolder.getName().replaceAll("[\\[\\]]", "")
												+ "   Extarcting messsage " + message.getSubject());

									} catch (Exception e) {

										if (e.getMessage().contains(
												"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
												|| e.getMessage().contains("ConnectFailure")
												|| e.getMessage().contains("Operation failed")
												|| e.getMessage().contains("Rate limit hit")
												|| e.getMessage().contains("Operation has been canceled")
												|| e.getMessage().contains(
														"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
											Progressbar.setVisible(false);

										}
										connectionHandle(e.getMessage());

										continue;
									}
								}
							} catch (Exception e) {
								for (int i = 0; i < 1; i++) {
									e.printStackTrace();
									continue;
								}
							}
						}
					}
				}
				// read sub-folders
				if (subFolder.getSubFolders().size() > 0) {

					getFolderforimap(subFolder, Folderchecks);

				}

				path = path.replace("." + subFolder.getName().replaceAll("[\\[\\]]", ""), "");
				Folderchecks = removefolder(Folderchecks);
			}

		} catch (Exception e) {
			return;
		}
	}

	public void ConvertOLM_word() {
		storage = new OlmStorage(filepath);

		try {
			for (OlmFolder folder : storage.getFolderHierarchy()) {
				String Folder = folder.getName().replaceAll("[\\[\\]]", "").trim();
				String path3 = Folder;
				path = path + File.separator + Folder;
				foldermessagecount = 0;
				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (pstfolderlist.get(l).equalsIgnoreCase(path3)) {

						lbl_progressreport.setText("Getting Folder " + folder.getName().replaceAll("[\\[\\]]", ""));

						Folder = path;
						String pathfolder = "";
						if (chckbxMaintainFolderStructure.isSelected()) {
							new File(destination_path + File.separator + path).mkdirs();
							pathfolder = path;

						}

						if (folder.hasMessages()) {
							listduplicacy.clear();
							long foldercount = folder.getMessageCount();
							Iterator<MapiMessage> it = storage.enumerateMessages(folder).iterator();
							for (int i11 = 0; i11 < foldercount; i11++) {
								try {
									if (!it.hasNext() || (it.next() == null)) {
										System.out.println("Null");
										continue;
									}
								} catch (Exception e) {
									e.printStackTrace();
								}

								try {
									MapiMessage message1 = it.next();

									MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
									MailConversionOptions de = new MailConversionOptions();
									MailMessage mess = message1.toMailMessage(de);
									if (chckbxMigrateOrBackup.isSelected()) {
										mess.getAttachments().clear();
									}
									Date c = mess.getDate();

									String date = c.toString();
									String[] datearr = date.split("\\s");
									String[] time = datearr[3].split(":");
									int i = Integer.parseInt(time[0]);

									Calendar calendar = new GregorianCalendar();
									TimeZone timeZone = calendar.getTimeZone();
									TimeZone timezone = TimeZone.getTimeZone(timeZone.getID());
									int ms = timezone.getOffset(Calendar.ZONE_OFFSET);
									if (i < 1) {
										time[0] = String.valueOf(i + 12 + (convertMillisintohour(ms)));
									} else {
										time[0] = String.valueOf(i + (convertMillisintohour(ms)));
									}

									int i1 = Integer.parseInt(time[1]);
									time[1] = String.valueOf(i1 + (convertMillisintomin(ms)));

									date = date.replace(datearr[3], time[0] + ":" + time[1] + ":" + time[2]);

									Calendar call = Calendar.getInstance();
									call.setTime(c);
									call.set(Calendar.HOUR_OF_DAY, Integer.parseInt(time[0]));
									call.set(Calendar.MINUTE, Integer.parseInt(time[1]));
									call.set(Calendar.SECOND, Integer.parseInt(time[2]));
									call.set(Calendar.MILLISECOND, 0);
									call.setTimeZone(TimeZone.getDefault());
									SimpleDateFormat sdf = new SimpleDateFormat("MMM dd HH:mm:ss z yyyy");
									System.out.println(sdf.format(call.getTime()));
									String strDate = sdf.format(call.getTime());
									Date c1 = sdf.parse(strDate);
									mess.setDate(c1);
									pdf_date = c1;
									MapiMessage message = MapiMessage.fromMailMessage(mess, d);
									int bct = message.getBodyType();
									if (bct == 0) {
										message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
									} else {
										message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
									}

//									if (stop) {
//										break;
//									}
									if (stop) {
										break;
									}
									if (demo) {
										if (foldermessagecount == All_Data.demo_count) {
											break;
										}
									}
									if ((foldermessagecount % 100) == 0) {
										System.gc();
									}

									if (message.getMessageClass().equals("IPM.Contact")) {
										try {
											MapiContact con = (MapiContact) message.toMapiMessageItem();

											con.save(
													destination_path + File.separator + pathfolder + File.separator
															+ contactname(con) + "_" + foldermessagecount + ".vcf",
													ContactSaveFormat.VCard);
											count_destination++;
											foldermessagecount++;

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
													+ foldermessagecount + mf.namingconventionmapi(message)
													+ System.lineSeparator());
											e.printStackTrace();
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.Appointment")) {

										try {

											MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

											cal.save(
													destination_path + File.separator + pathfolder + File.separator
															+ foldermessagecount + "_"
															+ mf.namingconventionforcal(message, cal) + ".ics",
													AppointmentSaveFormat.Ics);
											count_destination++;
											foldermessagecount++;

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
													+ foldermessagecount + mf.namingconventionmapi(message)
													+ System.lineSeparator());
											e.printStackTrace();
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.StickyNote")
											|| message.getMessageClass().equals("IPM.Task")) {
										try {
											Date Receiveddate = message.getDeliveryTime();
											Mapiword mf1 = new Mapiword(mf, filetype, destination_path, pathfolder,
													count_destination, temppathm, message, Receiveddate,
													task_box.isSelected(), taskfilterstartdate, taskfilterenddate,
													filepath);
											Thread saveTh = new Thread(mf1);
											saveTh.start();
											saveTh.join();
											count_destination = mf1.k;
										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Task" + " "
													+ foldermessagecount + mf.namingconventionmapi(message)
													+ System.lineSeparator());
											e.printStackTrace();
											continue;
										}

									}

									else {

										// //int messageprogress = (countr * 100) / messagesize;
										// iprogressBar_message_p3.setValue(messageprogress);

										Date Receiveddate = message.getDeliveryTime();
										Mapiword mf1 = new Mapiword(mf, filetype, destination_path, pathfolder,
												count_destination, temppathm, message, Receiveddate,
												task_box.isSelected(), mailfilterstartdate, mailfilterenddate,
												filepath);
										Thread saveTh = new Thread(mf1);
										saveTh.start();
										saveTh.join();
										count_destination = mf1.k;
									}

									lbl_progressreport.setText("Total Message Saved Count  " + count_destination + "  "
											+ Folder + "   Extarcting messsage " + message.getSubject());

								} catch (Exception e) {

									continue;
								}
							}

						}
					}
				}
				if (folder.getSubFolders().size() > 0) {

					getFolderforword(folder, storage, path, path3);

				}
				path = removefolder(path);
			}
		} catch (Exception e) {
			return;

		} finally {
			storage.dispose();
		}
	}

	private void getFolderforword(OlmFolder folder, OlmStorage storage, String path1, String path3) {

		try {

			for (OlmFolder subFolder : folder.getSubFolders()) {
				path = path1 + File.separator
						+ subFolder.getName().replaceAll("[\\[\\]]", "").replaceAll("[\\[\\]]", "").trim();
				path3 = path3 + File.separator
						+ subFolder.getName().replaceAll("[\\[\\]]", "").replaceAll("[\\[\\]]", "").trim();
				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					foldermessagecount = 0;
					if (pstfolderlist.get(l).equalsIgnoreCase(path3)) {
						// System.out.println(Folder);
						// int count = 1;

						Folder = path;

						lbl_progressreport.setText("Getting Folder " + folder.getName().replaceAll("[\\[\\]]", ""));

						String pathfolder = "";
						if (chckbxMaintainFolderStructure.isSelected()) {
							new File(destination_path + File.separator + path).mkdirs();
							pathfolder = path;

						}

						foldermessagecount = 0;
						// int messagesize = 0;

						if (subFolder.hasMessages()) {
							listduplicacy.clear();
							try {
								long foldercount = subFolder.getMessageCount();
								Iterator<MapiMessage> it = storage.enumerateMessages(subFolder).iterator();
								for (int i11 = 0; i11 < foldercount; i11++) {
									try {
										if (!it.hasNext() || (it.next() == null)) {
											System.out.println("Null");
											continue;
										}
									} catch (Exception e) {
										e.printStackTrace();
									}

									try {
										MapiMessage message1 = it.next();

										MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
										MailConversionOptions de = new MailConversionOptions();
										MailMessage mess = message1.toMailMessage(de);
										if (chckbxMigrateOrBackup.isSelected()) {
											mess.getAttachments().clear();
										}
										Date c = mess.getDate();

										String date = c.toString();
										String[] datearr = date.split("\\s");
										String[] time = datearr[3].split(":");
										int i = Integer.parseInt(time[0]);

										Calendar calendar = new GregorianCalendar();
										TimeZone timeZone = calendar.getTimeZone();
										TimeZone timezone = TimeZone.getTimeZone(timeZone.getID());
										int ms = timezone.getOffset(Calendar.ZONE_OFFSET);
										if (i < 1) {
											time[0] = String.valueOf(i + 12 + (convertMillisintohour(ms)));
										} else {
											time[0] = String.valueOf(i + (convertMillisintohour(ms)));
										}

										int i1 = Integer.parseInt(time[1]);
										time[1] = String.valueOf(i1 + (convertMillisintomin(ms)));

										date = date.replace(datearr[3], time[0] + ":" + time[1] + ":" + time[2]);

										Calendar call = Calendar.getInstance();
										call.setTime(c);
										call.set(Calendar.HOUR_OF_DAY, Integer.parseInt(time[0]));
										call.set(Calendar.MINUTE, Integer.parseInt(time[1]));
										call.set(Calendar.SECOND, Integer.parseInt(time[2]));
										call.set(Calendar.MILLISECOND, 0);
										call.setTimeZone(TimeZone.getDefault());
										SimpleDateFormat sdf = new SimpleDateFormat("MMM dd HH:mm:ss z yyyy");
										System.out.println(sdf.format(call.getTime()));
										String strDate = sdf.format(call.getTime());
										Date c1 = sdf.parse(strDate);
										mess.setDate(c1);

										MapiMessage message = MapiMessage.fromMailMessage(mess, d);
										int bct = message.getBodyType();
										if (bct == 0) {
											message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
										} else {
											message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
										}

//										if (stop) {
//											break;
//										}
										if (stop) {
											break;
										}
										if (demo) {
											if (foldermessagecount == All_Data.demo_count) {
												break;
											}
										}
										if ((foldermessagecount % 100) == 0) {
											System.gc();
										}

										if (message.getMessageClass().equals("IPM.Contact")) {
											try {
												MapiContact con = (MapiContact) message.toMapiMessageItem();

												con.save(
														destination_path + File.separator + pathfolder + File.separator
																+ contactname(con) + "_" + foldermessagecount + ".vcf",
														ContactSaveFormat.VCard);
												count_destination++;
												foldermessagecount++;

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
														+ foldermessagecount + mf.namingconventionmapi(message)
														+ System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										} else if (message.getMessageClass().equals("IPM.Appointment")) {

											try {

												MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

												cal.save(
														destination_path + File.separator + pathfolder + File.separator
																+ foldermessagecount + "_"
																+ mf.namingconventionforcal(message, cal) + ".ics",
														AppointmentSaveFormat.Ics);

												count_destination++;
												foldermessagecount++;

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
														+ foldermessagecount + mf.namingconventionmapi(message)
														+ System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										} else if (message.getMessageClass().equals("IPM.StickyNote")
												|| message.getMessageClass().equals("IPM.Task")) {
											try {
												Date Receiveddate = message.getDeliveryTime();
												Mapiword mf1 = new Mapiword(mf, filetype, destination_path, pathfolder,
														count_destination, temppathm, message, Receiveddate,
														task_box.isSelected(), taskfilterstartdate, taskfilterenddate,
														filepath);
												Thread saveTh = new Thread(mf1);
												saveTh.start();
												saveTh.join();

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Task" + " "
														+ foldermessagecount + mf.namingconventionmapi(message)
														+ System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										}

										else {

											Date Receiveddate = message.getDeliveryTime();

											Mapiword mf1 = new Mapiword(mf, filetype, destination_path, pathfolder,
													count_destination, temppathm, message, Receiveddate,
													chckbx_Mail_Filter.isSelected(), mailfilterstartdate,
													mailfilterenddate, filepath);
											Thread saveTh = new Thread(mf1);
											saveTh.start();
											saveTh.join();

										}

										lbl_progressreport.setText("Total Message Saved Count  " + count_destination
												+ "  " + Folder + "   Extarcting messsage " + message.getSubject());

									} catch (Exception e) {

										continue;
									}
								}
							} catch (Exception e) {
								for (int i = 0; i < 1; i++) {
									e.printStackTrace();
									continue;
								}
							}
						}
					}
				}

				if (subFolder.getSubFolders().size() > 0) {

					getFolderforword(subFolder, storage, path, path3);

				}

				path = removefolder(path);
				path3 = removefolder(path3);
			}

		} catch (Exception e) {
			return;
		}
	}

	public void ConvertOLM_mbox() {
		storage = new OlmStorage(filepath);

		try {
			for (OlmFolder folder : storage.getFolderHierarchy()) {
				String path3 = folder.getName().replaceAll("[\\[\\]]", "").trim();
				path = path + File.separator + path3;

				foldermessagecount = 0;
				String kil = path;
				for (int l = 0; l < pstfolderlist.size(); l++) {
					if (pstfolderlist.get(l).equalsIgnoreCase(path3)) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						Folder = path3;
						lbl_progressreport.setText("Getting Folder " + path3);

						if (filetype.equalsIgnoreCase("Thunderbird")) {
							path = path + ".sbd";
						}

						new File(destination_path + File.separator + path).mkdirs();

						MboxrdStorageWriter wr = null;

						if (filetype.equalsIgnoreCase("Opera Mail")) {
							wr = new MboxrdStorageWriter(destination_path + File.separator + path + File.separator
									+ getRidOfIllegalFileNameCharacters(Folder) + ".mbs", false);
						} else if (filetype.equalsIgnoreCase("Thunderbird")) {
							wr = new MboxrdStorageWriter(destination_path + File.separator + kil, false);
						} else {
							wr = new MboxrdStorageWriter(destination_path + File.separator + path + File.separator
									+ getRidOfIllegalFileNameCharacters(Folder) + ".mbx", false);
						}

						if (folder.hasMessages()) {
							listduplicacy.clear();
							long foldercount = folder.getMessageCount();
							Iterator<MapiMessage> it = storage.enumerateMessages(folder).iterator();
							for (int i11 = 0; i11 < foldercount; i11++) {
								try {
									if (!it.hasNext() || (it.next() == null)) {
										System.out.println("Null");
										continue;
									}
								} catch (Exception e) {
									e.printStackTrace();
								}

								try {
									MapiMessage message1 = it.next();
									MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
									MailConversionOptions de = new MailConversionOptions();
									MailMessage mess = message1.toMailMessage(de);
									if (chckbxMigrateOrBackup.isSelected()) {
										mess.getAttachments().clear();
									}
									Date c = mess.getDate();

									String date = c.toString();
									String[] datearr = date.split("\\s");
									String[] time = datearr[3].split(":");
									int i = Integer.parseInt(time[0]);

									Calendar calendar = new GregorianCalendar();
									TimeZone timeZone = calendar.getTimeZone();
									TimeZone timezone = TimeZone.getTimeZone(timeZone.getID());
									int ms = timezone.getOffset(Calendar.ZONE_OFFSET);
									if (i < 1) {
										time[0] = String.valueOf(i + 12 + (convertMillisintohour(ms)));
									} else {
										time[0] = String.valueOf(i + (convertMillisintohour(ms)));
									}

									int i1 = Integer.parseInt(time[1]);
									time[1] = String.valueOf(i1 + (convertMillisintomin(ms)));

									date = date.replace(datearr[3], time[0] + ":" + time[1] + ":" + time[2]);

									Calendar call = Calendar.getInstance();
									call.setTime(c);
									call.set(Calendar.HOUR_OF_DAY, Integer.parseInt(time[0]));
									call.set(Calendar.MINUTE, Integer.parseInt(time[1]));
									call.set(Calendar.SECOND, Integer.parseInt(time[2]));
									call.set(Calendar.MILLISECOND, 0);
									call.setTimeZone(TimeZone.getDefault());
									SimpleDateFormat sdf = new SimpleDateFormat("MMM dd HH:mm:ss z yyyy");
									System.out.println(sdf.format(call.getTime()));
									String strDate = sdf.format(call.getTime());
									Date c1 = sdf.parse(strDate);
									mess.setDate(c1);

									MapiMessage message = MapiMessage.fromMailMessage(mess, d);
									int bct = message.getBodyType();
									if (bct == 0) {
										message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
									} else {
										message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
									}
//									if (stop) {
//										break;
//									}
									if (stop) {
										break;
									}
									if (demo) {
										if (foldermessagecount == All_Data.demo_count) {
											break;
										}
									}
									if ((foldermessagecount % 100) == 0) {
										System.gc();
									}

									Date Receiveddate = message.getDeliveryTime();
									if (message.getMessageClass().equals("IPM.Contact")) {
										MailMessage mapi = new MailMessage();
										try {
											MapiContact con = (MapiContact) message.toMapiMessageItem();
											try {
												mapi.setSubject(con.getSubject());
											} catch (Exception e) {

												mapi.setSubject("");
											}
											try {
												mapi.setBody(con.getBody());
											} catch (Exception e) {

												mapi.setBody("");
											}
											con.save(temppathm + File.separator + mf.namingconventionmapi(message)
													+ ".vcf", ContactSaveFormat.VCard);
											File file = new File(temppathm + File.separator
													+ mf.namingconventionmapi(message) + ".vcf");
											mapi.addAttachment(new Attachment(temppathm + File.separator
													+ mf.namingconventionmapi(message) + ".vcf"));
											file.delete();

											lbl_progressreport.setText("Extracting message " + message.getSubject());
											wr.writeMessage(mapi);

											count_destination++;
											foldermessagecount++;

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
													+ System.lineSeparator());
											return;
										}

									} else if (message.getMessageClass().equals("IPM.Appointment")) {
										MailMessage mapi = new MailMessage();
										try {

											MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

											try {
												mapi.setSubject(cal.getSubject());
											} catch (Exception e) {

												mapi.setSubject("");
											}
											try {
												mapi.setBody(cal.getBody());
											} catch (Exception e) {

												mapi.setBody("");
											}
											cal.save(temppathm + File.separator + mf.namingconventionmapi(message)
													+ ".ics", AppointmentSaveFormat.Ics);
											File file = new File(temppathm + File.separator
													+ mf.namingconventionmapi(message) + ".ics");

											mapi.addAttachment(new Attachment(temppathm + File.separator
													+ mf.namingconventionmapi(message) + ".ics"));
											file.delete();
											if (chckbx_calender_box.isSelected()) {
												if (Receiveddate.after(Calenderfilterstartdate)
														&& Receiveddate.before(Calenderfilterenddate)) {
													lbl_progressreport
															.setText("Extracting message " + message.getSubject());
													wr.writeMessage(mapi);
													foldermessagecount++;
												}

											} else {
												lbl_progressreport
														.setText("Extracting message " + message.getSubject());
												wr.writeMessage(mapi);
												foldermessagecount++;
											}

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
													+ System.lineSeparator());
											e.printStackTrace();
											return;
										}

									} else if (message.getMessageClass().equals("IPM.StickyNote")
											|| message.getMessageClass().equals("IPM.Task")) {
										try {

											if (message.getMessageClass().equals("IPM.Task")) {
												MapiTask task = (MapiTask) message.toMapiMessageItem();
												Receiveddate = task.getStartDate();
											}

											if (task_box.isSelected()) {
												if (Receiveddate.after(taskfilterstartdate)
														&& Receiveddate.before(taskfilterenddate)) {
													wr.writeMessage(mess);
													count_destination++;
													foldermessagecount++;
													// //count++;
												} else if (Receiveddate.equals(taskfilterstartdate)
														|| Receiveddate.equals(taskfilterenddate)) {

													wr.writeMessage(mess);
													count_destination++;
													foldermessagecount++;
													// //count++;
												}

											} else {
												wr.writeMessage(mess);
												count_destination++;
												foldermessagecount++;
												// //count++;foldermessagecount++;
											}

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Task" + " "
													+ System.lineSeparator());
											e.printStackTrace();
											continue;
										}

									} else {
										try {

											mailmbox(mess, Receiveddate, wr);

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Message" + " "
													+ mf.namingconventionmapi(message) + System.lineSeparator());
											continue;
										}

									}
									lbl_progressreport.setText("Total Message Saved Count  " + count_destination + "  "
											+ folder.getName().replaceAll("[\\[\\]]", "") + "   Extarcting messsage "
											+ message1.getSubject());

								} catch (Exception e) {

									continue;
								}
							}

						}

						wr.dispose();
					}
				}
				if (folder.getSubFolders().size() > 0) {

					getFolderformbox(folder, storage, path, path3);

				}

				if (filetype.equalsIgnoreCase("Thunderbird")) {
					path = removefolder(path);
				} else {
					path3 = removefolder(path3);
				}

			}
		} catch (Exception e) {
			return;

		} finally {
			storage.dispose();
		}

	}

	private void getFolderformbox(OlmFolder folder, OlmStorage storage, String path1, String path3) {

		try {

			for (OlmFolder subFolder : folder.getSubFolders()) {
				String subfol = subFolder.getName().replaceAll("[\\[\\]]", "").replaceAll("[\\[\\]]", "").trim();
				path = path1 + File.separator + subfol;
				path3 = path3 + File.separator + subfol;
				String sop = path1 + File.separator + subfol;
				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					foldermessagecount = 0;
					if (pstfolderlist.get(l).equalsIgnoreCase(path3)) {
						// System.out.println(Folder);
						// int count = 1;

						Folder = subfol;

						lbl_progressreport.setText("Getting Folder " + path);

						if (filetype.equalsIgnoreCase("Thunderbird")) {
							path = path + ".sbd";
						}

						new File(destination_path + File.separator + path).mkdirs();
						MboxrdStorageWriter wr = null;
						if (filetype.equalsIgnoreCase("Opera Mail")) {
							wr = new MboxrdStorageWriter(destination_path + File.separator + path + File.separator
									+ getRidOfIllegalFileNameCharacters(Folder) + ".mbs", false);
						} else if (filetype.equalsIgnoreCase("Thunderbird")) {
							wr = new MboxrdStorageWriter(destination_path + File.separator + sop, false);
						} else {
							wr = new MboxrdStorageWriter(destination_path + File.separator + path + File.separator
									+ getRidOfIllegalFileNameCharacters(Folder) + ".mbx", false);
						}

						foldermessagecount = 0;

						if (subFolder.hasMessages()) {
							listduplicacy.clear();
							try {

								long foldercount = subFolder.getMessageCount();
								Iterator<MapiMessage> it = storage.enumerateMessages(subFolder).iterator();
								for (int i11 = 0; i11 < foldercount; i11++) {
									try {
										if (!it.hasNext() || (it.next() == null)) {
											System.out.println("Null");
											continue;
										}
									} catch (Exception e) {
										e.printStackTrace();
									}

									try {
										MapiMessage message1 = it.next();
										MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
										MailConversionOptions de = new MailConversionOptions();
										MailMessage mess = message1.toMailMessage(de);
										if (chckbxMigrateOrBackup.isSelected()) {
											mess.getAttachments().clear();
										}
										Date c = mess.getDate();

										String date = c.toString();
										String[] datearr = date.split("\\s");
										String[] time = datearr[3].split(":");
										int i = Integer.parseInt(time[0]);

										Calendar calendar = new GregorianCalendar();
										TimeZone timeZone = calendar.getTimeZone();
										TimeZone timezone = TimeZone.getTimeZone(timeZone.getID());
										int ms = timezone.getOffset(Calendar.ZONE_OFFSET);
										if (i < 1) {
											time[0] = String.valueOf(i + 12 + (convertMillisintohour(ms)));
										} else {
											time[0] = String.valueOf(i + (convertMillisintohour(ms)));
										}

										int i1 = Integer.parseInt(time[1]);
										time[1] = String.valueOf(i1 + (convertMillisintomin(ms)));

										date = date.replace(datearr[3], time[0] + ":" + time[1] + ":" + time[2]);

										Calendar call = Calendar.getInstance();
										call.setTime(c);
										call.set(Calendar.HOUR_OF_DAY, Integer.parseInt(time[0]));
										call.set(Calendar.MINUTE, Integer.parseInt(time[1]));
										call.set(Calendar.SECOND, Integer.parseInt(time[2]));
										call.set(Calendar.MILLISECOND, 0);
										call.setTimeZone(TimeZone.getDefault());
										SimpleDateFormat sdf = new SimpleDateFormat("MMM dd HH:mm:ss z yyyy");
										System.out.println(sdf.format(call.getTime()));
										String strDate = sdf.format(call.getTime());
										Date c1 = sdf.parse(strDate);
										mess.setDate(c1);

										MapiMessage message = MapiMessage.fromMailMessage(mess, d);
										int bct = message.getBodyType();
										if (bct == 0) {
											message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
										} else {
											message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
										}
//										if (stop) {
//											break;
//										}
										if (stop) {
											break;
										}
										if (demo) {
											if (foldermessagecount == All_Data.demo_count) {
												break;
											}
										}
										if ((foldermessagecount % 100) == 0) {
											System.gc();
										}

										Date Receiveddate = message.getDeliveryTime();
										if (message.getMessageClass().equals("IPM.Contact")) {
											MailMessage mapi = new MailMessage();
											try {
												MapiContact con = (MapiContact) message.toMapiMessageItem();
												try {
													mapi.setSubject(con.getSubject());
												} catch (Exception e) {

													mapi.setSubject("");
												}
												try {
													mapi.setBody(con.getBody());
												} catch (Exception e) {

													mapi.setBody("");
												}
												con.save(temppathm + File.separator + mf.namingconventionmapi(message)
														+ ".vcf", ContactSaveFormat.VCard);
												File file = new File(temppathm + File.separator
														+ mf.namingconventionmapi(message) + ".vcf");
												mapi.addAttachment(new Attachment(temppathm + File.separator
														+ mf.namingconventionmapi(message) + ".vcf"));
												file.delete();

												lbl_progressreport
														.setText("Extracting message " + message.getSubject());
												wr.writeMessage(mapi);

												count_destination++;
												foldermessagecount++;

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
														+ System.lineSeparator());
												return;
											}

										} else if (message.getMessageClass().equals("IPM.Appointment")) {
											MailMessage mapi = new MailMessage();
											try {

												MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();
												try {
													mapi.setSubject(cal.getSubject());
												} catch (Exception e) {

													mapi.setSubject("");
												}
												try {
													mapi.setBody(cal.getBody());
												} catch (Exception e) {

													mapi.setBody("");
												}
												cal.save(temppathm + File.separator + mf.namingconventionmapi(message)
														+ ".ics", AppointmentSaveFormat.Ics);
												File file = new File(temppathm + File.separator
														+ mf.namingconventionmapi(message) + ".ics");

												mapi.addAttachment(new Attachment(temppathm + File.separator
														+ mf.namingconventionmapi(message) + ".ics"));
												file.delete();
												if (chckbx_calender_box.isSelected()) {
													if (Receiveddate.after(Calenderfilterstartdate)
															&& Receiveddate.before(Calenderfilterenddate)) {
														lbl_progressreport
																.setText("Extracting message " + message.getSubject());
														wr.writeMessage(mapi);
														count_destination++;
														foldermessagecount++;

													}

												} else {
													lbl_progressreport
															.setText("Extracting message " + message.getSubject());
													wr.writeMessage(mapi);
													count_destination++;
													foldermessagecount++;
												}

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
														+ System.lineSeparator());
												e.printStackTrace();
												return;
											}

										} else if (message.getMessageClass().equals("IPM.StickyNote")
												|| message.getMessageClass().equals("IPM.Task")) {
											try {

												if (message.getMessageClass().equals("IPM.Task")) {
													MapiTask task = (MapiTask) message.toMapiMessageItem();
													Receiveddate = task.getStartDate();
												}

												if (task_box.isSelected()) {
													if (Receiveddate.after(taskfilterstartdate)
															&& Receiveddate.before(taskfilterenddate)) {
														wr.writeMessage(mess);
														count_destination++;
														foldermessagecount++;
														// //count++;
													} else if (Receiveddate.equals(taskfilterstartdate)
															|| Receiveddate.equals(taskfilterenddate)) {

														wr.writeMessage(mess);
														count_destination++;
														foldermessagecount++;
														// //count++;
													}

												} else {
													wr.writeMessage(mess);
													count_destination++;
													foldermessagecount++;
													// //count++;
												}

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Task" + " "
														+ System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										} else {
											try {

												mailmbox(mess, Receiveddate, wr);

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Message" + " "
														+ mf.namingconventionmapi(message) + System.lineSeparator());
												continue;
											}

										}
										lbl_progressreport.setText("Total Message Saved Count  " + count_destination
												+ "  " + subFolder.getName().replaceAll("[\\[\\]]", "")
												+ "   Extarcting messsage " + message1.getSubject());

									} catch (Exception e) {

										continue;
									}
								}
							} catch (Exception e) {
								for (int i = 0; i < 1; i++) {
									e.printStackTrace();
									continue;
								}
							}
							wr.dispose();
						}
					}
				}
				// read sub-folders
				if (subFolder.getSubFolders().size() > 0) {

					getFolderformbox(subFolder, storage, path, path3);

				}
				if (filetype.equalsIgnoreCase("Thunderbird")) {
					path = removefolder(path);
					path3 = removefolder(path3);
					sop = removefolder(sop);

				} else {
					path3 = removefolder(path3);
				}

			}

		} catch (Exception e) {
			return;
		}

	}

	public void ConvertOLM_pst() {
		storage = new OlmStorage(filepath);
		pst.createPredefinedFolder("Contact", StandardIpmFolder.Contacts, true);
		pst.createPredefinedFolder("Calender", StandardIpmFolder.Appointments, true);
		pst.createPredefinedFolder("Task", StandardIpmFolder.Notes, true);
		info1 = new FolderInfo();
		try {
			for (OlmFolder folder : storage.getFolderHierarchy()) {
//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				String path3 = folder.getName().replaceAll("[\\[\\]]", "");
				path = path + File.separator + folder.getName().replaceAll("[\\[\\]]", "").trim();
				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (pstfolderlist.get(l).equalsIgnoreCase(path3)) {
						foldermessagecount = 0;
						lbl_progressreport.setText("Getting Folder " + folder.getName());

						Folder = path;

						if (pst.getRootFolder().getSubFolder(path3, true) != null) {

							info = pst.getRootFolder().getSubFolder(path3, true);
						} else {

							info = pst.getRootFolder().addSubFolder(path3, true);
						}

						if (folder.hasMessages()) {
							listduplicacy.clear();
							long foldercount = folder.getMessageCount();
							Iterator<MapiMessage> it = storage.enumerateMessages(folder).iterator();
							for (int i11 = 0; i11 < foldercount; i11++) {
								try {
									if (!it.hasNext() || (it.next() == null)) {
										System.out.println("Null");
										continue;
									}
								} catch (Exception e) {
									e.printStackTrace();
								}

								MapiMessage message1 = it.next();
								try {

									MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
									MailConversionOptions de = new MailConversionOptions();
									MailMessage mess = message1.toMailMessage(de);
									if (chckbxMigrateOrBackup.isSelected()) {
										mess.getAttachments().clear();
									}
									Date c = mess.getDate();

									String date = c.toString();
									String[] datearr = date.split("\\s");
									String[] time = datearr[3].split(":");
									int i = Integer.parseInt(time[0]);

									Calendar calendar = new GregorianCalendar();
									TimeZone timeZone = calendar.getTimeZone();
									TimeZone timezone = TimeZone.getTimeZone(timeZone.getID());
									int ms = timezone.getOffset(Calendar.ZONE_OFFSET);
									if (i < 1) {
										time[0] = String.valueOf(i + 12 + (convertMillisintohour(ms)));
									} else {
										time[0] = String.valueOf(i + (convertMillisintohour(ms)));
									}

									int i1 = Integer.parseInt(time[1]);
									time[1] = String.valueOf(i1 + (convertMillisintomin(ms)));

									date = date.replace(datearr[3], time[0] + ":" + time[1] + ":" + time[2]);

									Calendar call = Calendar.getInstance();
									call.setTime(c);
									call.set(Calendar.HOUR_OF_DAY, Integer.parseInt(time[0]));
									call.set(Calendar.MINUTE, Integer.parseInt(time[1]));
									call.set(Calendar.SECOND, Integer.parseInt(time[2]));
									call.set(Calendar.MILLISECOND, 0);
									call.setTimeZone(TimeZone.getDefault());
									SimpleDateFormat sdf = new SimpleDateFormat("MMM dd HH:mm:ss z yyyy");
									System.out.println(sdf.format(call.getTime()));
									String strDate = sdf.format(call.getTime());
									Date c1 = sdf.parse(strDate);
									mess.setDate(c1);

									MapiMessage message = MapiMessage.fromMailMessage(mess, d);
									int bct = message.getBodyType();
									if (bct == 0) {
										message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
									} else {
										message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
									}
//									if (stop) {
//										break;
//									}
									if (stop) {
										break;
									}
									if (demo) {
										if (foldermessagecount == All_Data.demo_count) {
											break;
										}
									}
									if ((foldermessagecount % 100) == 0) {
										System.gc();
									}

									Date Receiveddate = message.getDeliveryTime();
									if (message.getMessageClass().equals("IPM.Contact")) {
										try {
											MapiContact con = (MapiContact) message.toMapiMessageItem();
											info1 = pst.getPredefinedFolder(StandardIpmFolder.Contacts);

											info1.addMapiMessageItem(con);
											count_destination++;
											foldermessagecount++;

										} catch (Error e) {
											mf.logger.warning("ERROR : " + e.getMessage() + System.lineSeparator());
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
													+ mf.namingconventionmapi(message) + System.lineSeparator());
											e.printStackTrace();
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.Appointment")) {

										try {

											MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();
											info1 = pst.getPredefinedFolder(StandardIpmFolder.Appointments);
											if (chckbx_calender_box.isSelected()) {
												if (Receiveddate.after(Calenderfilterstartdate)
														&& Receiveddate.before(Calenderfilterenddate)) {
													info1.addMapiMessageItem(cal);
													count_destination++;
													foldermessagecount++;
												}

											} else {
												info1.addMapiMessageItem(cal);
												count_destination++;
												foldermessagecount++;

											}

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
													+ System.lineSeparator());
											e.printStackTrace();
											continue;
										}

									} else if (message.getMessageClass().equals("IPM.StickyNote")
											|| message.getMessageClass().equals("IPM.Task")) {
										try {
											info1 = pst.getPredefinedFolder(StandardIpmFolder.Tasks);
											if (chckbx_Mail_Filter.isSelected()) {
												if (Receiveddate.after(mailfilterstartdate)
														&& Receiveddate.before(mailfilterenddate))

												{
													if (((message.getFlags()
															& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
														info.addMessage(message);
													} else {
														message.setMessageFlags(MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);

														info.addMessage(message);

													}

													count_destination++;
													foldermessagecount++;

												}

											} else {
												if (((message.getFlags()
														& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
													info.addMessage(message);
												} else {
													message.setMessageFlags(MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);

													info.addMessage(message);

												}

												count_destination++;
												foldermessagecount++;
											}

										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Task" + " "
													+ mf.namingconventionmapi(message) + System.lineSeparator());
											e.printStackTrace();
											continue;
										}

									} else {
										try {

											if (chckbxRemoveDuplicacy.isSelected()) {

												String input = duplicacymapi(message);

												if (!listduplicacy.contains(input)) {
													System.out.println("Not a duplicate message");
													listduplicacy.add(input);

													if (chckbx_Mail_Filter.isSelected()) {
														if (Receiveddate.after(mailfilterstartdate)
																&& Receiveddate.before(mailfilterenddate)) {
															count_destination++;
															foldermessagecount++;
															if (((message.getFlags()
																	& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
																info.addMessage(message);
															} else {
																message.setMessageFlags(
																		MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
																info.addMessage(message);

															}

														} else if (Receiveddate.equals(mailfilterstartdate)
																|| Receiveddate.equals(mailfilterenddate)) {
															count_destination++;
															foldermessagecount++;
															if (((message.getFlags()
																	& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
																info.addMessage(message);
															} else {
																message.setMessageFlags(
																		MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
																info.addMessage(message);

															}

														}
													} else {
														count_destination++;
														foldermessagecount++;
														if (((message.getFlags()
																& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
															info.addMessage(message);
														} else {
															message.setMessageFlags(
																	MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
															info.addMessage(message);

														}

													}
												}
											} else {
												if (chckbx_Mail_Filter.isSelected()) {
													if (Receiveddate.after(mailfilterstartdate)
															&& Receiveddate.before(mailfilterenddate)) {
														count_destination++;
														foldermessagecount++;
														if (((message.getFlags()
																& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
															info.addMessage(message);
														} else {
															message.setMessageFlags(
																	MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
															info.addMessage(message);

														}

													} else if (Receiveddate.equals(mailfilterstartdate)
															|| Receiveddate.equals(mailfilterenddate)) {
														count_destination++;
														foldermessagecount++;
														if (((message.getFlags()
																& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
															info.addMessage(message);
														} else {
															message.setMessageFlags(
																	MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
															info.addMessage(message);

														}

													}
												} else {
													count_destination++;
													foldermessagecount++;
													if (((message.getFlags()
															& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
														info.addMessage(message);
													} else {
														message.setMessageFlags(MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
														info.addMessage(message);

													}

												}

											}
										} catch (OutOfMemoryError ep) {
											mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
													+ mf.namingconventionmapi(message));
										} catch (Exception e) {
											mf.logger.warning("Exception : " + e.getMessage() + "Message" + " "
													+ mf.namingconventionmapi(message) + System.lineSeparator());
											e.printStackTrace();
											continue;
										}
									}

								} catch (Exception e) {

									continue;
								}

								lbl_progressreport.setText("Total Message Saved Count  " + count_destination + "  "
										+ folder.getName() + "   Extarcting messsage " + message1.getSubject());

							}
						}
					}
				}
				if (folder.getSubFolders().size() > 0) {

					getFolderforpst(folder, storage, path, path3);

				}
				path = removefolder(path);
			}
		} catch (Exception e) {
			return;

		} finally {
			storage.dispose();
		}

	}

	private void getFolderforpst(OlmFolder folder, OlmStorage storage, String path1, String path3) {

		try {
			for (OlmFolder subFolder : folder.getSubFolders()) {
				path = path1 + File.separator
						+ subFolder.getName().replaceAll("[\\[\\]]", "").replaceAll("[\\[\\]]", "").trim();
				path3 = path3 + File.separator
						+ subFolder.getName().replaceAll("[\\[\\]]", "").replaceAll("[\\[\\]]", "").trim();
				for (int l = 0; l < pstfolderlist.size(); l++) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					foldermessagecount = 0;
					if (pstfolderlist.get(l).equalsIgnoreCase(path3)) {
						// System.out.println(Folder);
						// int count = 1;

						Folder = path;

						lbl_progressreport.setText("Getting Folder " + path);

						if (pst.getRootFolder().getSubFolder(path3, true) != null) {

							info = pst.getRootFolder().getSubFolder(path3, true);
						} else {

							info = pst.getRootFolder().addSubFolder(path3, true);
						}

						foldermessagecount = 0;
						// int messagesize = 0;

						if (subFolder.hasMessages()) {
							listduplicacy.clear();
							try {

								long foldercount = subFolder.getMessageCount();
								Iterator<MapiMessage> it = storage.enumerateMessages(subFolder).iterator();
								for (int i11 = 0; i11 < foldercount; i11++) {
									try {
										if (!it.hasNext() || (it.next() == null)) {
											System.out.println("Null");
											continue;
										}
									} catch (Exception e) {
										e.printStackTrace();
									}
									MapiMessage message1 = it.next();

									try {

										MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
										MailConversionOptions de = new MailConversionOptions();
										MailMessage mess = message1.toMailMessage(de);
										if (chckbxMigrateOrBackup.isSelected()) {
											mess.getAttachments().clear();
										}
										Date c = mess.getDate();

										String date = c.toString();
										String[] datearr = date.split("\\s");
										String[] time = datearr[3].split(":");
										int i = Integer.parseInt(time[0]);

										Calendar calendar = new GregorianCalendar();
										TimeZone timeZone = calendar.getTimeZone();
										TimeZone timezone = TimeZone.getTimeZone(timeZone.getID());
										int ms = timezone.getOffset(Calendar.ZONE_OFFSET);
										if (i < 1) {
											time[0] = String.valueOf(i + 12 + (convertMillisintohour(ms)));
										} else {
											time[0] = String.valueOf(i + (convertMillisintohour(ms)));
										}

										int i1 = Integer.parseInt(time[1]);
										time[1] = String.valueOf(i1 + (convertMillisintomin(ms)));

										date = date.replace(datearr[3], time[0] + ":" + time[1] + ":" + time[2]);

										Calendar call = Calendar.getInstance();
										call.setTime(c);
										call.set(Calendar.HOUR_OF_DAY, Integer.parseInt(time[0]));
										call.set(Calendar.MINUTE, Integer.parseInt(time[1]));
										call.set(Calendar.SECOND, Integer.parseInt(time[2]));
										call.set(Calendar.MILLISECOND, 0);
										call.setTimeZone(TimeZone.getDefault());
										SimpleDateFormat sdf = new SimpleDateFormat("MMM dd HH:mm:ss z yyyy");
										System.out.println(sdf.format(call.getTime()));
										String strDate = sdf.format(call.getTime());
										Date c1 = sdf.parse(strDate);
										mess.setDate(c1);

										MapiMessage message = MapiMessage.fromMailMessage(mess, d);
										int bct = message.getBodyType();
										if (bct == 0) {
											message.setBodyContent(message.getBodyHtml(), BodyContentType.Html);
										} else {
											message.setBodyContent(message.getBodyRtf(), BodyContentType.Rtf);
										}
//										if (stop) {
//											break;
//										}
										if (stop) {
											break;
										}
										if (demo) {
											if (foldermessagecount == All_Data.demo_count) {
												break;
											}
										}
										if ((foldermessagecount % 100) == 0) {
											System.gc();
										}

										Date Receiveddate = message.getDeliveryTime();
										if (message.getMessageClass().equals("IPM.Contact")) {

											try {
												MapiContact con = (MapiContact) message.toMapiMessageItem();
												info1 = pst.getPredefinedFolder(StandardIpmFolder.Contacts);

												info1.addMapiMessageItem(con);
												count_destination++;
												foldermessagecount++;

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " "
														+ System.lineSeparator());
												return;
											}

										} else if (message.getMessageClass().equals("IPM.Appointment")) {
											try {

												MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();
												info1 = pst.getPredefinedFolder(StandardIpmFolder.Appointments);
												if (chckbx_calender_box.isSelected()) {
													if (Receiveddate.after(Calenderfilterstartdate)
															&& Receiveddate.before(Calenderfilterenddate)) {
														info1.addMapiMessageItem(cal);
														count_destination++;
														foldermessagecount++;
													}

												} else {
													info1.addMapiMessageItem(cal);
													count_destination++;
													foldermessagecount++;

												}

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " "
														+ System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										} else if (message.getMessageClass().equals("IPM.StickyNote")
												|| message.getMessageClass().equals("IPM.Task")) {
											try {
												info1 = pst.getPredefinedFolder(StandardIpmFolder.Tasks);
												if (chckbx_Mail_Filter.isSelected()) {
													if (Receiveddate.after(mailfilterstartdate)
															&& Receiveddate.before(mailfilterenddate))

													{
														if (((message.getFlags()
																& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
															info.addMessage(message);
														} else {
															message.setMessageFlags(
																	MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);

															info.addMessage(message);

														}

														count_destination++;
														foldermessagecount++;

													}

												} else {
													if (((message.getFlags()
															& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
														info.addMessage(message);
													} else {
														message.setMessageFlags(MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);

														info.addMessage(message);

													}

													count_destination++;
													foldermessagecount++;
												}

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Task" + " "
														+ mf.namingconventionmapi(message) + System.lineSeparator());
												e.printStackTrace();
												continue;
											}

										} else {
											try {

												if (chckbxRemoveDuplicacy.isSelected()) {

													String input = duplicacymapi(message);

													if (!listduplicacy.contains(input)) {
														System.out.println("Not a duplicate message");
														listduplicacy.add(input);

														if (chckbx_Mail_Filter.isSelected()) {
															if (Receiveddate.after(mailfilterstartdate)
																	&& Receiveddate.before(mailfilterenddate)) {
																count_destination++;
																foldermessagecount++;
																if (((message.getFlags()
																		& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
																	info.addMessage(message);
																} else {
																	message.setMessageFlags(
																			MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
																	info.addMessage(message);

																}

															} else if (Receiveddate.equals(mailfilterstartdate)
																	|| Receiveddate.equals(mailfilterenddate)) {
																count_destination++;
																foldermessagecount++;
																if (((message.getFlags()
																		& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
																	info.addMessage(message);
																} else {
																	message.setMessageFlags(
																			MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
																	info.addMessage(message);

																}

															}
														} else {
															count_destination++;
															foldermessagecount++;
															if (((message.getFlags()
																	& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
																info.addMessage(message);
															} else {
																message.setMessageFlags(
																		MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
																info.addMessage(message);

															}

														}
													}
												} else {
													if (chckbx_Mail_Filter.isSelected()) {
														if (Receiveddate.after(mailfilterstartdate)
																&& Receiveddate.before(mailfilterenddate)) {
															count_destination++;
															foldermessagecount++;
															if (((message.getFlags()
																	& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
																info.addMessage(message);
															} else {
																message.setMessageFlags(
																		MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
																info.addMessage(message);

															}

														} else if (Receiveddate.equals(mailfilterstartdate)
																|| Receiveddate.equals(mailfilterenddate)) {
															count_destination++;
															foldermessagecount++;
															if (((message.getFlags()
																	& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
																info.addMessage(message);
															} else {
																message.setMessageFlags(
																		MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
																info.addMessage(message);

															}

														}
													} else {
														count_destination++;
														foldermessagecount++;
														if (((message.getFlags()
																& MapiMessageFlags.MSGFLAG_READ) == MapiMessageFlags.MSGFLAG_READ)) {
															info.addMessage(message);
														} else {
															message.setMessageFlags(
																	MapiMessageFlags.MSGFLAG_NOTIFYUNREAD);
															info.addMessage(message);

														}

													}

												}

											} catch (OutOfMemoryError ep) {
												mf.logger.info("Out of memory error:" + ep.getMessage() + "  "
														+ mf.namingconventionmapi(message));
											} catch (Exception e) {
												mf.logger.warning("Exception : " + e.getMessage() + "Message" + " "
														+ mf.namingconventionmapi(message) + System.lineSeparator());
												e.printStackTrace();
												continue;
											}
										}

									} catch (Exception e) {

										continue;
									}
									lbl_progressreport.setText("Total Message Saved Count  " + count_destination + "  "
											+ path3 + "   Extarcting messsage " + message1.getSubject());

								}
							} catch (Exception e) {
								for (int i = 0; i < 1; i++) {
									e.printStackTrace();
									continue;
								}
							}

						}
					}
				}

				if (subFolder.getSubFolders().size() > 0) {

					getFolderforpst(subFolder, storage, path, path3);

				}

				path = removefolder(path);
				path3 = removefolder(path3);
			}

		} catch (Exception e) {
			return;
		}

	}

	public void ConvertMbox_file() {
		FileStream stream = new FileStream(filepath, FileMode.OpenOrCreate, FileAccess.Read);

		MboxrdStorageReader mbox = new MboxrdStorageReader(stream.toInputStream(), false);

		MailMessage message = mbox.readNextMessage();
		long checkdemo = 0;
		listduplicacy.clear();
		while (!(message == null)) {
			try {
//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}

				if (chckbxMigrateOrBackup.isSelected()) {
					message.getAttachments().clear();
				}
				label_11.setIcon(new ImageIcon(Main_Frame.class.getResource("/mail.png")));
				checkdemo++;
				if (demo) {
					if (checkdemo == All_Data.demo_count)
						break;
				}

				Date Receiveddate = message.getDate();
				mailfile mf1 = new mailfile(mf, filetype, destination_path, path, message, Receiveddate,
						chckbx_Mail_Filter.isSelected(), mailfilterstartdate, mailfilterenddate, filepath);

				Thread saveTh = new Thread(mf1);
				saveTh.start();
				saveTh.join();
				count_destination = mf1.k;
				try {
					lbl_progressreport.setText("Total Message Saved : " + count_destination + " Extarcting messsage  "
							+ message.getSubject());
					message = mbox.readNextMessage();
				} catch (Exception e) {

					label_11.setIcon(new ImageIcon(Main_Frame.class.getResource("/corrput-mail.png")));
					lbl_progressreport.setText("Message Exception " + checkdemo + " " + e.getMessage());
					mf.logger.warning("Exception : " + e.getMessage() + "Message" + System.lineSeparator());
					e.printStackTrace();
					continue;
				}

				if ((count_destination % 100) == 0) {
					System.gc();
				}
			} catch (Exception e) {
				e.printStackTrace();
				continue;
			}
		}
		// mbox.close();
		mbox.dispose();
		stream.close();
	}

	public void ConvertMbox_word() {
		FileStream stream = new FileStream(filepath, FileMode.OpenOrCreate, FileAccess.Read);

		MboxrdStorageReader mbox = new MboxrdStorageReader(stream.toInputStream(), false);

		MailMessage message = mbox.readNextMessage();

		long checkdemo = 0;
		while (!(message == null)) {
			try {
//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				if (chckbxMigrateOrBackup.isSelected()) {
					message.getAttachments().clear();
				}
				label_11.setIcon(new ImageIcon(Main_Frame.class.getResource("/mail.png")));
				checkdemo++;
				if (demo) {
					if (checkdemo == All_Data.demo_count)
						break;
				}

				Date Receiveddate = message.getDate();
				MailWord mf1 = new MailWord(mf, filetype, destination_path, path, temppathm, message, Receiveddate,
						chckbx_Mail_Filter.isSelected(), mailfilterstartdate, mailfilterenddate);

				Thread saveTh = new Thread(mf1);
				saveTh.start();
				saveTh.join();

				try {
					lbl_progressreport.setText("Total Message saved " + count_destination + " Extarcting messsage "
							+ message.getSubject());

					message = mbox.readNextMessage();
				} catch (Exception e) {

					label_11.setIcon(new ImageIcon(Main_Frame.class.getResource("/corrput-mail.png")));
					lbl_progressreport.setText("Message Exception " + checkdemo + " " + e.getMessage());
					mf.logger.warning("Exception : " + e.getMessage() + "Message" + System.lineSeparator());
					continue;
				}

			} catch (Exception e) {
				continue;
			}
		}
		// mbox.close();
		mbox.dispose();
		stream.close();
	}

	public void ConvertMbox_CSV() {
		FileStream stream = new FileStream(filepath, FileMode.OpenOrCreate, FileAccess.Read);

		try {
			MboxrdStorageReader mbox = new MboxrdStorageReader(stream.toInputStream(), false);

			MailMessage message = mbox.readNextMessage();

			File file = new File(destination_path + File.separator + path + File.separator + foldername4 + ".csv");

			FileWriter outputfile = new FileWriter(file);

			CSVWriter writer = new CSVWriter(outputfile);

			String[] header = { "Date", "Subject", "Body", "From", "To", "CC:" };

			writer.writeNext(header);
			listduplicacy.clear();

			long checkdemo = 0;
			while (!(message == null)) {
				try {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}

					if (chckbxMigrateOrBackup.isSelected()) {
						message.getAttachments().clear();
					}
					label_11.setIcon(new ImageIcon(Main_Frame.class.getResource("/mail.png")));
					checkdemo++;
					if (demo) {
						if (checkdemo == All_Data.demo_count)
							break;
					}

					Date Receiveddate = message.getDate();
					mailcsv(message, Receiveddate, writer);

					try {
						lbl_progressreport.setText("Total Message saved " + count_destination + " Extarcting messsage "
								+ message.getSubject());

						message = mbox.readNextMessage();
					} catch (Exception e) {

						label_11.setIcon(new ImageIcon(Main_Frame.class.getResource("/corrput-mail.png")));
						lbl_progressreport.setText("Message Exception " + checkdemo + " " + e.getMessage());
						mf.logger.warning("Exception : " + e.getMessage() + "Message" + System.lineSeparator());
						continue;
					}

				} catch (Exception e) {
					continue;
				}
			}
			// mbox.close();
			mbox.dispose();
			stream.close();
			writer.close();
		} catch (Exception e) {

		}
	}

	public void ConvertMbox_pst() {
		try {
			FileStream stream = new FileStream(filepath, FileMode.OpenOrCreate, FileAccess.Read);

			MboxrdStorageReader mbox = new MboxrdStorageReader(stream.toInputStream(), false);

			MailMessage message = mbox.readNextMessage();
			listduplicacy.clear();

			long checkdemo = 0;
			while (!(message == null)) {
				try {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					checkdemo++;
					if (demo) {
						if (checkdemo == All_Data.demo_count)
							break;
					}
					if (chckbxMigrateOrBackup.isSelected()) {
						message.getAttachments().clear();
					}
					label_11.setIcon(new ImageIcon(Main_Frame.class.getResource("/mail.png")));
					Date Receiveddate = message.getDate();

					if (chckbxRemoveDuplicacy.isSelected()) {

						String input = duplicacymail(message);

						if (!listduplicacy.contains(input)) {
							System.out.println("Not a duplicate message");
							listduplicacy.add(input);

							if (chckbx_Mail_Filter.isSelected()) {
								if (Receiveddate.after(mailfilterstartdate) && Receiveddate.before(mailfilterenddate)) {
									info.addMessage(MapiMessage.fromMailMessage(message));
									count_destination++;

								} else if (Receiveddate.equals(mailfilterstartdate)
										|| Receiveddate.equals(mailfilterenddate)) {
									info.addMessage(MapiMessage.fromMailMessage(message));
									count_destination++;

								}
							} else {
								info.addMessage(MapiMessage.fromMailMessage(message));
								count_destination++;

							}
						}
					} else {
						if (chckbx_Mail_Filter.isSelected()) {
							if (Receiveddate.after(mailfilterstartdate) && Receiveddate.before(mailfilterenddate)) {
								info.addMessage(MapiMessage.fromMailMessage(message));

								count_destination++;

							} else if (Receiveddate.equals(mailfilterstartdate)
									|| Receiveddate.equals(mailfilterenddate)) {
								info.addMessage(MapiMessage.fromMailMessage(message));
								count_destination++;

							}
						} else {
							info.addMessage(MapiMessage.fromMailMessage(message));
							count_destination++;

						}
					}

					try {
						lbl_progressreport.setText("Total Message saved " + count_destination + " Extarcting messsage "
								+ message.getSubject());

						message = mbox.readNextMessage();
					} catch (Exception e) {

						mf.logger.warning("Exception : " + e.getMessage() + "Message" + System.lineSeparator());
						label_11.setIcon(new ImageIcon(Main_Frame.class.getResource("/corrput-mail.png")));
						lbl_progressreport.setText("Message Exception " + checkdemo + " " + e.getMessage());
						continue;
					}

				} catch (Exception e) {
					continue;
				}
			}
			// mbox.close();
			mbox.dispose();
			stream.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public void ConvertMbox_gmail() {
		FileStream stream = new FileStream(filepath, FileMode.OpenOrCreate, FileAccess.Read);
		MboxrdStorageReader mbox = new MboxrdStorageReader(stream.toInputStream(), false);

		listduplicacy.clear();
		MailMessage message = mbox.readNextMessage();
		clientforimap_output.selectFolder(iconnforimap_output, path);
		long checkdemo = 0;
		boolean s22 = false;
		while (!(message == null)) {
			try {
//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				checkdemo++;
				if (demo) {
					if (checkdemo == All_Data.demo_count)
						break;
				}
				if (chckbxMigrateOrBackup.isSelected()) {
					message.getAttachments().clear();
				}
				if ((count_destination % 500) == 0) {
					if (s22) {
						connectionHandle1();
					}
					s22 = true;
				}

				try {

					Date Receiveddate = message.getDate();
					mailimap(message, Receiveddate, path);

					lbl_progressreport.setText("Total Message Saved Count " + count_destination
							+ " Extarcting messsage " + message.getSubject());

					message = mbox.readNextMessage();
				} catch (Exception e) {
					System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
					if (e.getMessage().equalsIgnoreCase(
							"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
							|| e.getMessage().equalsIgnoreCase("ConnectFailure")
							|| e.getMessage().contains("Operation failed") || e.getMessage().contains("Rate limit hit")
							|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
							|| e.getMessage().equalsIgnoreCase(
									"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
						Progressbar.setVisible(false);

						message = mbox.readNextMessage();
					}
					connectionHandle(e.getMessage());
					lbl_progressreport.setText("Message Exception " + checkdemo + " " + e.getMessage());
					mf.logger.warning("Exception : " + e.getMessage() + "Message" + System.lineSeparator());
					continue;
				}

				count_destination++;
			} catch (Exception e) {

				continue;
			}

		}
		// mbox.close();
		mbox.dispose();
		stream.close();

	}

	public void ConvertMbox_imap() {
		FileStream stream = new FileStream(filepath, FileMode.OpenOrCreate, FileAccess.Read);
		MboxrdStorageReader mbox = new MboxrdStorageReader(stream.toInputStream(), false);
		boolean s22 = false;

		MailMessage message = mbox.readNextMessage();

		long checkdemo = 0;
		while (!(message == null)) {
			try {
//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				checkdemo++;
				if (demo) {
					if (checkdemo == All_Data.demo_count)
						break;
				}
				if (chckbxMigrateOrBackup.isSelected()) {
					message.getAttachments().clear();
				}
				if ((count_destination % 2) == 0) {
					if (s22) {
						connectionHandle1();
						clientforimap_output.selectFolder(iconnforimap_output, path);
					}
					s22 = true;
				}

				Date Receiveddate = message.getDate();
				mailimap(message, Receiveddate, path);

				try {
					lbl_progressreport.setText("Total Message saved " + count_destination + " Extarcting messsage "
							+ message.getSubject());

					message = mbox.readNextMessage();
				} catch (Exception e) {
					System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
					if (e.getMessage().equalsIgnoreCase(
							"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
							|| e.getMessage().equalsIgnoreCase("ConnectFailure")
							|| e.getMessage().contains("Rate limit hit")
							|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
							|| e.getMessage().equalsIgnoreCase(
									"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
						Progressbar.setVisible(false);
						connectionHandle(e.getMessage());

					} else if (e.getMessage().equalsIgnoreCase(
							"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
							|| e.getMessage().equalsIgnoreCase("ConnectFailure")
							|| e.getMessage().contains("Operation failed") || e.getMessage().contains("Rate limit hit")
							|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
							|| e.getMessage().equalsIgnoreCase(
									"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
						Progressbar.setVisible(false);
						connectionHandle(e.getMessage());
						message = mbox.readNextMessage();
					}

					lbl_progressreport.setText("Message Exception " + checkdemo + " " + e.getMessage());
					mf.logger.warning("Exception : " + e.getMessage() + "Message" + System.lineSeparator());
					continue;
				}

			} catch (Exception e) {

				continue;
			}

		}
		// mbox.close();
		mbox.dispose();
		stream.close();

	}

	public void ConvertMbox_office365() {
		FileStream stream = new FileStream(filepath, FileMode.OpenOrCreate, FileAccess.Read);
		MboxrdStorageReader mbox = new MboxrdStorageReader(stream.toInputStream(), false);
		MailMessage message = mbox.readNextMessage();
		long checkdemo = 0;

		listduplicacy.clear();
		while (!(message == null)) {
			try {
//				if (stop) {
//					break;
//				}
				if (stop) {
					break;
				}
				checkdemo++;
				if (demo) {
					if (checkdemo == All_Data.demo_count)
						break;
				}
				if (chckbxMigrateOrBackup.isSelected()) {
					message.getAttachments().clear();
				}
				try {

					Date Receiveddate = message.getDate();
					mailexchange(message, Receiveddate, clientforexchange_output, Folderuri);
					lbl_progressreport.setText("Total Message saved " + count_destination + " Extarcting messsage "
							+ message.getSubject());

					message = mbox.readNextMessage();
				} catch (Exception e) {

					if (e.getMessage().equalsIgnoreCase(
							"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
							|| e.getMessage().equalsIgnoreCase("ConnectFailure")
							|| e.getMessage().contains("Rate limit hit")
							|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
							|| e.getMessage().equalsIgnoreCase(
									"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
						Progressbar.setVisible(false);
						connectionHandle(e.getMessage());

					} else if (e.getMessage().equalsIgnoreCase(
							"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
							|| e.getMessage().equalsIgnoreCase("ConnectFailure")
							|| e.getMessage().contains("Operation failed") || e.getMessage().contains("Rate limit hit")
							|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
							|| e.getMessage().equalsIgnoreCase(
									"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
						Progressbar.setVisible(false);
						connectionHandle(e.getMessage());
						message = mbox.readNextMessage();
					}
					mf.logger.warning("Exception : " + e.getMessage() + "Message" + System.lineSeparator());
					lbl_progressreport.setText("Message Exception " + checkdemo + " " + e.getMessage());

					continue;
				}

			} catch (Exception e) {
				continue;
			}
		}
		// mbox.close();
		stream.close();
		mbox.dispose();

	}

	public void ConvertEml_MSG_EMLX_office365() {
		try {
			MailMessage msg = MailMessage.load(filepath);
			if (chckbxMigrateOrBackup.isSelected()) {
				msg.getAttachments().clear();
			}

			MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
			MapiMessage message = MapiMessage.fromMailMessage(msg, d);

			Date Receiveddate = msg.getDate();
			if (message.getMessageClass().equals("IPM.Contact")) {
				MailMessage mapi = new MailMessage();
				try {
					MapiContact con = (MapiContact) message.toMapiMessageItem();
					try {
						mapi.setSubject(con.getSubject());
					} catch (Exception e) {

						mapi.setSubject("");
					}
					try {
						mapi.setBody(con.getBody());
					} catch (Exception e) {

						mapi.setBody("");
					}
					con.save(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf",
							ContactSaveFormat.VCard);
					File file = new File(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf");
					mapi.addAttachment(
							new Attachment(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf"));
					file.delete();

					lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx + " Extracting message "
							+ mf.namingconventionmapi(message));
					clientforexchange_output.appendMessage(Folderuri, mapi);
					progressBar_message_p3.setValue(100);

				} catch (Exception e) {
					if (e.getMessage().equalsIgnoreCase(
							"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
							|| e.getMessage().equalsIgnoreCase("ConnectFailure")
							|| e.getMessage().contains(
									"No connection could be made because the target machine actively refused it.")
							|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
							|| e.getMessage().equalsIgnoreCase(
									"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
						Progressbar.setVisible(false);
						connectionHandle(e.getMessage());
						ConvertEml_MSG_EMLX_office365();
					}
					mf.logger.warning("Exception : " + e.getMessage() + "Contact" + mf.namingconventionmapi(message)
							+ System.lineSeparator());

					return;
				}

			} else if (message.getMessageClass().equals("IPM.Appointment")) {
				MailMessage mapi = new MailMessage();
				try {

					MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

					try {
						mapi.setSubject(cal.getSubject());
					} catch (Exception e) {

						mapi.setSubject("");
					}
					try {
						mapi.setBody(cal.getBody());
					} catch (Exception e) {

						mapi.setBody("");
					}
					cal.save(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics",
							AppointmentSaveFormat.Ics);
					File file = new File(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics");

					mapi.addAttachment(
							new Attachment(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics"));
					file.delete();
					Receiveddate = cal.getStartDate();
					if (chckbx_calender_box.isSelected()) {
						if (Receiveddate.after(Calenderfilterstartdate) && Receiveddate.before(Calenderfilterenddate)) {
							lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
									+ " Extracting message " + mf.namingconventionmapi(message));
							clientforexchange_output.appendMessage(Folderuri, mapi);
							progressBar_message_p3.setValue(100);
						}

					} else {
						lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
								+ " Extracting message " + mf.namingconventionmapi(message));
						clientforexchange_output.appendMessage(Folderuri, mapi);
						progressBar_message_p3.setValue(100);
					}

				} catch (Exception e) {

					if (e.getMessage().equalsIgnoreCase(
							"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
							|| e.getMessage().equalsIgnoreCase("ConnectFailure")
							|| e.getMessage().contains(
									"No connection could be made because the target machine actively refused it.")
							|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
							|| e.getMessage().equalsIgnoreCase(
									"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
						Progressbar.setVisible(false);
						connectionHandle(e.getMessage());
						ConvertEml_MSG_EMLX_office365();
					}
					mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + mf.namingconventionmapi(message)
							+ System.lineSeparator());

					return;
				}

			} else if (message.getMessageClass().equals("IPM.StickyNote")
					|| message.getMessageClass().equals("IPM.Task")) {
				try {

					MapiTask task = (MapiTask) message.toMapiMessageItem();

					Receiveddate = task.getStartDate();
					if (task_box.isSelected()) {
						if (Receiveddate.after(taskfilterstartdate) && Receiveddate.before(taskfilterenddate)) {
							lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
									+ " Extracting message " + mf.namingconventionmapi(message));
							clientforexchange_output.appendMessage(Folderuri, msg);
							progressBar_message_p3.setValue(100);
						}

					} else {
						lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
								+ " Extracting message " + mf.namingconventionmapi(message));
						clientforexchange_output.appendMessage(Folderuri, msg);
						progressBar_message_p3.setValue(100);
					}

				} catch (Exception e) {

					if (e.getMessage().equalsIgnoreCase(
							"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
							|| e.getMessage().equalsIgnoreCase("ConnectFailure")
							|| e.getMessage().contains(
									"No connection could be made because the target machine actively refused it.")
							|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
							|| e.getMessage().equalsIgnoreCase(
									"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
						Progressbar.setVisible(false);
						connectionHandle(e.getMessage());
						ConvertEml_MSG_EMLX_office365();
					}
					mf.logger.warning("Exception : " + e.getMessage() + "task" + mf.namingconventionmapi(message)
							+ System.lineSeparator());

					return;
				}

			} else {
				try {
					mailexchange(msg, Receiveddate, clientforexchange_output, Folderuri);
					lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx + " Extracting message "
							+ mf.namingconventionmapi(message));

				} catch (Exception e) {

					if (e.getMessage().equalsIgnoreCase(
							"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
							|| e.getMessage().equalsIgnoreCase("ConnectFailure")
							|| e.getMessage().contains(
									"No connection could be made because the target machine actively refused it.")
							|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
							|| e.getMessage().equalsIgnoreCase(
									"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
						Progressbar.setVisible(false);
						connectionHandle(e.getMessage());
						ConvertEml_MSG_EMLX_office365();
					}
					mf.logger.warning("Exception : " + e.getMessage() + "Message " + message.getDeliveryTime()
							+ System.lineSeparator());

					return;
				}

			}

			count_destination++;
			count_eml_msg_emlx++;
			clientforexchange_output.dispose();
		} catch (Exception e) {
			return;
		}
	}

	public void ConvertEml_MSG_EMLX_gmail() {
		try {
			MailMessage msg = MailMessage.load(filepath);
			if (chckbxMigrateOrBackup.isSelected()) {
				msg.getAttachments().clear();
			}
			MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
			MapiMessage message = MapiMessage.fromMailMessage(msg, d);

			Date Receiveddate = msg.getDate();
			if (message.getMessageClass().equals("IPM.Contact")) {
				MailMessage mapi = new MailMessage();
				try {
					MapiContact con = (MapiContact) message.toMapiMessageItem();
					try {
						mapi.setSubject(con.getSubject());
					} catch (Exception e) {

						mapi.setSubject("");
					}
					try {
						mapi.setBody(con.getBody());
					} catch (Exception e) {

						mapi.setBody("");
					}
					con.save(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf",
							ContactSaveFormat.VCard);
					File file = new File(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf");
					mapi.addAttachment(
							new Attachment(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf"));
					file.delete();

					lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx + " Extracting message "
							+ mf.namingconventionmapi(message));
					clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
					progressBar_message_p3.setValue(100);

				} catch (Exception e) {

					if (e.getMessage().equalsIgnoreCase(
							"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
							|| e.getMessage().equalsIgnoreCase("ConnectFailure")
							|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
							|| e.getMessage().contains("Operation failed") || e.getMessage().contains("Rate limit hit")
							|| e.getMessage().equalsIgnoreCase(
									"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
						Progressbar.setVisible(false);
						connectionHandle(e.getMessage());
						ConvertEml_MSG_EMLX_gmail();
					}
					mf.logger.warning("Exception : " + e.getMessage() + "Contact " + mf.namingconventionmapi(message)
							+ System.lineSeparator());

					return;
				}

			} else if (message.getMessageClass().equals("IPM.Appointment")) {
				MailMessage mapi = new MailMessage();
				try {

					MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

					try {
						mapi.setSubject(cal.getSubject());
					} catch (Exception e) {

						mapi.setSubject("");
					}
					try {
						mapi.setBody(cal.getBody());
					} catch (Exception e) {

						mapi.setBody("");
					}
					cal.save(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics",
							AppointmentSaveFormat.Ics);
					File file = new File(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics");

					mapi.addAttachment(
							new Attachment(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics"));
					file.delete();
					if (chckbx_calender_box.isSelected()) {
						if (Receiveddate.after(Calenderfilterstartdate) && Receiveddate.before(Calenderfilterenddate)) {
							lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
									+ " Extracting message " + mf.namingconventionmapi(message));
							clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
							progressBar_message_p3.setValue(100);
						}

					} else {
						lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
								+ " Extracting message " + mf.namingconventionmapi(message));
						clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
						progressBar_message_p3.setValue(100);
					}

				} catch (Exception e) {

					if (e.getMessage().equalsIgnoreCase(
							"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
							|| e.getMessage().equalsIgnoreCase("ConnectFailure")
							|| e.getMessage().contains("Operation failed") || e.getMessage().contains("Rate limit hit")
							|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
							|| e.getMessage().equalsIgnoreCase(
									"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
						Progressbar.setVisible(false);
						connectionHandle(e.getMessage());
						ConvertEml_MSG_EMLX_gmail();
					}
					mf.logger.warning("Exception : " + e.getMessage() + "Calendar " + mf.namingconventionmapi(message)
							+ System.lineSeparator());

					return;
				}

			} else if (message.getMessageClass().equals("IPM.StickyNote")
					|| message.getMessageClass().equals("IPM.Task")) {
				try {

					MapiTask task = (MapiTask) message.toMapiMessageItem();

					Receiveddate = task.getStartDate();
					if (task_box.isSelected()) {
						if (Receiveddate.after(taskfilterstartdate) && Receiveddate.before(taskfilterenddate)) {
							lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
									+ " Extracting message " + mf.namingconventionmapi(message));
						}
						clientforimap_output.appendMessage(iconnforimap_output, path, msg);
						progressBar_message_p3.setValue(100);
					} else {
						lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
								+ " Extracting message " + mf.namingconventionmapi(message));
						clientforimap_output.appendMessage(iconnforimap_output, path, msg);
						progressBar_message_p3.setValue(100);
					}

				} catch (Exception e) {

					if (e.getMessage().equalsIgnoreCase(
							"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
							|| e.getMessage().equalsIgnoreCase("ConnectFailure")
							|| e.getMessage().contains("Operation failed") || e.getMessage().contains("Rate limit hit")
							|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
							|| e.getMessage().equalsIgnoreCase(
									"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
						Progressbar.setVisible(false);
						connectionHandle(e.getMessage());
						ConvertEml_MSG_EMLX_gmail();
					}
					mf.logger.warning("Exception : " + e.getMessage() + "Task " + mf.namingconventionmapi(message)
							+ System.lineSeparator());

					return;
				}

			} else {
				try {
					lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx + " Extracting message "
							+ mf.namingconventionmapi(message));
					mailimap(msg, Receiveddate, path);

				} catch (Exception e) {
					e.printStackTrace();
					if (e.getMessage().equalsIgnoreCase(
							"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
							|| e.getMessage().equalsIgnoreCase("ConnectFailure")
							|| e.getMessage().contains("Operation failed") || e.getMessage().contains("Rate limit hit")
							|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
							|| e.getMessage().equalsIgnoreCase(
									"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
						Progressbar.setVisible(false);
						connectionHandle(e.getMessage());
						ConvertEml_MSG_EMLX_gmail();
					}
					mf.logger.warning("Exception : " + e.getMessage() + "Message " + message.getDeliveryTime()
							+ System.lineSeparator());

					return;
				}

			}

			count_destination++;
			count_eml_msg_emlx++;

		} catch (Exception e) {
			return;
		}

	}

	public void ConvertEml_MSG_EMLX_imap() {

		try {
			MailMessage msg = MailMessage.load(filepath);
			if (chckbxMigrateOrBackup.isSelected()) {
				msg.getAttachments().clear();
			}
			MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
			MapiMessage message = MapiMessage.fromMailMessage(msg, d);

			Date Receiveddate = msg.getDate();
			if (message.getMessageClass().equals("IPM.Contact")) {
				MailMessage mapi = new MailMessage();
				try {
					MapiContact con = (MapiContact) message.toMapiMessageItem();
					try {
						mapi.setSubject(con.getSubject());
					} catch (Exception e) {

						mapi.setSubject("");
					}
					try {
						mapi.setBody(con.getBody());
					} catch (Exception e) {

						mapi.setBody("");
					}
					con.save(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf",
							ContactSaveFormat.VCard);
					File file = new File(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf");
					mapi.addAttachment(
							new Attachment(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf"));
					file.delete();

					lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx + " Extracting message "
							+ mf.namingconventionmapi(message));
					clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
					progressBar_message_p3.setValue(100);

				} catch (Exception e) {

					if (e.getMessage().equalsIgnoreCase(
							"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
							|| e.getMessage().equalsIgnoreCase("ConnectFailure")
							|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
							|| e.getMessage().contains("Operation failed") || e.getMessage().contains("Rate limit hit")
							|| e.getMessage().equalsIgnoreCase(
									"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
						Progressbar.setVisible(false);
						connectionHandle(e.getMessage());
						ConvertEml_MSG_EMLX_imap();
					}
					mf.logger.warning("Exception : " + e.getMessage() + "Contact " + mf.namingconventionmapi(message)
							+ System.lineSeparator());

					return;
				}

			} else if (message.getMessageClass().equals("IPM.Appointment")) {
				MailMessage mapi = new MailMessage();
				try {

					MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

					try {
						mapi.setSubject(cal.getSubject());
					} catch (Exception e) {

						mapi.setSubject("");
					}
					try {
						mapi.setBody(cal.getBody());
					} catch (Exception e) {

						mapi.setBody("");
					}
					cal.save(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics",
							AppointmentSaveFormat.Ics);
					File file = new File(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics");

					mapi.addAttachment(
							new Attachment(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics"));
					file.delete();
					if (chckbx_calender_box.isSelected()) {
						if (Receiveddate.after(Calenderfilterstartdate) && Receiveddate.before(Calenderfilterenddate)) {
							lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
									+ " Extracting message " + mf.namingconventionmapi(message));
							clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
							progressBar_message_p3.setValue(100);
						}

					} else {
						lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
								+ " Extracting message " + mf.namingconventionmapi(message));
						clientforimap_output.appendMessage(iconnforimap_output, path, mapi);
						progressBar_message_p3.setValue(100);
					}

				} catch (Exception e) {
					System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
					if (e.getMessage().equalsIgnoreCase(
							"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
							|| e.getMessage().equalsIgnoreCase("ConnectFailure")
							|| e.getMessage().contains("Operation failed") || e.getMessage().contains("Rate limit hit")
							|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
							|| e.getMessage().equalsIgnoreCase(
									"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
						Progressbar.setVisible(false);
						connectionHandle(e.getMessage());
						ConvertEml_MSG_EMLX_imap();
					}
					mf.logger.warning("Exception : " + e.getMessage() + "Calendar " + mf.namingconventionmapi(message)
							+ System.lineSeparator());

					return;
				}

			} else if (message.getMessageClass().equals("IPM.StickyNote")
					|| message.getMessageClass().equals("IPM.Task")) {
				try {

					MapiTask task = (MapiTask) message.toMapiMessageItem();

					Receiveddate = task.getStartDate();
					if (task_box.isSelected()) {
						if (Receiveddate.after(taskfilterstartdate) && Receiveddate.before(taskfilterenddate)) {
							lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
									+ " Extracting message " + mf.namingconventionmapi(message));
						}
						clientforimap_output.appendMessage(iconnforimap_output, path, msg);
						progressBar_message_p3.setValue(100);
					} else {
						lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
								+ " Extracting message " + mf.namingconventionmapi(message));
						clientforimap_output.appendMessage(iconnforimap_output, path, msg);
						progressBar_message_p3.setValue(100);
					}

				} catch (Exception e) {
					System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
					if (e.getMessage().equalsIgnoreCase(
							"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
							|| e.getMessage().equalsIgnoreCase("ConnectFailure")
							|| e.getMessage().contains("Operation failed") || e.getMessage().contains("Rate limit hit")
							|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
							|| e.getMessage().equalsIgnoreCase(
									"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
						Progressbar.setVisible(false);

						ConvertEml_MSG_EMLX_imap();
					}
					connectionHandle(e.getMessage());
					mf.logger.warning("Exception : " + e.getMessage() + "Task " + mf.namingconventionmapi(message)
							+ System.lineSeparator());

					return;
				}

			} else {
				try {
					lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx + " Extracting message "
							+ mf.namingconventionmapi(message));
					mailimap(msg, Receiveddate, path);
				} catch (Exception e) {
					System.out.println("@@@@@@@@@@@@@@@ " + e.getMessage());
					if (e.getMessage().equalsIgnoreCase(
							"The operation 'FetchMessage' terminated. Timeout '100000' has been reached.")
							|| e.getMessage().equalsIgnoreCase("ConnectFailure")
							|| e.getMessage().contains("Operation failed") || e.getMessage().contains("Rate limit hit")
							|| e.getMessage().equalsIgnoreCase("Operation has been canceled")
							|| e.getMessage().equalsIgnoreCase(
									"The operation 'AppendMessage' terminated. Timeout '100000' has been reached")) {
						Progressbar.setVisible(false);

						ConvertEml_MSG_EMLX_imap();
					}
					connectionHandle(e.getMessage());
					mf.logger.warning("Exception : " + e.getMessage() + "Message " + message.getDeliveryTime()
							+ System.lineSeparator());

					return;
				}

			}
			count_eml_msg_emlx++;

			count_destination++;

		} catch (Exception e) {
			return;
		}

	}

	public void ConvertEml_MSG_EMLX_pst() {
		try {
			MailMessage msg = MailMessage.load(filepath);
			if (chckbxMigrateOrBackup.isSelected()) {
				msg.getAttachments().clear();
			}
			MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
			MapiMessage message = MapiMessage.fromMailMessage(msg, d);
			pstfilename = destination_path + File.separator + pstindex + getRidOfIllegalFileNameCharacters(fileoptionm)
					+ ".pst";

			File filechk = new File(pstfilename);

			long currentsize = filechk.length();
			if (chckbx_splitpst.isSelected()) {
				if (currentsize > maxsize) {
					pstindex++;
					pst = PersonalStorage.create(pstfilename, FileFormatVersion.Unicode);
					pst.getStore().changeDisplayName(fileoptionm);
					info = pst.getRootFolder().addSubFolder(fileoptionm);
					filechk = new File(pstfilename);

					info = pst.getRootFolder();

				}
			}

			Date Receiveddate = msg.getDate();
			if (message.getMessageClass().equals("IPM.Contact")) {
				MailMessage mapi = new MailMessage();
				try {
					MapiContact con = (MapiContact) message.toMapiMessageItem();
					try {
						mapi.setSubject(con.getSubject());
					} catch (Exception e) {

						mapi.setSubject("");
					}
					try {
						mapi.setBody(con.getBody());
					} catch (Exception e) {

						mapi.setBody("");
					}
					con.save(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf",
							ContactSaveFormat.VCard);
					File file = new File(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf");
					mapi.addAttachment(
							new Attachment(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf"));
					file.delete();

					lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx + " Extracting message "
							+ mf.namingconventionmapi(message));
					info.addMessage(MapiMessage.fromMailMessage(mapi));
					progressBar_message_p3.setValue(100);

				} catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + System.lineSeparator());
					return;
				}

			} else if (message.getMessageClass().equals("IPM.Appointment")) {
				MailMessage mapi = new MailMessage();
				try {

					MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

					try {
						mapi.setSubject(cal.getSubject());
					} catch (Exception e) {

						mapi.setSubject("");
					}
					try {
						mapi.setBody(cal.getBody());
					} catch (Exception e) {

						mapi.setBody("");
					}
					cal.save(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics",
							AppointmentSaveFormat.Ics);
					File file = new File(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics");

					mapi.addAttachment(
							new Attachment(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics"));
					file.delete();
					if (chckbx_calender_box.isSelected()) {
						if (Receiveddate.after(Calenderfilterstartdate) && Receiveddate.before(Calenderfilterenddate)) {
							lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
									+ " Extracting message " + mf.namingconventionmapi(message));
							info.addMessage(MapiMessage.fromMailMessage(mapi));
							progressBar_message_p3.setValue(100);
						}

					} else {
						lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
								+ " Extracting message " + mf.namingconventionmapi(message));
						info.addMessage(MapiMessage.fromMailMessage(mapi));
						progressBar_message_p3.setValue(100);
					}

				} catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + System.lineSeparator());
					return;
				}

			} else if (message.getMessageClass().equals("IPM.StickyNote")
					|| message.getMessageClass().equals("IPM.Task")) {
				try {

					MapiTask task = (MapiTask) message.toMapiMessageItem();

					Receiveddate = task.getStartDate();
					if (task_box.isSelected()) {
						if (Receiveddate.after(taskfilterstartdate) && Receiveddate.before(taskfilterenddate))
							lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
									+ " Extracting message " + mf.namingconventionmapi(message));
						info.addMessage(message);
						progressBar_message_p3.setValue(100);
					} else {
						lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
								+ " Extracting message " + mf.namingconventionmapi(message));
						info.addMessage(message);
						progressBar_message_p3.setValue(100);
					}

				} catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + System.lineSeparator());
					return;
				}

			} else {
				try {

					if (chckbx_Mail_Filter.isSelected()) {
						if (Receiveddate.after(mailfilterstartdate) && Receiveddate.before(mailfilterenddate))
							lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
									+ " Extracting message " + mf.namingconventionmapi(message));
						info.addMessage(message);

						progressBar_message_p3.setValue(100);
					} else {
						lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
								+ " Extracting message " + mf.namingconventionmapi(message));
						info.addMessage(message);
						progressBar_message_p3.setValue(100);
					}
				} catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + System.lineSeparator());
					return;
				}

			}

			count_eml_msg_emlx++;
			count_destination++;
		} catch (Exception e) {
			return;
		}

	}

	public void ConvertEml_MSG_EMLX_CSV(CSVWriter writer) {
		try {
			MailMessage msg = MailMessage.load(filepath);
			if (chckbxMigrateOrBackup.isSelected()) {
				msg.getAttachments().clear();
			}
			MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
			MapiMessage message = MapiMessage.fromMailMessage(msg, d);

			Date Receiveddate = msg.getDate();
			try {

				if (message.getMessageClass().equals("IPM.Contact")) {
					MailMessage mapi = new MailMessage();
					try {
						MapiContact con = (MapiContact) message.toMapiMessageItem();
						try {
							mapi.setSubject(con.getSubject());
						} catch (Exception e) {

							mapi.setSubject("");
						}
						try {
							mapi.setBody(con.getBody());
						} catch (Exception e) {

							mapi.setBody("");
						}
						con.save(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf",
								ContactSaveFormat.VCard);
						File file = new File(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf");
						mapi.addAttachment(
								new Attachment(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf"));
						file.delete();
						if (chckbx_calender_box.isSelected()) {
							if (Receiveddate.after(Calenderfilterstartdate)
									&& Receiveddate.before(Calenderfilterenddate))
								lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
										+ " Extracting message " + mf.namingconventionmapi(message));
							Mailmess_CSV(mapi, writer);
							progressBar_message_p3.setValue(100);
						} else {
							lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
									+ " Extracting message " + mf.namingconventionmapi(message));
							Mailmess_CSV(mapi, writer);
							progressBar_message_p3.setValue(100);
						}

					} catch (Exception e) {
						mf.logger.warning("Exception : " + e.getMessage() + System.lineSeparator());
						return;
					}

				} else if (message.getMessageClass().equals("IPM.Appointment")) {
					MailMessage mapi = new MailMessage();
					try {

						MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();
						try {
							mapi.setSubject(cal.getSubject());
						} catch (Exception e) {

							mapi.setSubject("");
						}
						try {
							mapi.setBody(cal.getBody());
						} catch (Exception e) {

							mapi.setBody("");
						}
						cal.save(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics",
								AppointmentSaveFormat.Ics);
						File file = new File(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics");

						mapi.addAttachment(
								new Attachment(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics"));
						file.delete();
						if (chckbx_calender_box.isSelected()) {
							if (Receiveddate.after(Calenderfilterstartdate)
									&& Receiveddate.before(Calenderfilterenddate)) {
								lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
										+ " Extracting message " + mf.namingconventionmapi(message));
								Mailmess_CSV(mapi, writer);
								progressBar_message_p3.setValue(100);
							}

						} else {
							lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
									+ " Extracting message " + mf.namingconventionmapi(message));
							Mailmess_CSV(mapi, writer);
							progressBar_message_p3.setValue(100);
						}

					} catch (Exception e) {
						mf.logger.warning("Exception : " + e.getMessage() + System.lineSeparator());
						return;
					}

				} else if (message.getMessageClass().equals("IPM.StickyNote")
						|| message.getMessageClass().equals("IPM.Task")) {
					try {
						MapiTask task = (MapiTask) message.toMapiMessageItem();

						Receiveddate = task.getStartDate();
						if (task_box.isSelected()) {
							if (Receiveddate.after(taskfilterstartdate) && Receiveddate.before(taskfilterenddate))
								lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
										+ " Extracting message " + mf.namingconventionmapi(message));
							Mailmess_CSV(msg, writer);
							progressBar_message_p3.setValue(100);
						} else {
							lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
									+ " Extracting message " + mf.namingconventionmapi(message));
							Mailmess_CSV(msg, writer);
							progressBar_message_p3.setValue(100);
						}

					} catch (Exception e) {
						mf.logger.warning("Exception : " + e.getMessage() + " " + System.lineSeparator());
						return;
					}

				} else {
					try {

						lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
								+ " Extracting message " + mf.namingconventionmapi(message));
						mapicsv(message, Receiveddate, writer);
					} catch (Exception e) {
						mf.logger.warning("Exception : " + e.getMessage() + " " + System.lineSeparator());
						return;
					}

				}
				lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx + " Extracting message "
						+ mf.namingconventionmapi(message));

				message.dispose();

				count_eml_msg_emlx++;
			} catch (Exception e) {

			}
		} catch (Exception e) {
			return;
		}

	}

	public void ConvertEml_MSG_EMLX_file() {
		try {
			MailMessage msg = MailMessage.load(filepath);
			if (chckbxMigrateOrBackup.isSelected()) {
				msg.getAttachments().clear();
			}
			MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
			MapiMessage message = MapiMessage.fromMailMessage(msg, d);

			Date Receiveddate = msg.getDate();
			if (message.getMessageClass().equals("IPM.Contact")) {
				MailMessage mapi = new MailMessage();
				try {
					MapiContact con = (MapiContact) message.toMapiMessageItem();
					try {
						mapi.setSubject(con.getSubject());
					} catch (Exception e) {

						mapi.setSubject("");
					}
					try {
						mapi.setBody(con.getBody());
					} catch (Exception e) {

						mapi.setBody("");
					}
					con.save(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf",
							ContactSaveFormat.VCard);
					File file = new File(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf");
					mapi.addAttachment(
							new Attachment(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf"));
					file.delete();
					mailfile mf1 = new mailfile(mf, filetype, destination_path, path, mapi, Receiveddate, false,
							mailfilterstartdate, mailfilterenddate, filepath);
					Thread saveTh = new Thread(mf1);
					saveTh.start();
					saveTh.join();

					count_destination = mf1.k;

				} catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + " " + System.lineSeparator());
					return;
				}

			} else if (message.getMessageClass().equals("IPM.Appointment")) {
				MailMessage mapi = new MailMessage();
				try {

					MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();
					try {
						mapi.setSubject(cal.getSubject());
					} catch (Exception e) {

						mapi.setSubject("");
					}
					try {
						mapi.setBody(cal.getBody());
					} catch (Exception e) {

						mapi.setBody("");
					}
					cal.save(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics",
							AppointmentSaveFormat.Ics);
					File file = new File(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics");

					mapi.addAttachment(
							new Attachment(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics"));
					file.delete();
					mailfile mf1 = new mailfile(mf, filetype, destination_path, path, mapi, Receiveddate,
							chckbx_calender_box.isSelected(), Calenderfilterstartdate, Calenderfilterenddate, filepath);
					Thread saveTh = new Thread(mf1);
					saveTh.start();
					saveTh.join();

					count_destination = mf1.k;

				} catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + "Task" + " " + System.lineSeparator());
					return;
				}

			} else if (message.getMessageClass().equals("IPM.StickyNote")
					|| message.getMessageClass().equals("IPM.Task")) {
				try {
					MapiTask task = (MapiTask) message.toMapiMessageItem();

					Receiveddate = task.getStartDate();
					mapifile mf1 = new mapifile(mf, filetype, destination_path, path, count_destination, message,
							Receiveddate, task_box.isSelected(), taskfilterstartdate, taskfilterenddate, filepath);
					Thread saveTh = new Thread(mf1);
					saveTh.start();
					saveTh.join();

				} catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + System.lineSeparator());
					return;
				}

			} else {
				try {

					if (comboBox.getSelectedItem().toString().equalsIgnoreCase("Original File Name")) {
						Main_Frame.comboBox.setSelectedItem("Original File Name");
					}
					lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx + " Extracting message "
							+ mf.namingconventionmapi(message, new File(filepath)));
					mapifile mf1 = new mapifile(mf, filetype, destination_path, path, count_destination, message,
							Receiveddate, chckbx_Mail_Filter.isSelected(), mailfilterstartdate, mailfilterenddate,
							filepath);
					Thread saveTh = new Thread(mf1);
					saveTh.start();
					saveTh.join();
				} catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + System.lineSeparator());
					return;
				}

			}

			lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx + " Extracting message "
					+ mf.namingconventionmapi(message, new File(filepath)));

			count_destination++;
			count_eml_msg_emlx++;
		} catch (Exception e) {
			return;
		}

	}

	public void ConvertEml_MSG_EMLX_word() {
		try {
			MailMessage msg = MailMessage.load(filepath);
			if (chckbxMigrateOrBackup.isSelected()) {
				msg.getAttachments().clear();
			}
			MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
			MapiMessage message = MapiMessage.fromMailMessage(msg, d);

			Date Receiveddate = msg.getDate();
			if (message.getMessageClass().equals("IPM.Contact")) {
				MailMessage mapi = new MailMessage();
				try {
					MapiContact con = (MapiContact) message.toMapiMessageItem();
					try {
						mapi.setSubject(con.getSubject());
					} catch (Exception e) {

						mapi.setSubject("");
					}
					try {
						mapi.setBody(con.getBody());
					} catch (Exception e) {

						mapi.setBody("");
					}
					con.save(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf",
							ContactSaveFormat.VCard);
					File file = new File(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf");
					mapi.addAttachment(
							new Attachment(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf"));
					file.delete();

					MailWord mf1 = new MailWord(mf, filetype, destination_path, path, temppathm, mapi, Receiveddate,
							false, mailfilterstartdate, mailfilterstartdate);
					Thread saveTh = new Thread(mf1);
					saveTh.start();
					saveTh.join();

					progressBar_message_p3.setValue(100);

				} catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + System.lineSeparator());
					return;
				}

			} else if (message.getMessageClass().equals("IPM.Appointment")) {
				MailMessage mapi = new MailMessage();
				try {

					MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();
					try {
						mapi.setSubject(cal.getSubject());
					} catch (Exception e) {

						mapi.setSubject("");
					}
					try {
						mapi.setBody(cal.getBody());
					} catch (Exception e) {

						mapi.setBody("");
					}
					cal.save(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics",
							AppointmentSaveFormat.Ics);
					File file = new File(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics");

					mapi.addAttachment(
							new Attachment(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics"));
					file.delete();
					MailWord mf1 = new MailWord(mf, filetype, destination_path, path, temppathm, mapi, Receiveddate,
							chckbx_calender_box.isSelected(), Calenderfilterstartdate, Calenderfilterenddate);
					Thread saveTh = new Thread(mf1);
					saveTh.start();
					saveTh.join();

				} catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + System.lineSeparator());
					return;
				}

			} else if (message.getMessageClass().equals("IPM.StickyNote")
					|| message.getMessageClass().equals("IPM.Task")) {
				try {
					MapiTask task = (MapiTask) message.toMapiMessageItem();

					Receiveddate = task.getStartDate();

					MailWord mf1 = new MailWord(mf, filetype, destination_path, path, temppathm, msg, Receiveddate,
							task_box.isSelected(), taskfilterstartdate, taskfilterenddate);

					Thread saveTh = new Thread(mf1);
					saveTh.start();
					saveTh.join();

				} catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + System.lineSeparator());
					return;
				}

			} else {
				try {

					lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx + " Extracting message "
							+ mf.namingconventionmapi(message, new File(filepath)));

					if (comboBox.getSelectedItem().toString().equalsIgnoreCase("Original File Name")) {
						Main_Frame.comboBox.setSelectedItem("Original File Name");
					}

					Mapiword mf1 = new Mapiword(mf, filetype, destination_path, path, count_destination, temppathm,
							message, Receiveddate, chckbx_Mail_Filter.isSelected(), mailfilterstartdate,
							mailfilterenddate, filepath);
					Thread saveTh = new Thread(mf1);
					saveTh.start();
					saveTh.join();

				} catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + System.lineSeparator());
					return;
				}

			}
			count_eml_msg_emlx++;
			message.dispose();
		} catch (Exception e) {
			return;
		}

		// progressBar_message_p3.setValue(0);

	}

	public void ConvertEml_MSG_EMLX_mbox(MboxrdStorageWriter wr) {
		try {
			MailMessage msg = MailMessage.load(filepath);
			if (chckbxMigrateOrBackup.isSelected()) {
				msg.getAttachments().clear();
			}
			MapiConversionOptions d = MapiConversionOptions.getASCIIFormat();
			MapiMessage message = MapiMessage.fromMailMessage(msg, d);

			Date Receiveddate = msg.getDate();
			if (message.getMessageClass().equals("IPM.Contact")) {
				MailMessage mapi = new MailMessage();
				try {
					MapiContact con = (MapiContact) message.toMapiMessageItem();
					try {
						mapi.setSubject(con.getSubject());
					} catch (Exception e) {

						mapi.setSubject("");
					}
					try {
						mapi.setBody(con.getBody());
					} catch (Exception e) {

						mapi.setBody("");
					}
					con.save(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf",
							ContactSaveFormat.VCard);
					File file = new File(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf");
					mapi.addAttachment(
							new Attachment(temppathm + File.separator + mf.namingconventionmapi(message) + ".vcf"));
					file.delete();
					if (chckbx_calender_box.isSelected()) {
						if (Receiveddate.after(Calenderfilterstartdate) && Receiveddate.before(Calenderfilterenddate))
							lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
									+ " Extracting message " + mf.namingconventionmapi(message));
						wr.writeMessage(mapi);
						progressBar_message_p3.setValue(100);

					} else {
						lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
								+ " Extracting message " + mf.namingconventionmapi(message));
						wr.writeMessage(mapi);
						progressBar_message_p3.setValue(100);

					}

				} catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + "Contact" + " " + System.lineSeparator());
					return;
				}

			} else if (message.getMessageClass().equals("IPM.Appointment")) {
				MailMessage mapi = new MailMessage();
				try {

					MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

					try {
						mapi.setSubject(cal.getSubject());
					} catch (Exception e) {

						mapi.setSubject("");
					}
					try {
						mapi.setBody(cal.getBody());
					} catch (Exception e) {

						mapi.setBody("");
					}
					cal.save(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics",
							AppointmentSaveFormat.Ics);
					File file = new File(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics");

					mapi.addAttachment(
							new Attachment(temppathm + File.separator + mf.namingconventionmapi(message) + ".ics"));
					file.delete();
					if (chckbx_calender_box.isSelected()) {
						if (Receiveddate.after(Calenderfilterstartdate) && Receiveddate.before(Calenderfilterenddate)) {
							lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
									+ " Extracting message " + mf.namingconventionmapi(message));
							wr.writeMessage(mapi);
							progressBar_message_p3.setValue(100);
						}

					} else {
						lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
								+ " Extracting message " + mf.namingconventionmapi(message));
						wr.writeMessage(mapi);
						progressBar_message_p3.setValue(100);
					}

				} catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + "Calendar" + " " + System.lineSeparator());
					return;
				}

			} else if (message.getMessageClass().equals("IPM.StickyNote")
					|| message.getMessageClass().equals("IPM.Task")) {
				try {

					MapiTask task = (MapiTask) message.toMapiMessageItem();

					Receiveddate = task.getStartDate();
					if (task_box.isSelected()) {
						if (Receiveddate.after(taskfilterstartdate) && Receiveddate.before(taskfilterenddate))
							lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
									+ " Extracting message " + mf.namingconventionmapi(message));
						wr.writeMessage(msg);
						progressBar_message_p3.setValue(100);
					} else {
						lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx
								+ " Extracting message " + mf.namingconventionmapi(message));
						wr.writeMessage(msg);
						progressBar_message_p3.setValue(100);
					}

				} catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + "Task" + " " + System.lineSeparator());
					return;
				}

			} else {
				try {

					lbl_progressreport.setText("Total message Count : " + count_eml_msg_emlx + " Extracting message "
							+ mf.namingconventionmapi(message));
					mailmbox(msg, Receiveddate, wr);
				} catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + "Message" + " " + System.lineSeparator());
					return;
				}

			}

			message.dispose();

			count_eml_msg_emlx++;
		} catch (Exception e) {
			return;
		}

	}

	void Convertolmfoldertoword(File filearray) throws Exception {
		File[] files = filearray.listFiles();

		for (int i = 0; i < files.length; i++) {

			if (files[i].isDirectory()) {

				path = files[i].getPath().replace(parent, "").replace(files[i].getName(), "");

				new File(destination_path + File.separator + path).mkdirs();

				Convertolmfoldertoword(files[i]);

			} else {

				String extension = getFileExtension(files[i]);

				if (extension.equals("olm")) {

					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

							pstfolderlist = new ArrayList<String>();

							pstfolderlist.addAll(entry.getValue());

							path = files[i].getPath().replace(parent, "").replace(files[i].getName(), "");

							new File(destination_path + File.separator + path).mkdirs();

							foldername2 = files[i].getName().replace(".olm", "");

							path = path + File.separator + foldername2;

							new File(destination_path + File.separator + path).mkdirs();

							filepath = files[i].getAbsolutePath();

							ConvertOLM_word();

							path = path.replace(foldername2, "");

						}
					}
				}

			}

		}

	}

	void Convertolmfoldertofile(File filearray) throws Exception {
		File[] files = filearray.listFiles();

		for (int i = 0; i < files.length; i++) {

			if (files[i].isDirectory()) {

				Convertolmfoldertofile(files[i]);
			} else {

				String extension = getFileExtension(files[i]);

				if (extension.equals("olm")) {
					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}

						if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

							pstfolderlist = new ArrayList<String>();

							pstfolderlist.addAll(entry.getValue());

							path = files[i].getPath().replace(parent, "").replace(files[i].getName(), "");

							new File(destination_path + File.separator + path).mkdirs();

							foldername2 = files[i].getName().replace(".olm", "");

							path = path + File.separator + foldername2;

							new File(destination_path + File.separator + path).mkdirs();

							filepath = files[i].getAbsolutePath();

							ConvertOLM_file();
							path = path.replace(foldername2, "");

						}

					}
				}
			}

		}

	}

	void Convertolmfoldertovcfics(File filearray) throws Exception {
		File[] files = filearray.listFiles();

		for (int i = 0; i < files.length; i++) {

			if (files[i].isDirectory()) {

				Convertolmfoldertovcfics(files[i]);
			} else {

				String extension = getFileExtension(files[i]);

				if (extension.equals("olm")) {
					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}

						if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

							pstfolderlist = new ArrayList<String>();

							pstfolderlist.addAll(entry.getValue());

							path = files[i].getPath().replace(parent, "").replace(files[i].getName(), "");

							new File(destination_path + File.separator + path).mkdirs();

							foldername2 = files[i].getName().replace(".olm", "");

							path = path + File.separator + foldername2;

							new File(destination_path + File.separator + path).mkdirs();

							filepath = files[i].getAbsolutePath();

							ConvertOLM_vcfics();
							path = path.replace(foldername2, "");

						}

					}
				}
			}

		}

	}

	void Convertolmfoldertombox(File filearray) throws Exception {
		File[] files = filearray.listFiles();

		for (int i = 0; i < files.length; i++) {

			if (files[i].isDirectory()) {

				Convertolmfoldertombox(files[i]);
			} else {

				String extension = getFileExtension(files[i]);

				if (extension.equals("olm")) {

					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

							pstfolderlist = new ArrayList<String>();

							pstfolderlist.addAll(entry.getValue());

							path = files[i].getPath().replace(parent, "").replace(files[i].getName(), "");

							if (filetype.equalsIgnoreCase("Thunderbird")) {

								String[] splittedFileName = path.split("////");
								String k = "";

								for (int j = 0; j < splittedFileName.length; j++) {

									if (j == 0) {
										k = splittedFileName[j].replace(File.separator, "");
										path = k + ".sbd";

										new File(destination_path + File.separator + path).mkdirs();
										new MboxrdStorageWriter(destination_path + File.separator + k, false);

									} else {
										String sd = splittedFileName[j].replace(File.separator, "");
										path = path + File.separator + sd + ".sbd";
										new File(destination_path + File.separator + path).mkdirs();
										new MboxrdStorageWriter(
												destination_path + File.separator + path.replace(sd + ".sbd", "") + sd,
												false);

									}
								}

							}

							new File(destination_path + File.separator + path).mkdirs();

							foldername2 = files[i].getName().replace(".olm", "");

							path = path + File.separator + foldername2;
							if (filetype.equalsIgnoreCase("Thunderbird")) {
								path = path + ".sbd";
								new File(destination_path + File.separator + path).mkdirs();
								new MboxrdStorageWriter(destination_path + File.separator
										+ path.replace(foldername2 + ".sbd", "") + foldername2, false);
							} else {
								new File(destination_path + File.separator + path).mkdirs();
							}

							filepath = files[i].getAbsolutePath();

							ConvertOLM_mbox();
							path = path.replace(foldername2, "");

						}
					}
				}
			}

		}

	}

	void ConvertolmfoldertoCSV(File filearray) throws Exception {
		File[] files = filearray.listFiles();

		for (int i = 0; i < files.length; i++) {

			if (files[i].isDirectory()) {

				ConvertolmfoldertoCSV(files[i]);
			} else {

				String extension = getFileExtension(files[i]);

				if (extension.equals("olm")) {

					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

							pstfolderlist = new ArrayList<String>();

							pstfolderlist.addAll(entry.getValue());

							path = files[i].getPath().replace(parent, "").replace(files[i].getName(), "");

							new File(destination_path + File.separator + path).mkdirs();

							foldername2 = files[i].getName().replace(".olm", "");

							path = path + File.separator + foldername2;
							new File(destination_path + File.separator + path).mkdirs();
							filepath = files[i].getAbsolutePath();
							ConvertOLM_CSV();
							path = path.replace(foldername2, "");

						}

					}
				}
			}

		}

	}

	void Convertolmfolder_exchange(File filearray) throws Exception {
		File[] files = filearray.listFiles();

		for (int i = 0; i < files.length; i++) {
			if (files[i].isFile()) {

				String extension = getFileExtension(files[i]);

				if (extension.equals("olm")) {

					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

							pstfolderlist = new ArrayList<String>();

							pstfolderlist.addAll(entry.getValue());

							filepath = files[i].getAbsolutePath();
							String s = Folderuri;
							String filename = files[i].getName().replace(".olm", "");

							Folderuri = clientforexchange_output.createFolder(Folderuri, filename).getUri();
							ConvertOLM_exchange();
							Folderuri = s;

						}
					}
				}
			} else {
				String s = Folderuri;
				foldername4 = files[i].getName();
				Folderuri = clientforexchange_output.createFolder(Folderuri, foldername4).getUri();
				Convertolmfolder_exchange(files[i]);
				Folderuri = s;

			}

		}

	}

	void Convertolmfolderto_imap(File filearray) throws Exception {
		File[] files = filearray.listFiles();

		for (int i = 0; i < files.length; i++) {

			if (files[i].isFile()) {
				String extension = getFileExtension(files[i]);

				if (extension.equals("olm")) {

					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

							pstfolderlist = new ArrayList<String>();

							pstfolderlist.addAll(entry.getValue());

							filepath = files[i].getAbsolutePath();

							foldername3 = files[i].getName().replace(".olm", "");

							path = path + "." + foldername3;

							clientforimap_output.createFolder(iconnforimap_output, path);

							clientforimap_output.selectFolder(iconnforimap_output, path);

							ConvertOLM_imap();

							path = path.replace("." + foldername3, "");

						}
					}
				}
			} else {
				String s = path;
				foldername4 = files[i].getName();
				path = path + "." + foldername4;

				clientforimap_output.createFolder(iconnforimap_output, path);

				clientforimap_output.selectFolder(iconnforimap_output, path);

				Convertolmfolderto_imap(files[i]);

				path = s;

			}

		}

	}

	void Convertolmfolderto_gmail(File filearray) throws Exception {
		File[] files = filearray.listFiles();

		for (int i = 0; i < files.length; i++) {

			if (files[i].isFile()) {
				String extension = getFileExtension(files[i]);

				if (extension.equals("olm")) {

					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

							pstfolderlist = new ArrayList<String>();

							pstfolderlist.addAll(entry.getValue());

							filepath = files[i].getAbsolutePath();

							foldername3 = files[i].getName().replace(".olm", "");

							path = path + "/" + foldername3;

							clientforimap_output.createFolder(iconnforimap_output, path);

							clientforimap_output.selectFolder(iconnforimap_output, path);

							ConvertOLM_gmail();

							path = path.replace("/" + foldername3, "");

						}
					}
				}
			} else {
				String s = path;
				foldername4 = files[i].getName();
				path = path + "/" + foldername4;

				clientforimap_output.createFolder(iconnforimap_output, path);

				clientforimap_output.selectFolder(iconnforimap_output, path);

				Convertolmfolderto_gmail(files[i]);

				path = s;

			}

		}

	}

	void ConvertolmfoldertoPSTOST(File filearray) throws Exception {
		File[] files = filearray.listFiles();

		for (int i = 0; i < files.length; i++) {

			if (files[i].isDirectory()) {

				ConvertolmfoldertoPSTOST(files[i]);

			} else {

				String extension = getFileExtension(files[i]);
				if (filetype.equalsIgnoreCase("pst")) {
					if (extension.equals("olm")) {

						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

								pstfolderlist = new ArrayList<String>();

								pstfolderlist.addAll(entry.getValue());
								filepath = files[i].getAbsolutePath();

								foldername3 = files[i].getPath().replace(parent, "").replace(".olm", "");

								path = path + File.separator + foldername3;

								new File(destination_path + File.separator + path).mkdirs();

								fname = files[i].getName().replace(".olm", "");

								pst = PersonalStorage.create(
										destination_path + File.separator + path + File.separator + fname + ".pst",
										FileFormatVersion.Unicode);

								path = path.replace(File.separator + foldername3, "");

								pst.getRootFolder().addSubFolder(fname);

								pst.getStore().changeDisplayName(fname);

								ConvertOLM_pst();

								pst.dispose();

								path = path.replace(File.separator + foldername3, "");

							}
						}
					}
				} else if (filetype.equalsIgnoreCase("ost")) {
					if (extension.equals("olm")) {

						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

								pstfolderlist = new ArrayList<String>();

								pstfolderlist.addAll(entry.getValue());
								filepath = files[i].getAbsolutePath();

								foldername3 = files[i].getPath().replace(parent, "").replace(".olm", "");

								path = path + File.separator + foldername3;

								new File(destination_path + File.separator + path).mkdirs();
								fname = files[i].getName().replace(".olm", "");

								pst = PersonalStorage.create(
										destination_path + File.separator + path + File.separator + fname + ".pst",

										FileFormatVersion.Unicode);

								path = path.replace(File.separator + foldername3, "");

								pst.getRootFolder().addSubFolder(fname);

								pst.getStore().changeDisplayName(fname);

								ConvertOLM_pst();

								pst.dispose();

								path = path.replace(File.separator + foldername3, "");

							}
						}
					}

				}

			}

		}
		// System.out.println("Process Completed");

	}

	void ConvertMboxfoldertoword(File filearray) throws Exception {
		File[] files = filearray.listFiles();

		for (int j = 0; j < files.length; j++) {

			if (files[j].isDirectory()) {

				// System.out.println("Folder Found");

				ConvertMboxfoldertoword(files[j]);

			} else {

				String extension = getFileExtension(files[j]);
				if (extension.equalsIgnoreCase("mbox") || extension.equalsIgnoreCase("mbx")) {

					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {

							path = files[j].getPath().replace(parent, "").replace(files[j].getName(), "");

							new File(destination_path + File.separator + path).mkdirs();

							foldername2 = files[j].getName().replace(".mbox", "").replace(".mbx", "");

							path = path + File.separator + foldername2;

							new File(destination_path + File.separator + path).mkdirs();

							filepath = files[j].getAbsolutePath();

							ConvertMbox_word();
							path = path.replace(foldername2, "");

						}
					}
				}

			}

		}

	}

	void ConvertMboxfoldertofile(File filearray) throws Exception {
		File[] files = filearray.listFiles();

		for (int j = 0; j < files.length; j++) {

			if (files[j].isDirectory()) {

				// System.out.println("Folder Found");

				ConvertMboxfoldertofile(files[j]);

			} else {

				for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {

						path = files[j].getPath().replace(parent, "").replace(files[j].getName(), "");

						new File(destination_path + File.separator + path).mkdirs();

						foldername2 = files[j].getName().replace(".mbox", "").replace(".mbx", "");

						path = path + File.separator + foldername2;

						new File(destination_path + File.separator + path).mkdirs();

						filepath = files[j].getAbsolutePath();

						ConvertMbox_file();
						path = path.replace(foldername2, "");

					}
				}
			}

		}

	}

	void ConvertMboxfoldertoCSV(File filearray) throws Exception {
		File[] files = filearray.listFiles();

		for (int j = 0; j < files.length; j++) {

			if (files[j].isDirectory()) {

				// System.out.println("Folder Found");

				ConvertMboxfoldertoCSV(files[j]);

			} else {

				for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {

						path = files[j].getPath().replace(parent, "").replace(files[j].getName(), "");

						new File(destination_path + File.separator + path).mkdirs();

						foldername2 = files[j].getName().replace(".mbox", "").replace(".mbx", "");

						path = path + File.separator + foldername2;

						new File(destination_path + File.separator + path).mkdirs();

						foldername4 = files[j].getName().replace(".mbox", "").replace(".mbx", "");

						filepath = files[j].getAbsolutePath();

						ConvertMbox_CSV();
						path = path.replace(foldername2, "");

					}
				}
			}

		}

	}

	void ConvertMboxfolder_exchange(File filearray) throws Exception {
		File[] files = filearray.listFiles();

		for (int i = 0; i < files.length; i++) {
			if (files[i].isFile()) {

				for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

						String s = Folderuri;
						foldername3 = files[i].getName().replace(".mbox", "").replace(".mbx", "");
						filepath = files[i].getAbsolutePath();
						Folderuri = clientforexchange_output.createFolder(Folderuri, foldername3).getUri();

						ConvertMbox_office365();
						Folderuri = s;
					}
				}

			} else {
				// System.out.println("Folder Found");
				String s = Folderuri;
				foldername4 = files[i].getName();
				Folderuri = clientforexchange_output.createFolder(Folderuri, foldername4).getUri();
				ConvertMboxfolder_exchange(files[i]);
				Folderuri = s;

			}

		}

	}

	void ConvertMboxfolderto_imap(File filearray) throws Exception {
		File[] files = filearray.listFiles();

		// progressBar_message_p3.setValue(0);
		// progressBar_message_p3.setStringPainted(true);

		for (int i = 0; i < files.length; i++) {

			if (files[i].isFile()) {

				for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

						filepath = files[i].getAbsolutePath();

						foldername3 = files[i].getName().replace(".mbox", "").replace(".mbx", "");

						path = path + "." + foldername3;

						clientforimap_output.createFolder(iconnforimap_output, path);

						clientforimap_output.selectFolder(iconnforimap_output, path);

						ConvertMbox_imap();

						path = path.replace("." + foldername3, "");

						// System.out.println("done");

					}
				}

			} else {
				String s = path;
				foldername4 = files[i].getName();
				path = path + "." + foldername4;

				clientforimap_output.createFolder(iconnforimap_output, path);

				clientforimap_output.selectFolder(iconnforimap_output, path);

				ConvertMboxfolderto_imap(files[i]);

				path = s;

			}

		}

	}

	void ConvertMboxfolderto_gmail(File filearray) throws Exception {
		File[] files = filearray.listFiles();

		// progressBar_message_p3.setValue(0);
		// progressBar_message_p3.setStringPainted(true);

		for (int i = 0; i < files.length; i++) {

			if (files[i].isFile()) {

				for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//					if (stop) {
//						break;
//					}
					if (stop) {
						break;
					}
					if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

						filepath = files[i].getAbsolutePath();

						foldername3 = files[i].getName().replace(".mbox", "").replace(".mbx", "");

						path = path + "/" + foldername3;

						clientforimap_output.createFolder(iconnforimap_output, path);

						clientforimap_output.selectFolder(iconnforimap_output, path);

						ConvertMbox_gmail();

						path = path.replace("/" + foldername3, "");

						// System.out.println("done");

					}
				}

			} else {
				String s = path;
				foldername4 = files[i].getName();
				path = path + "/" + foldername4;

				clientforimap_output.createFolder(iconnforimap_output, path);

				clientforimap_output.selectFolder(iconnforimap_output, path);

				ConvertMboxfolderto_gmail(files[i]);

				path = s;

			}

		}

	}

	void ConvertMboxfoldertoPSTOST(File filearray) throws Exception {

		File[] files = filearray.listFiles();

		for (int j = 0; j < files.length; j++) {

			if (files[j].isDirectory()) {

				ConvertMboxfoldertoPSTOST(files[j]);

			} else {

				if (filetype.equalsIgnoreCase("pst")) {

					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {
							filepath = files[j].getAbsolutePath();
							if (chckbxSaveMboxIn.isSelected()) {

								if (checkmboxpstost) {
									path = files[j].getPath().replace(parent, "").replace(files[j].getName(), "");

									try {
										pst = PersonalStorage.create(destination_path + File.separator + path
												+ File.separator + "Mbox" + ".pst", FileFormatVersion.Unicode);
										pst.getStore().changeDisplayName("Mbox");
										checkmboxpstost = false;
									} catch (Exception e) {

										e.printStackTrace();
										continue;
									}
								}
								info = pst.getRootFolder().addSubFolder(files[j].getPath()
										.replace(parent + File.separator, "").replace(".mbx", "").replace(".mbox", ""),
										true);
								try {
									ConvertMbox_pst();
								} catch (Exception e) {
									e.printStackTrace();
								}

							} else {
								foldername3 = files[j].getPath().replace(parent, "").replace(".mbx", "")
										.replace(".mbox", "");

								path = path + File.separator + foldername3;

								new File(destination_path + File.separator + path).mkdirs();
								fname = files[j].getName().replace(".mbx", "").replace(".mbox", "");

								try {
									pst = PersonalStorage.create(
											destination_path + File.separator + path + File.separator + fname + ".pst",

											FileFormatVersion.Unicode);

									path = path.replace(File.separator + foldername3, "");

									info = pst.getRootFolder().addSubFolder(fname);

									pst.getStore().changeDisplayName(fname);
								} catch (Exception e1) {

									e1.printStackTrace();
									continue;
								}

								try {
									ConvertMbox_pst();
								} catch (Exception e) {
									e.printStackTrace();
								}

								pst.dispose();

								path = path.replace(File.separator + foldername3, "");
							}

						}

					}
				} else if (filetype.equalsIgnoreCase("ost")) {

					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {
							filepath = files[j].getAbsolutePath();
							if (chckbxSaveMboxIn.isSelected()) {

								if (checkmboxpstost) {
									path = files[j].getPath().replace(parent, "").replace(files[j].getName(), "");

									try {
										pst = PersonalStorage.create(destination_path + File.separator + path
												+ File.separator + "Mbox" + ".ost", FileFormatVersion.Unicode);
										pst.getStore().changeDisplayName("Mbox");
										checkmboxpstost = false;
									} catch (Exception e) {

										e.printStackTrace();
										continue;
									}
								}
								info = pst.getRootFolder().addSubFolder(files[j].getPath()
										.replace(parent + File.separator, "").replace(".mbx", "").replace(".mbox", ""),
										true);
								try {
									ConvertMbox_pst();
								} catch (Exception e) {
									e.printStackTrace();
								}

							} else {
								foldername3 = files[j].getPath().replace(parent, "").replace(".mbx", "")
										.replace(".mbox", "");

								path = path + File.separator + foldername3;

								new File(destination_path + File.separator + path).mkdirs();
								fname = files[j].getName().replace(".mbx", "").replace(".mbox", "");

								try {
									pst = PersonalStorage.create(
											destination_path + File.separator + path + File.separator + fname + ".ost",

											FileFormatVersion.Unicode);

									path = path.replace(File.separator + foldername3, "");

									info = pst.getRootFolder().addSubFolder(fname);

									pst.getStore().changeDisplayName(fname);
								} catch (Exception e1) {

									e1.printStackTrace();
									continue;
								}

								try {
									ConvertMbox_pst();
								} catch (Exception e) {
									e.printStackTrace();
								}

								pst.dispose();

								path = path.replace(File.separator + foldername3, "");
							}
						}
					}

				}

			}

		}

	}

	void Converteml_emlx_msg_folder_mbox(File filearray, MboxrdStorageWriter wr, long democount) throws Exception {
		File[] files = filearray.listFiles();

		File f;

		// progressBar_message_p3.setValue(0);

		// progressBar_message_p3.setStringPainted(true);

		for (int j = 0; j < files.length; j++) {

			if (files[j].isDirectory()) {

				// System.out.println("Folder Found");
				listduplicacy.clear();
				path = files[j].getPath().replace(parent, "");

				// System.out.println(s);

				f = new File(destination_path + File.separator + path);

				f.mkdirs();

				MboxrdStorageWriter wr1 = new MboxrdStorageWriter(
						destination_path + File.separator + path + File.separator + files[j].getName() + ".mbx", false);
				long democount1 = 0;

				Converteml_emlx_msg_folder_mbox(files[j], wr1, democount1);
				wr1.dispose();

			} else {
				if (demo) {
					if (democount >= All_Data.demo_count) {
						continue;
					}
				}
				String extension = getFileExtension(files[j]);
				if (extension.equals("eml")) {

					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {

							filepath = files[j].getAbsolutePath();

							ConvertEml_MSG_EMLX_mbox(wr);
						}
					}
				} else if (fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")) {
					if (extension.equalsIgnoreCase("emlx")) {

						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {
								filepath = files[j].getAbsolutePath();

								// int messageprogress = (count * 100) / messagesize;

								// progressBar_message_p3.setValue(messageprogress);

								ConvertEml_MSG_EMLX_mbox(wr);

							}
						}
					}
				} else if (fileoptionm.equalsIgnoreCase("Maildir")) {

					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {
							filepath = files[j].getAbsolutePath();

							// int messageprogress = (count * 100) / messagesize;

							// progressBar_message_p3.setValue(messageprogress);

							ConvertEml_MSG_EMLX_mbox(wr);

						}
					}

				} else if (fileoptionm.equalsIgnoreCase("Message File (.msg)")) {
					if (extension.equalsIgnoreCase("msg")) {

						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {
								filepath = files[j].getAbsolutePath();

								// int messageprogress = (count * 100) / messagesize;

								// progressBar_message_p3.setValue(messageprogress);

								ConvertEml_MSG_EMLX_mbox(wr);
							}
						}
					}

				}

			}
		}

		// System.out.println("Process Completed");

	}

	void Converteml_emlx_msg_folder_word(File filearray, long democount) throws Exception {
		File[] files = filearray.listFiles();

		File f;

		// progressBar_message_p3.setValue(0);

		// progressBar_message_p3.setStringPainted(true);

		for (int j = 0; j < files.length; j++) {

			if (files[j].isDirectory()) {

				path = files[j].getPath().replace(parent, "");
				listduplicacy.clear();
				// System.out.println(path);

				f = new File(destination_path + File.separator + path);

				f.mkdirs();

				path = "";
				long democount1 = 0;
				Converteml_emlx_msg_folder_word(files[j], democount1);

			} else {
				if (demo) {
					if (democount >= All_Data.demo_count) {
						continue;
					}
				}
				String extension = getFileExtension(files[j]);
				if (fileoptionm.equalsIgnoreCase("EML File (.eml)")) {
					if (extension.equals("eml")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {
								filepath = files[j].getAbsolutePath();

								foldername3 = files[j].getPath().replace(parent, "").replace(files[j].getName(), "")
										.replace(".eml", "");

								path = path + File.separator + foldername3;

								new File(destination_path + File.separator + path).mkdirs();

								ConvertEml_MSG_EMLX_word();

								path = path.replace(File.separator + foldername3, "");

							}
						}
					}
				} else if (fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")) {
					if (extension.equalsIgnoreCase("emlx")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {

								filepath = files[j].getAbsolutePath();

								foldername3 = files[j].getPath().replace(parent, "").replace(files[j].getName(), "")
										.replace(".eml", "");

								path = path + File.separator + foldername3;

								new File(destination_path + File.separator + path).mkdirs();

								ConvertEml_MSG_EMLX_word();

								path = path.replace(File.separator + foldername3, "");

							}
						}
					}
				} else if (fileoptionm.equalsIgnoreCase("Maildir")) {

					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {

							filepath = files[j].getAbsolutePath();

							foldername3 = files[j].getPath().replace(parent, "").replace(files[j].getName(), "")
									.replace(".eml", "");

							path = path + File.separator + foldername3;

							new File(destination_path + File.separator + path).mkdirs();

							ConvertEml_MSG_EMLX_word();

							path = path.replace(File.separator + foldername3, "");

						}

					}
				} else if (fileoptionm.equalsIgnoreCase("Message File (.msg)")) {
					if (extension.equalsIgnoreCase("msg")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {
								filepath = files[j].getAbsolutePath();

								foldername3 = files[j].getPath().replace(parent, "").replace(files[j].getName(), "")
										.replace(".eml", "");

								path = path + File.separator + foldername3;

								new File(destination_path + File.separator + path).mkdirs();

								ConvertEml_MSG_EMLX_word();

								path = path.replace(File.separator + foldername3, "");
							}
						}
					}
				}

			}

		}
		// System.out.println("Process Completed");

	}

	void Converteml_emlx_msg_folder_CSV(File filearray, CSVWriter writer, long democount) throws Exception {
		File[] files = filearray.listFiles();
		File f;

		for (int j = 0; j < files.length; j++) {

			if (files[j].isDirectory()) {
				path = files[j].getPath().replace(parent, "");
				listduplicacy.clear();
				// System.out.println(path);

				f = new File(destination_path + File.separator + path);

				f.mkdirs();

				foldername5 = files[j].getName();

				File file1 = new File(destination_path + File.separator + path + File.separator + foldername5 + ".csv");
				FileWriter outputfile = new FileWriter(file1);

				CSVWriter writer1 = new CSVWriter(outputfile);

				String[] header = { "Date", "Subject", "Body", "From", "To", "CC:" };

				writer1.writeNext(header);
				long democount1 = 0;
				Converteml_emlx_msg_folder_CSV(files[j], writer1, democount1);
				writer1.close();
				path = "";

			} else {
				if (demo) {
					if (democount >= All_Data.demo_count) {
						continue;
					}
				}
				String extension = getFileExtension(files[j]);
				if (fileoptionm.equalsIgnoreCase("EML File (.eml)")) {
					if (extension.equals("eml")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {

								filepath = files[j].getAbsolutePath();

								ConvertEml_MSG_EMLX_CSV(writer);

							}
						}
					}
				} else if (fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")) {
					if (extension.equalsIgnoreCase("emlx")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {
								filepath = files[j].getAbsolutePath();

								ConvertEml_MSG_EMLX_CSV(writer);

							}
						}
					}
				} else if (fileoptionm.equalsIgnoreCase("Maildir")) {

					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {
							filepath = files[j].getAbsolutePath();

							ConvertEml_MSG_EMLX_CSV(writer);

						}

					}
				} else if (fileoptionm.equalsIgnoreCase("Message File (.msg)")) {
					if (extension.equalsIgnoreCase("msg")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {
								filepath = files[j].getAbsolutePath();

								ConvertEml_MSG_EMLX_CSV(writer);

							}
						}
					}
				}

			}

		}

		// System.out.println("Process Completed");

	}

	void Converteml_PSTOST_folder_file(File filearray) throws Exception {
		File[] files = filearray.listFiles();

		for (int j = 0; j < files.length; j++) {

			if (files[j].isDirectory()) {

				// System.out.println("Folder Found");

				Converteml_PSTOST_folder_file(files[j]);

			} else {

				String extension = getFileExtension(files[j]);
				if (fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")) {
					if (extension.equalsIgnoreCase("pst")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {

								pstfolderlist = new ArrayList<String>();

								pstfolderlist.addAll(entry.getValue());

								path = files[j].getPath().replace(parent, "").replace(files[j].getName(), "");

								new File(destination_path + File.separator + path).mkdirs();

								foldername2 = files[j].getName().replace(".pst", "");

								path = path + File.separator + foldername2;

								new File(destination_path + File.separator + path).mkdirs();

								filepath = files[j].getAbsolutePath();

								ConvertPSTOST_file();
								path = path.replace(foldername2, "");

							}
						}
					}

				} else if (fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")) {

					if (extension.equalsIgnoreCase("ost")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {
								pstfolderlist = new ArrayList<String>();

								pstfolderlist.addAll(entry.getValue());
								path = files[j].getPath().replace(parent, "").replace(files[j].getName(), "");

								new File(destination_path + File.separator + path).mkdirs();

								foldername2 = files[j].getName().replace(".ost", "");

								path = path + File.separator + foldername2;

								new File(destination_path + File.separator + path).mkdirs();

								filepath = files[j].getAbsolutePath();

								ConvertPSTOST_file();
								path = path.replace(foldername2, "");

							}
						}
					}
				}
			}

		}

		// System.out.println("Process Completed");

	}

	void Converteml_PSTOST_folder_vcfics(File filearray) throws Exception {
		File[] files = filearray.listFiles();

		for (int j = 0; j < files.length; j++) {

			if (files[j].isDirectory()) {

				// System.out.println("Folder Found");

				Converteml_PSTOST_folder_vcfics(files[j]);

			} else {

				String extension = getFileExtension(files[j]);
				if (fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")) {
					if (extension.equalsIgnoreCase("pst")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {

								pstfolderlist = new ArrayList<String>();

								pstfolderlist.addAll(entry.getValue());

								path = files[j].getPath().replace(parent, "").replace(files[j].getName(), "");

								new File(destination_path + File.separator + path).mkdirs();

								foldername2 = files[j].getName().replace(".pst", "");

								path = path + File.separator + foldername2;

								new File(destination_path + File.separator + path).mkdirs();

								filepath = files[j].getAbsolutePath();

								ConvertPSTOST_vcfics();
								path = path.replace(foldername2, "");

							}
						}
					}

				} else if (fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")) {

					if (extension.equalsIgnoreCase("ost")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {
								pstfolderlist = new ArrayList<String>();

								pstfolderlist.addAll(entry.getValue());
								path = files[j].getPath().replace(parent, "").replace(files[j].getName(), "");

								new File(destination_path + File.separator + path).mkdirs();

								foldername2 = files[j].getName().replace(".ost", "");

								path = path + File.separator + foldername2;

								new File(destination_path + File.separator + path).mkdirs();

								filepath = files[j].getAbsolutePath();

								ConvertPSTOST_vcfics();
								path = path.replace(foldername2, "");

							}
						}
					}
				}
			}

		}

		// System.out.println("Process Completed");

	}

	void Converteml_PSTOST_folder_MBox(File filearray) throws Exception {
		File[] files = filearray.listFiles();
		for (int j = 0; j < files.length; j++) {

			if (files[j].isDirectory()) {

				// System.out.println("Folder Found");

				Converteml_PSTOST_folder_MBox(files[j]);

			} else {

				String extension = getFileExtension(files[j]);
				if (fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")) {
					if (extension.equalsIgnoreCase("pst")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {

								pstfolderlist = new ArrayList<String>();

								pstfolderlist.addAll(entry.getValue());

								path = files[j].getPath().replace(parent, "").replace(files[j].getName(), "");
								if (filetype.equalsIgnoreCase("Thunderbird")) {

									String[] splittedFileName;

									if (OS.contains("windows")) {
										splittedFileName = path.split("\\\\");
									} else {
										splittedFileName = path.split(File.separator);
									}

									String k = "";

									for (int i = 0; i < splittedFileName.length; i++) {

										if (i == 0) {
											k = splittedFileName[i].replace(File.separator, "");
											path = k + ".sbd";

											new File(destination_path + File.separator + path).mkdirs();
											new MboxrdStorageWriter(destination_path + File.separator + k, false);

										} else {
											String sd = splittedFileName[i].replace(File.separator, "");
											path = path + File.separator + sd + ".sbd";
											new File(destination_path + File.separator + path).mkdirs();
											new MboxrdStorageWriter(destination_path + File.separator
													+ path.replace(sd + ".sbd", "") + sd, false);

										}
									}

								}
								new File(destination_path + File.separator + path).mkdirs();

								foldername2 = files[j].getName().replace(".pst", "");

								path = path + File.separator + foldername2;
								if (filetype.equalsIgnoreCase("Thunderbird")) {
									path = path + ".sbd";
									new File(destination_path + File.separator + path).mkdirs();
									new MboxrdStorageWriter(destination_path + File.separator
											+ path.replace(foldername2 + ".sbd", "") + foldername2, false);
								} else {
									new File(destination_path + File.separator + path).mkdirs();
								}

								filepath = files[j].getAbsolutePath();

								ConvertPSTOST_mbox();
								path = path.replace(foldername2, "");

							}
						}
					}

				} else if (fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")) {

					if (extension.equalsIgnoreCase("ost")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {
								pstfolderlist = new ArrayList<String>();

								pstfolderlist.addAll(entry.getValue());
								path = files[j].getPath().replace(parent, "").replace(files[j].getName(), "");
								if (filetype.equalsIgnoreCase("Thunderbird")) {

									String[] splittedFileName;
									if (OS.contains("windows")) {
										splittedFileName = path.split("\\\\");
									} else {
										splittedFileName = path.split(File.separator);
									}

									String k = "";

									for (int i = 0; i < splittedFileName.length; i++) {

										if (i == 0) {
											k = splittedFileName[i].replace(File.separator, "");
											path = k + ".sbd";

											new File(destination_path + File.separator + path).mkdirs();
											new MboxrdStorageWriter(destination_path + File.separator + k, false);

										} else {
											String sd = splittedFileName[i].replace(File.separator, "");
											path = path + File.separator + sd + ".sbd";
											new File(destination_path + File.separator + path).mkdirs();
											new MboxrdStorageWriter(destination_path + File.separator
													+ path.replace(sd + ".sbd", "") + sd, false);
											;

										}
									}

								}
								new File(destination_path + File.separator + path).mkdirs();

								foldername2 = files[j].getName().replace(".ost", "");

								path = path + File.separator + foldername2;

								if (filetype.equalsIgnoreCase("Thunderbird")) {
									path = path + ".sbd";
									new File(destination_path + File.separator + path).mkdirs();
									new MboxrdStorageWriter(destination_path + File.separator
											+ path.replace(foldername2 + ".sbd", "") + foldername2, false);
								} else {
									new File(destination_path + File.separator + path).mkdirs();
								}

								filepath = files[j].getAbsolutePath();

								ConvertPSTOST_mbox();
								path = path.replace(foldername2, "");

							}
						}
					}
				}
			}

		}

		// System.out.println("Process Completed");

	}

	void Converteml_PSTOST_folder_PSTOST(File filearray) throws Exception {
		File[] files = filearray.listFiles();
		for (int j = 0; j < files.length; j++) {

			if (files[j].isDirectory()) {

				// System.out.println("Folder Found");

				Converteml_PSTOST_folder_PSTOST(files[j]);

			} else {

				String extension = getFileExtension(files[j]);
				if (fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")) {
					if (extension.equalsIgnoreCase("pst")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {

								pstfolderlist = new ArrayList<String>();

								pstfolderlist.addAll(entry.getValue());

								path = files[j].getPath().replace(parent, "").replace(files[j].getName(), "");

								new File(destination_path + File.separator + path).mkdirs();

								foldername2 = files[j].getName().replace(".pst", "");

								path = path + File.separator + foldername2;

								new File(destination_path + File.separator + path).mkdirs();

								filepath = files[j].getAbsolutePath();

								ost = PersonalStorage.create(destination_path + File.separator + path + File.separator
										+ foldername2 + ".ost", FileFormatVersion.Unicode);

								ost.getStore().changeDisplayName(foldername2);
								pst = PersonalStorage.fromFile(filepath);
								ConvertPST_ost();

								ost.dispose();
								path = path.replace(foldername2, "");

							}
						}
					}

				} else if (fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")) {

					if (extension.equalsIgnoreCase("ost")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {
								pstfolderlist = new ArrayList<String>();

								pstfolderlist.addAll(entry.getValue());
								path = files[j].getPath().replace(parent, "").replace(files[j].getName(), "");

								new File(destination_path + File.separator + path).mkdirs();

								foldername2 = files[j].getName().replace(".ost", "");

								path = path + File.separator + foldername2;

								new File(destination_path + File.separator + path).mkdirs();

								filepath = files[j].getAbsolutePath();

								ost = PersonalStorage.create(destination_path + File.separator + path + File.separator
										+ foldername2 + ".pst", FileFormatVersion.Unicode);

								ost.getStore().changeDisplayName(foldername2);
								pst = PersonalStorage.fromFile(filepath);
								ConvertPST_ost();

								ost.dispose();
								path = path.replace(foldername2, "");

							}
						}
					}
				}
			}

		}

	}

	void Converteml_PSTOST_folder_CSV(File filearray) throws Exception {

		File[] files = filearray.listFiles();
		for (int j = 0; j < files.length; j++) {

			if (files[j].isDirectory()) {

				// System.out.println("Folder Found");

				Converteml_PSTOST_folder_CSV(files[j]);

			} else {

				String extension = getFileExtension(files[j]);
				if (fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")) {
					if (extension.equalsIgnoreCase("pst")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {

								pstfolderlist = new ArrayList<String>();

								pstfolderlist.addAll(entry.getValue());

								path = files[j].getPath().replace(parent, "").replace(files[j].getName(), "");

								new File(destination_path + File.separator + path).mkdirs();

								foldername2 = files[j].getName().replace(".pst", "");

								path = path + File.separator + foldername2;

								new File(destination_path + File.separator + path).mkdirs();

								filepath = files[j].getAbsolutePath();

								ConvertPSTOST_csv();
								path = path.replace(foldername2, "");

							}
						}
					}

				} else if (fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")) {

					if (extension.equalsIgnoreCase("ost")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {
								pstfolderlist = new ArrayList<String>();

								pstfolderlist.addAll(entry.getValue());
								path = files[j].getPath().replace(parent, "").replace(files[j].getName(), "");

								new File(destination_path + File.separator + path).mkdirs();

								foldername2 = files[j].getName().replace(".ost", "");

								path = path + File.separator + foldername2;

								new File(destination_path + File.separator + path).mkdirs();

								filepath = files[j].getAbsolutePath();

								ConvertPSTOST_csv();
								path = path.replace(foldername2, "");

							}
						}
					}
				}
			}

		}

		// System.out.println("Process Completed");

	}

	void ConvertPSTOST_folder_imap(File filearray) throws Exception {
		File[] files = filearray.listFiles();

		// progressBar_message_p3.setValue(0);
		// progressBar_message_p3.setStringPainted(true);

		for (int i = 0; i < files.length; i++) {

			if (files[i].isFile()) {
				String extension = getFileExtension(files[i]);

				if (fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")) {
					if (extension.equalsIgnoreCase("pst")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

								pstfolderlist = new ArrayList<String>();

								pstfolderlist.addAll(entry.getValue());

								filepath = files[i].getAbsolutePath();

								foldername3 = files[i].getName().replace(".pst", "");

								path = path + "." + foldername3;

								// System.out.println(foldername3);

								// System.out.println(path);

								clientforimap_output.createFolder(iconnforimap_output, path);

								clientforimap_output.selectFolder(iconnforimap_output, path);

								ConvertPSTOST_imap();

								path = path.replace("." + foldername3, "");

								// System.out.println("done");

							}
						}
					}
				} else if (fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")) {
					if (extension.equalsIgnoreCase("ost")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {
								pstfolderlist = new ArrayList<String>();

								pstfolderlist.addAll(entry.getValue());

								foldername3 = files[i].getName().replace(".ost", "");

								path = path + "." + foldername3;

								clientforimap_output.createFolder(iconnforimap_output, path);

								clientforimap_output.selectFolder(iconnforimap_output, path);

								ConvertPSTOST_imap();

								// System.out.println("done");

							}
						}
					}
				}

			} else {
				String s = path;
				foldername4 = files[i].getName();
				path = path + "." + foldername4;

				clientforimap_output.createFolder(iconnforimap_output, path);

				clientforimap_output.selectFolder(iconnforimap_output, path);

				ConvertPSTOST_folder_imap(files[i]);

				path = s;

			}

		}

	}

	void ConvertPSTOST_folder_gmail(File filearray) throws Exception {
		File[] files = filearray.listFiles();

		// progressBar_message_p3.setValue(0);
		// progressBar_message_p3.setStringPainted(true);

		for (int i = 0; i < files.length; i++) {

			if (files[i].isFile()) {
				String extension = getFileExtension(files[i]);
				if (fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")) {
					if (extension.equalsIgnoreCase("pst")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

								pstfolderlist = new ArrayList<String>();

								pstfolderlist.addAll(entry.getValue());

								filepath = files[i].getAbsolutePath();

								foldername3 = files[i].getName().replace(".pst", "");

								path = path + "/" + foldername3;

								// System.out.println(foldername3);

								// System.out.println(path);

								clientforimap_output.createFolder(iconnforimap_output, path);

								clientforimap_output.selectFolder(iconnforimap_output, path);

								ConvertPSTOST_gmail();

								path = path.replace("/" + foldername3, "");

								// System.out.println("done");

							}
						}
					}
				} else if (fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")) {
					if (extension.equalsIgnoreCase("ost")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {
								pstfolderlist = new ArrayList<String>();

								pstfolderlist.addAll(entry.getValue());

								filepath = files[i].getAbsolutePath();

								foldername3 = files[i].getName().replace(".ost", "");

								path = path + "/" + foldername3;

								clientforimap_output.createFolder(iconnforimap_output, path);

								clientforimap_output.selectFolder(iconnforimap_output, path);

								ConvertPSTOST_gmail();

								path = path.replace("/" + foldername3, "");

								// System.out.println("done");

							}
						}
					}

				}

			} else {

				String s = path;
				foldername4 = files[i].getName();
				path = path + "/" + foldername4;

				clientforimap_output.createFolder(iconnforimap_output, path);

				clientforimap_output.selectFolder(iconnforimap_output, path);

				ConvertPSTOST_folder_gmail(files[i]);

				path = s;

			}

		}

	}

	void ConvertPSTOST_folder_exchange(File filearray) throws Exception {
		File[] files = filearray.listFiles();

		// progressBar_message_p3.setValue(0);

		// progressBar_message_p3.setStringPainted(true);

		for (int i = 0; i < files.length; i++) {
			if (files[i].isFile()) {

				String extension = getFileExtension(files[i]);

				if (fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")) {

					if (extension.equalsIgnoreCase("pst")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

								pstfolderlist = new ArrayList<String>();

								pstfolderlist.addAll(entry.getValue());

								String s = Folderuri;
								foldername3 = files[i].getName().replace(".pst", "");
								filepath = files[i].getAbsolutePath();
								Folderuri = clientforexchange_output.createFolder(Folderuri, foldername3).getUri();

								ConvertPSTOST_365();
								Folderuri = s;
							}
						}
					}
				} else if (fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")) {

					if (extension.equals("ost")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

								// int messageprogress = (count * 100) / messagesize;

								// progressBar_message_p3.setValue(messageprogress);
								pstfolderlist = new ArrayList<String>();

								pstfolderlist.addAll(entry.getValue());
								String s = Folderuri;
								foldername3 = files[i].getName().replace(".ost", "");
								filepath = files[i].getAbsolutePath();
								Folderuri = clientforexchange_output.createFolder(Folderuri, foldername3).getUri();

								ConvertPSTOST_365();
								Folderuri = s;

							}
						}
					}
				}

			} else {
				// System.out.println("Folder Found");
				String s = Folderuri;
				foldername4 = files[i].getName();
				Folderuri = clientforexchange_output.createFolder(Folderuri, foldername4).getUri();
				ConvertPSTOST_folder_exchange(files[i]);
				Folderuri = s;

			}

		}

	}

	void Converteml_PSTOST_folder_word(File filearray) throws Exception {
		File[] files = filearray.listFiles();

		for (int j = 0; j < files.length; j++) {

			if (files[j].isDirectory()) {

				// System.out.println("Folder Found");

				Converteml_PSTOST_folder_word(files[j]);

			} else {

				String extension = getFileExtension(files[j]);
				if (fileoptionm.equalsIgnoreCase("MICROSOFT OUTLOOK (.pst)")) {
					if (extension.equalsIgnoreCase("pst")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {

								pstfolderlist = new ArrayList<String>();

								pstfolderlist.addAll(entry.getValue());

								path = files[j].getPath().replace(parent, "").replace(files[j].getName(), "");

								new File(destination_path + File.separator + path).mkdirs();

								foldername2 = files[j].getName().replace(".pst", "");

								path = path + File.separator + foldername2;

								new File(destination_path + File.separator + path).mkdirs();

								filepath = files[j].getAbsolutePath();

								ConvertPSTOST_word();
								path = path.replace(foldername2, "");

							}
						}
					}

				} else if (fileoptionm.equalsIgnoreCase("Exchange Offline Storage (.ost)")) {

					if (extension.equalsIgnoreCase("ost")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {
								pstfolderlist = new ArrayList<String>();

								pstfolderlist.addAll(entry.getValue());
								path = files[j].getPath().replace(parent, "").replace(files[j].getName(), "");

								new File(destination_path + File.separator + path).mkdirs();

								foldername2 = files[j].getName().replace(".ost", "");

								path = path + File.separator + foldername2;

								new File(destination_path + File.separator + path).mkdirs();

								filepath = files[j].getAbsolutePath();

								ConvertPSTOST_word();
								path = path.replace(foldername2, "");

							}
						}
					}
				}
			}

		}

		// System.out.println("Process Completed");

	}

	void Converteml_emlx_msg_folder_file(File filearray, long democount) throws Exception {
		File[] files = filearray.listFiles();

		for (int j = 0; j < files.length; j++) {

			if (files[j].isDirectory()) {
				listduplicacy.clear();
				long democount1 = 0;
				Converteml_emlx_msg_folder_file(files[j], democount1);

			} else {
				if (demo) {
					if (democount >= All_Data.demo_count) {
						continue;
					}
				}
				democount++;
				String extension = getFileExtension(files[j]);
				if (fileoptionm.equalsIgnoreCase("EML File (.eml)")) {

					if (extension.equals("eml")) {

						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							System.out.println(files[j]);
							System.out.println(entry.getKey().trim());
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {

								path = files[j].getPath().replace(parent, "").replace(files[j].getName(), "");

								new File(destination_path + File.separator + path).mkdirs();

								filepath = files[j].getAbsolutePath();

								ConvertEml_MSG_EMLX_file();

							}
						}
					}

				} else if (fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")) {

					if (extension.equalsIgnoreCase("emlx")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {

								path = files[j].getPath().replace(parent, "").replace(files[j].getName(), "");

								new File(destination_path + File.separator + path).mkdirs();
								filepath = files[j].getAbsolutePath();
								ConvertEml_MSG_EMLX_file();

							}
						}
					}
				} else if (fileoptionm.equalsIgnoreCase("Maildir")) {

					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {

							path = files[j].getPath().replace(parent, "").replace(files[j].getName(), "");

							new File(destination_path + File.separator + path).mkdirs();
							filepath = files[j].getAbsolutePath();
							ConvertEml_MSG_EMLX_file();

						}

					}
				} else if (fileoptionm.equalsIgnoreCase("Message File (.msg)")) {

					if (extension.equalsIgnoreCase("msg")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[j].getAbsolutePath())) {

								path = files[j].getPath().replace(parent, "").replace(files[j].getName(), "");

								new File(destination_path + File.separator + path).mkdirs();
								filepath = files[j].getAbsolutePath();
								ConvertEml_MSG_EMLX_file();

							}
						}
					}
				}
			}

		}

	}

	void Converteml_emlx_msg_folder_exchange(File filearray, long democount) throws Exception {

		File[] files = filearray.listFiles();
		String s;

		for (int i = 0; i < files.length; i++) {

			if (files[i].isFile()) {
				if (demo) {
					if (democount >= All_Data.demo_count) {
						continue;
					}
				}
				democount++;
				String extension = getFileExtension(files[i]);

				if (fileoptionm.equalsIgnoreCase("EML File (.eml)")) {

					if (extension.equals("eml")) {

						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

								filepath = files[i].getAbsolutePath();

								ConvertEml_MSG_EMLX_office365();

							}
						}
					}
				} else if (fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")) {

					if (extension.equalsIgnoreCase("emlx")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

								filepath = files[i].getAbsolutePath();

								ConvertEml_MSG_EMLX_office365();

							}
						}
					}
				} else if (fileoptionm.equalsIgnoreCase("Maildir")) {

					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

							filepath = files[i].getAbsolutePath();

							ConvertEml_MSG_EMLX_office365();

						}

					}
				} else if (fileoptionm.equalsIgnoreCase("Message File (.msg)")) {

					if (extension.equalsIgnoreCase("msg")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

								filepath = files[i].getAbsolutePath();

								ConvertEml_MSG_EMLX_office365();

								// System.out.println("done");

							}
						}
					}
				}

			} else {
				// System.out.println("Folder Found");
				listduplicacy.clear();
				s = Folderuri;
				foldername4 = files[i].getName();
				Folderuri = clientforexchange_output.createFolder(Folderuri, foldername4).getUri();
				long democount1 = 0;
				Converteml_emlx_msg_folder_exchange(files[i], democount1);
				Folderuri = s;

			}

		}

	}

	void Converteml_emlx_msg_folder_gmail(File filearray, long democount) throws Exception {

		File[] files = filearray.listFiles();

		for (int i = 0; i < files.length; i++) {

			if (files[i].isFile()) {
				if (demo) {
					if (democount >= All_Data.demo_count) {
						continue;
					}
				}
				democount++;
				String extension = getFileExtension(files[i]);

				if (fileoptionm.equalsIgnoreCase("EML File (.eml)")) {
					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {
							if (extension.equals("eml")) {

								if (fname.equals(files[i].getPath().replace(parent, "")

										.replace(File.separator + files[i].getName(), ""))) {

									filepath = files[i].getAbsolutePath();

									ConvertEml_MSG_EMLX_gmail();

								} else {

									filepath = files[i].getAbsolutePath();

									ConvertEml_MSG_EMLX_gmail();

								}

							}
						}
					}
				} else if (fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")) {

					if (extension.equalsIgnoreCase("emlx")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {
								if (fname.equals(files[i].getPath().replace(parent, "")

										.replace(File.separator + files[i].getName(), ""))) {

									filepath = files[i].getAbsolutePath();

									ConvertEml_MSG_EMLX_gmail();

								} else {

									filepath = files[i].getAbsolutePath();

									ConvertEml_MSG_EMLX_gmail();

								}

							}
						}
					}
				} else if (fileoptionm.equalsIgnoreCase("Maildir")) {

					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {
							if (fname.equals(files[i].getPath().replace(parent, "")

									.replace(File.separator + files[i].getName(), ""))) {

								filepath = files[i].getAbsolutePath();

								ConvertEml_MSG_EMLX_gmail();

							} else {

								filepath = files[i].getAbsolutePath();

								ConvertEml_MSG_EMLX_gmail();

							}

						}
					}
				} else if (fileoptionm.equalsIgnoreCase("Message File (.msg)")) {
					if (extension.equalsIgnoreCase("msg")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {
								if (fname.equals(files[i].getPath().replace(parent, "")

										.replace(File.separator + files[i].getName(), ""))) {

									filepath = files[i].getAbsolutePath();

									ConvertEml_MSG_EMLX_gmail();

								} else {

									filepath = files[i].getAbsolutePath();

									ConvertEml_MSG_EMLX_gmail();

								}

							}
						}
					}

				}

			} else {

				foldername = files[i].getName();
				listduplicacy.clear();

				if (filetype.equalsIgnoreCase("GoDaddy email")) {
					foldername = foldername.replaceAll("[^a-zA-Z0-9]", "");

				}
				path = path + "/" + foldername;

				clientforimap_output.createFolder(iconnforimap_output, path);

				clientforimap_output.selectFolder(iconnforimap_output, path);
				long democount1 = 0;
				Converteml_emlx_msg_folder_gmail(files[i], democount1);
				path = removefoldergmail(path);
			}

		}

	}

	void Converteml_emlx_msg_folder_imap(File filearray, long democount) throws Exception {

		File[] files = filearray.listFiles();

		// progressBar_message_p3.setValue(0);

		// progressBar_message_p3.setStringPainted(true);

		for (int i = 0; i < files.length; i++) {

			if (files[i].isFile()) {
				if (demo) {
					if (democount >= All_Data.demo_count) {
						continue;
					}
				}
				democount++;
				String extension = getFileExtension(files[i]);

				if (fileoptionm.equalsIgnoreCase("EML File (.eml)")) {

					if (extension.equals("eml")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {
								if (fname.equals(files[i].getPath().replace(parent, "")

										.replace(File.separator + files[i].getName(), ""))) {

									filepath = files[i].getAbsolutePath();

									ConvertEml_MSG_EMLX_imap();

								} else {

									filepath = files[i].getAbsolutePath();

									ConvertEml_MSG_EMLX_imap();

								}

							}
						}
					}
				} else if (fileoptionm.equalsIgnoreCase("Maildir")) {

					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {
							if (fname.equals(files[i].getPath().replace(parent, "")

									.replace(File.separator + files[i].getName(), ""))) {

								filepath = files[i].getAbsolutePath();

								ConvertEml_MSG_EMLX_imap();

							} else {

								filepath = files[i].getAbsolutePath();

								ConvertEml_MSG_EMLX_imap();

							}

						}
					}
				} else if (fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")) {

					if (extension.equalsIgnoreCase("emlx")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {
								if (fname.equals(files[i].getPath().replace(parent, "")

										.replace(File.separator + files[i].getName(), ""))) {

									// int messageprogress = (count * 100) / messagesize;

									// progressBar_message_p3.setValue(messageprogress);

									filepath = files[i].getAbsolutePath();

									ConvertEml_MSG_EMLX_imap();

								} else {
									// int messageprogress = (count * 100) / messagesize;

									// progressBar_message_p3.setValue(messageprogress);

									filepath = files[i].getAbsolutePath();

									ConvertEml_MSG_EMLX_imap();

								}
								// System.out.println("done");
							}
						}
					}
				} else if (fileoptionm.equalsIgnoreCase("Message File (.msg)")) {
					if (extension.equalsIgnoreCase("msg")) {
						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {
								if (fname.equals(files[i].getPath().replace(parent, "")

										.replace(File.separator + files[i].getName(), ""))) {

									filepath = files[i].getAbsolutePath();

									ConvertEml_MSG_EMLX_imap();

								} else {

									filepath = files[i].getAbsolutePath();

									ConvertEml_MSG_EMLX_imap();

								}

							}
						}
					}

				}

			} else {

				foldername = files[i].getName();

				path = path + "." + foldername;
				listduplicacy.clear();
				clientforimap_output.createFolder(iconnforimap_output, path);

				clientforimap_output.selectFolder(iconnforimap_output, path);
				long democount1 = 0;
				Converteml_emlx_msg_folder_imap(files[i], democount1);
				path = path.replace("." + foldername, "");
			}

		}

	}

	void Converteml_emlx_msg_folder_PSTOST(File filearray, long democount) throws Exception {

		File[] files = filearray.listFiles();

		for (int i = 0; i < files.length; i++) {

			if (files[i].isFile()) {

				if (info == null) {
					info = pst.getRootFolder().addSubFolder(files[i].getPath().replace(parent, ""), true);
				}
				if (demo) {
					if (democount >= All_Data.demo_count) {
						continue;
					}
				}
				democount++;
				String extension = getFileExtension(files[i]);
				if (fileoptionm.equalsIgnoreCase("EML File (.eml)")) {
					if (extension.equals("eml")) {

						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

								filepath = files[i].getAbsolutePath();
								ConvertEml_MSG_EMLX_pst();

							}
						}
					}
				} else if (fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")) {
					if (extension.equalsIgnoreCase("emlx")) {

						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

								filepath = files[i].getAbsolutePath();
								ConvertEml_MSG_EMLX_pst();

							}
						}
					}
				} else if (fileoptionm.equalsIgnoreCase("Maildir")) {

					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

							filepath = files[i].getAbsolutePath();
							ConvertEml_MSG_EMLX_pst();

						}

					}
				} else if (fileoptionm.equalsIgnoreCase("Message File (.msg)")) {
					if (extension.equalsIgnoreCase("msg")) {

						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

								if (file.getName().equals(files[i].getPath().replace(parent + File.separator, "")
										.replace(File.separator + files[i].getName(), ""))) {
									filepath = files[i].getAbsolutePath();
									ConvertEml_MSG_EMLX_pst();

								}
								filepath = files[i].getAbsolutePath();
								ConvertEml_MSG_EMLX_pst();

							}
						}
					}
				}

			} else {

				listduplicacy.clear();
				info = pst.getRootFolder().addSubFolder(files[i].getPath().replace(parent, ""), true);
				foldername2 = files[i].getPath().replace(parent, "");
				long democount1 = 0;
				Converteml_emlx_msg_folder_PSTOST(files[i], democount1);
			}

		}

	}

	void Convertmaildir_folder_PSTOST(File filearray, long democount) throws Exception {

		File[] files = filearray.listFiles();

		for (int i = 0; i < files.length; i++) {

			if (files[i].isFile()) {

				if (info == null) {
					info = pst.getRootFolder();
				}
				if (demo) {
					if (democount >= All_Data.demo_count) {
						continue;
					}
				}
				democount++;
				String extension = getFileExtension(files[i]);
				if (fileoptionm.equalsIgnoreCase("EML File (.eml)")) {
					if (extension.equals("eml")) {

						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

								filepath = files[i].getAbsolutePath();
								ConvertEml_MSG_EMLX_pst();

							}
						}
					}
				} else if (fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")) {
					if (extension.equalsIgnoreCase("emlx")) {

						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

								filepath = files[i].getAbsolutePath();
								ConvertEml_MSG_EMLX_pst();

							}
						}
					}
				} else if (fileoptionm.equalsIgnoreCase("Maildir")) {

					for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//						if (stop) {
//							break;
//						}
						if (stop) {
							break;
						}
						if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

							filepath = files[i].getAbsolutePath();
							ConvertEml_MSG_EMLX_pst();

						}

					}
				} else if (fileoptionm.equalsIgnoreCase("Message File (.msg)")) {
					if (extension.equalsIgnoreCase("msg")) {

						for (Map.Entry<String, List<String>> entry : hm.entrySet()) {
//							if (stop) {
//								break;
//							}
							if (stop) {
								break;
							}
							if (entry.getKey().trim().equalsIgnoreCase(files[i].getAbsolutePath())) {

								if (file.getName().equals(files[i].getPath().replace(parent + File.separator, "")
										.replace(File.separator + files[i].getName(), ""))) {
									filepath = files[i].getAbsolutePath();
									ConvertEml_MSG_EMLX_pst();

								}
								filepath = files[i].getAbsolutePath();
								ConvertEml_MSG_EMLX_pst();

							}
						}
					}
				}

			} else {
				String filename = files[i].getName();
				filename = filename.replace(".", "");
				System.out.println();

				if (!(filename.equals("cur") || filename.equals("tmp") || filename.equals("new"))) {
					listduplicacy.clear();

					if (filename.equalsIgnoreCase("inbox")) {
						info = pst.createPredefinedFolder(filename, StandardIpmFolder.Inbox, true);

					} else if (filename.equalsIgnoreCase("Junk")) {
						info = pst.createPredefinedFolder(filename, StandardIpmFolder.JunkEmail, true);
					} else if (filename.contains("Sent") || filename.contains("sent")) {
						info = pst.createPredefinedFolder(filename, StandardIpmFolder.SentItems, true);
					} else if (filename.equalsIgnoreCase("Draft")) {
						info = pst.createPredefinedFolder(filename, StandardIpmFolder.Drafts, true);
					} else if (filename.equalsIgnoreCase("Trash")) {
						info = pst.getPredefinedFolder(StandardIpmFolder.DeletedItems);
					} else if (filename.equalsIgnoreCase("spam")) {
						info = pst.getRootFolder().addSubFolder(filename);
					} else if (filename.equalsIgnoreCase("archive")) {
						info = pst.getRootFolder().addSubFolder(filename);
					} else {

						info = pst.getRootFolder().addSubFolder(files[i].getPath().replace(parent, "")
								.replace(fname, "").replace("cur", "").replace("tmp", "").replace("new", ""), true);
					}
				} else if (files[i].getAbsolutePath().replace(parent, "").equals(fname + File.separator + "cur")
						|| files[i].getAbsolutePath().replace(parent, "").equals(fname + File.separator + "tmp")
						|| files[i].getAbsolutePath().replace(parent, "").equals(fname + File.separator + "new")) {

					info = pst.getRootFolder();
				}
				foldername2 = files[i].getPath().replace(parent, "").replace("fname", "");
				long democount1 = 0;
				Convertmaildir_folder_PSTOST(files[i], democount1);
			}

		}

	}

	public void Mapimessage_file(MapiMessage message) {
		String subname = getRidOfIllegalFileNameCharacters(mf.namingconventionmapi(message));
		try {
			File fu = null;
			if (filetype.equalsIgnoreCase("EML")) {
				try {

					fu = new File(destination_path + File.separator + path + File.separator + subname + ".eml");
					if (fu.isFile()) {

						message.save(destination_path + File.separator + path + File.separator + subname
								+ count_destination + ".eml", SaveOptions.getDefaultEml());
					} else {
						message.save(destination_path + File.separator + path + File.separator + subname + ".eml",
								SaveOptions.getDefaultEml());

					}
				} catch (Error e) {
					mf.logger.warning("ERROR : " + e.getMessage() + "Message" + " " + message.getDeliveryTime()
							+ System.lineSeparator());
				}

				catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + "Message" + " " + message.getDeliveryTime()
							+ System.lineSeparator());
					message.save(
							destination_path + File.separator + path + File.separator + +count_destination + ".eml",
							SaveOptions.getDefaultEml());
				}
			} else if (filetype.equalsIgnoreCase("HTML")) {

				try {

					fu = new File(destination_path + File.separator + path + File.separator + subname + ".html");
					if (fu.isFile()) {

						message.save(destination_path + File.separator + path + File.separator + subname
								+ count_destination + ".html", SaveOptions.getDefaultHtml());
					} else {
						message.save(destination_path + File.separator + path + File.separator + subname + ".html",
								SaveOptions.getDefaultHtml());

					}

					new File(destination_path + File.separator + path + File.separator + "Attachment").mkdirs();

					for (int j = 0; j < message.getAttachments().size(); j++) {
						MapiAttachment att = message.getAttachments().get_Item(j);

						String s = getFileExtension(att.getDisplayName());
						String attFileName = getRidOfIllegalFileNameCharacters(
								att.getDisplayName().replace("." + s, ""));

						att.save(destination_path + File.separator + path + File.separator + "Attachment"
								+ File.separator + attFileName);

					}

				} catch (Error e) {
					mf.logger.warning("ERROR : " + e.getMessage() + "Message" + " " + message.getDeliveryTime()
							+ System.lineSeparator());
				}

				catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + "Message" + " " + message.getDeliveryTime()
							+ System.lineSeparator());
					message.save(
							destination_path + File.separator + path + File.separator + +count_destination + ".html",
							SaveOptions.getDefaultHtml());
				}

			} else if (filetype.equalsIgnoreCase("MSG")) {

				try {
					fu = new File(destination_path + File.separator + path + File.separator + subname + ".msg");
					if (fu.isFile()) {
						message.save(destination_path + File.separator + path + File.separator + subname
								+ count_destination + ".msg", SaveOptions.getDefaultMsg());

					} else {

						message.save(destination_path + File.separator + path + File.separator + subname + ".msg",
								SaveOptions.getDefaultMsg());
					}
				} catch (Error e) {
					mf.logger.warning("ERROR : " + e.getMessage() + "Message" + " " + message.getDeliveryTime()
							+ System.lineSeparator());
				}

				catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + "Message" + " " + message.getDeliveryTime()
							+ System.lineSeparator());
					message.save(
							destination_path + File.separator + path + File.separator + +count_destination + ".msg",
							SaveOptions.getDefaultMsg());
				}

			} else if (filetype.equalsIgnoreCase("EMLX")) {
				MailMessageSaveType messagesavetype = MailMessageSaveType.getEmlxFormat();
				try {

					fu = new File(destination_path + File.separator + path + File.separator + subname + ".emlx");
					if (fu.isFile()) {

						message.save(destination_path + File.separator + path + File.separator + subname
								+ count_destination + ".emlx", SaveOptions.createSaveOptions(messagesavetype));
					} else {
						message.save(destination_path + File.separator + path + File.separator + subname + ".emlx",
								SaveOptions.createSaveOptions(messagesavetype));

					}
				} catch (Error e) {
					mf.logger.warning("ERROR : " + e.getMessage() + "Message" + " " + message.getDeliveryTime()
							+ System.lineSeparator());
				}

				catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + "Message" + " " + message.getDeliveryTime()
							+ System.lineSeparator());
					message.save(destination_path + File.separator + path + File.separator + subname + ".emlx",
							SaveOptions.createSaveOptions(messagesavetype));
				}
			} else if (filetype.equalsIgnoreCase("MHTML")) {

				try {
					fu = new File(destination_path + File.separator + path + File.separator + subname + ".mhtml");
					if (fu.isFile()) {
						message.save(destination_path + File.separator + path + File.separator + subname
								+ count_destination + ".mhtml", SaveOptions.getDefaultMhtml());

					} else {

						message.save(destination_path + File.separator + path + File.separator + subname + ".mhtml",
								SaveOptions.getDefaultMhtml());
					}
				} catch (Error e) {
					mf.logger.warning("ERROR : " + e.getMessage() + "Message" + " " + message.getDeliveryTime()
							+ System.lineSeparator());
				}

				catch (Exception e) {
					mf.logger.warning("Exception : " + e.getMessage() + "Message" + " " + message.getDeliveryTime()
							+ System.lineSeparator());
					message.save(
							destination_path + File.separator + path + File.separator + +count_destination + ".mhtml",
							SaveOptions.getDefaultMhtml());
				}

			}
			fu = null;

			count_destination++;

		} catch (Exception e) {

		}
	}

	public void Mapimess_CSV(MapiMessage message, CSVWriter writer) {

		String subname = getRidOfIllegalFileNameCharacters(mf.namingconventionmapi(message));
		if (message.getMessageClass().equals("IPM.Contact")) {
			String Email1addresstype = null;
			String Email1displayname = null;
			String Email1address = null;
			String Email1fax = null;
			String Email2addresstype = null;
			String Email2displayname = null;
			String Email2address = null;
			String Email2fax = null;
			String Email3addresstype = null;
			String Email3displayname = null;
			String Email3address = null;
			String Email3fax = null;
			String homefaxaddresstype = null;
			String homefaxdisplayname = null;
			String homefaxaddress = null;
			String homefaxno = null;

			String primaryfaxdisplayname = null;
			String primaryfaxaddress = null;
			String primaryfaxno = null;
			String primaryfaxaddresstype = null;
			String bussinessfaxaddresstype = null;
			String bussinessfaxaddress = null;
			String bussinessfaxno = null;
			String bussinessfaxdisplayname = null;
			String birthday = null;
			String WeddingAnniversary = null;
			String firstName = null;
			String middleName = null;
			String lastname = null;
			String prefix = null;
			String fileunder = null;
			String fileunderid = null;
			String generation = null;
			String title = null;
			String account = null;
			String BusinessHomePage = null;
			String ComputerNetworkName = null;
			String CustomerId = null;
			String FreeBusyLocation = null;
			String FtpSite = null;
			String Gender = null;
			String GovernmentIdNumber = null;
			String Hobbies = null;
			String Html = null;
			String InstantMessagingAddress = null;
			String Language = null;
			String Location = null;
			String Notes = null;
			String OrganizationalIdNumber = null;
			String PersonalHomePage = null;
			String ReferredByName = null;
			String SpouseName = null;
			String homeAddress = null;
			String homeCity = null;
			String homeCountry = null;
			String homeCountryCode = null;
			String homePostalCode = null;
			String homegetPostOfficeBox = null;
			String homeStateOrProvince = null;
			String homegetStreet = null;
			String otherAddress = null;
			String otherCity = null;
			String otherCountry = null;
			String otherCountryCode = null;
			String otherPostalCode = null;
			String othergetPostOfficeBox = null;
			String otherStateOrProvince = null;
			String othergetStreet = null;
			String workAddress = null;
			String workCity = null;
			String workCountry = null;
			String workCountryCode = null;
			String workPostalCode = null;
			String workgetPostOfficeBox = null;
			String workStateOrProvince = null;
			String workgetStreet = null;
			String Assistant = null;
			String CompanyName = null;
			String DepartmentName = null;
			String ManagerName = null;
			String OfficeLocation = null;
			String Profession = null;
			String getTitle = null;
			String AssistantTelephoneNumber = null;
			String Business2TelephoneNumber = null;
			String BusinessTelephoneNumber = null;
			String CallbackTelephoneNumber = null;
			String CarTelephoneNumber = null;
			String CompanyMainTelephoneNumber = null;
			String Home2TelephoneNumber = null;
			String HomeTelephoneNumber = null;
			String IsdnNumber = null;
			String MobileTelephoneNumber = null;
			String OtherTelephoneNumber = null;
			String PagerTelephoneNumber = null;
			String PrimaryTelephoneNumber = null;
			String RadioTelephoneNumber = null;
			String TelexNumber = null;
			String TtyTddPhoneNumber = null;

			MapiContact con = (MapiContact) message.toMapiMessageItem();
			MapiContactProfessionalPropertySet ProfPropSet = null;
			try {
				ProfPropSet = con.getProfessionalInfo();
			} catch (Exception e) {

			}
			MapiContactElectronicAddress email1 = null;
			try {
				email1 = con.getElectronicAddresses().getEmail1();
			} catch (Exception e) {

			}
			MapiContactElectronicAddress email2 = null;
			try {
				email2 = con.getElectronicAddresses().getEmail2();
			} catch (Exception e) {

			}
			MapiContactElectronicAddress email3 = null;
			try {
				email3 = con.getElectronicAddresses().getEmail3();
			} catch (Exception e) {

			}
			MapiContactElectronicAddress homefax = null;
			try {
				homefax = con.getElectronicAddresses().getHomeFax();
			} catch (Exception e) {

			}
			MapiContactElectronicAddress primaryfax = null;
			try {
				primaryfax = con.getElectronicAddresses().getPrimaryFax();
			} catch (Exception e) {

			}
			MapiContactElectronicAddress bussinessfax = null;
			try {
				bussinessfax = con.getElectronicAddresses().getBusinessFax();
			} catch (Exception e) {

			}
			MapiContactEventPropertySet event = null;
			try {
				event = con.getEvents();
			} catch (Exception e) {

			}
			MapiContactPersonalInfoPropertySet personfPropSet = null;
			try {
				personfPropSet = con.getPersonalInfo();
			} catch (Exception e) {

			}
			MapiContactProfessionalPropertySet personPropSet = null;
			try {
				personPropSet = con.getProfessionalInfo();
			} catch (Exception e) {

			}
			MapiContactPhysicalAddressPropertySet mapipcs = null;
			try {
				mapipcs = con.getPhysicalAddresses();
			} catch (Exception e) {

			}
			MapiContactTelephonePropertySet mapitelephone = null;
			try {
				mapitelephone = con.getTelephones();
			} catch (Exception e) {

			}
			MapiContactPhysicalAddress contacthomephys = null;
			try {
				contacthomephys = mapipcs.getHomeAddress();
			} catch (Exception e) {

			}
			MapiContactPhysicalAddress contactotherphys = null;
			try {
				contactotherphys = mapipcs.getOtherAddress();
			} catch (Exception e) {

			}
			MapiContactPhysicalAddress contactworkphys = null;
			try {
				contactworkphys = mapipcs.getWorkAddress();
			} catch (Exception e) {

			}
			MapiContactNamePropertySet NamePropSet = null;
			try {
				NamePropSet = con.getNameInfo();
			} catch (Exception e) {

			}
			try {

				title = ProfPropSet.getTitle();
			} catch (Exception ep) {
				title = "";
			}

			try {
				if (title.equalsIgnoreCase("null") || title.contains("meta") || title.contains("aspose")) {
					title = "NA";
				}
			} catch (Exception e1) {
				title = "NA";
			}

			try {

				firstName = NamePropSet.getGivenName();
			} catch (Exception ep) {
				firstName = "";
			}
			try {
				if (firstName.equalsIgnoreCase("null") || firstName.contains("meta") || firstName.contains("aspose")) {
					firstName = "NA";
				}
			} catch (Exception e1) {
				firstName = "NA";
			}

			try {

				middleName = NamePropSet.getMiddleName();
			} catch (Exception ep) {
				middleName = "";
			}
			try {
				if (middleName.equalsIgnoreCase("null") || middleName.contains("meta")
						|| middleName.contains("aspose")) {
					middleName = "NA";
				}
			} catch (Exception e1) {
				middleName = "NA";
			}
			try {

				lastname = NamePropSet.getSurname();
			} catch (Exception ep) {
				lastname = "";
			}
			try {
				if (lastname.equalsIgnoreCase("null") || lastname.contains("meta") || lastname.contains("aspose")) {
					lastname = "NA";
				}
			} catch (Exception e1) {
				lastname = "NA";
			}
			try {

				Email1addresstype = email1.getAddressType();
			} catch (Exception ep) {
				Email1addresstype = "";
			}
			try {
				if (Email1addresstype.equalsIgnoreCase("null") || Email1addresstype.contains("meta")
						|| Email1addresstype.contains("aspose")) {
					Email1addresstype = "NA";
				}
			} catch (Exception e1) {
				Email1addresstype = "";
			}
			try {

				Email1displayname = email1.getDisplayName();
			} catch (Exception ep) {
				Email1displayname = "";
			}
			try {
				if (Email1displayname.equalsIgnoreCase("null") || Email1displayname.contains("meta")
						|| Email1displayname.contains("aspose")) {
					Email1displayname = "NA";
				}
			} catch (Exception e1) {
				Email1displayname = "";
			}
			try {

				Email1address = email1.getEmailAddress();
			} catch (Exception ep) {
				Email1address = "";
			}
			try {
				if (Email1address.equalsIgnoreCase("null") || Email1address.contains("meta")
						|| Email1address.contains("aspose")) {

				}
			} catch (Exception e1) {
				Email1address = "NA";
			}
			try {

				Email1fax = email1.getFaxNumber();
			} catch (Exception ep) {
				Email1fax = "";
			}
			try {
				if (Email1fax.equalsIgnoreCase("null") || Email1fax.contains("meta") || Email1fax.contains("aspose")) {
					Email1fax = "NA";
				}
			} catch (Exception e1) {
				Email1fax = "NA";
			}
			try {

				Email2addresstype = email2.getAddressType();
			} catch (Exception ep) {
				Email2addresstype = "";
			}
			try {
				if (Email2addresstype.equalsIgnoreCase("null") || Email2addresstype.contains("meta")
						|| Email2addresstype.contains("aspose")) {
					Email2addresstype = "NA";
				}
			} catch (Exception e1) {
				Email2addresstype = "NA";
			}
			try {

				Email2displayname = email2.getDisplayName();
			} catch (Exception ep) {
				Email2displayname = "";
			}
			try {
				if (Email2displayname.equalsIgnoreCase("null") || Email2displayname.contains("meta")
						|| Email2displayname.contains("aspose")) {
					Email2displayname = "NA";
				}
			} catch (Exception e1) {
				Email2displayname = "NA";
			}
			try {

				Email2address = email2.getEmailAddress();
			} catch (Exception ep) {
				Email1address = "";
			}
			try {
				if (Email1address.equalsIgnoreCase("null") || Email1address.contains("meta")
						|| Email1address.contains("aspose")) {
					Email1address = "NA";
				}
			} catch (Exception e1) {
				Email1address = "NA";
			}
			try {

				Email2fax = email2.getFaxNumber();
			} catch (Exception ep) {
				Email2fax = "";
			}
			try {
				if (Email2fax.equalsIgnoreCase("null") || Email2fax.contains("meta") || Email2fax.contains("aspose")) {
					Email2fax = "NA";
				}
			} catch (Exception e1) {
				Email2fax = "NA";
			}
			try {

				Email3addresstype = email3.getAddressType();
			} catch (Exception ep) {
				Email3addresstype = "";
			}
			try {
				if (Email3addresstype.equalsIgnoreCase("null") || Email3addresstype.contains("meta")
						|| Email3addresstype.contains("aspose")) {
					Email3addresstype = "NA";
				}
			} catch (Exception e1) {
				Email3addresstype = "NA";
			}
			try {

				Email3displayname = email3.getDisplayName();
			} catch (Exception ep) {
				Email3displayname = "";
			}
			try {
				if (Email3displayname.equalsIgnoreCase("null") || Email3displayname.contains("meta")
						|| Email3displayname.contains("aspose")) {
					Email3displayname = "NA";
				}
			} catch (Exception e1) {
				Email3displayname = "NA";
			}
			try {

				Email3address = email3.getEmailAddress();
			} catch (Exception ep) {
				Email3address = "";
			}
			try {
				if (Email3address.equalsIgnoreCase("null") || Email3address.contains("meta")
						|| Email3address.contains("aspose")) {
					Email3address = "NA";
				}
			} catch (Exception e1) {
				Email3address = "NA";
			}
			try {

				Email3fax = email3.getFaxNumber();
			} catch (Exception ep) {
				Email3fax = "";
			}
			try {
				if (Email3fax.equalsIgnoreCase("null") || Email3fax.contains("meta") || Email3fax.contains("aspose")) {
					Email3fax = "NA";
				}
			} catch (Exception e1) {
				Email3fax = "NA";
			}
			try {

				homefaxaddresstype = homefax.getAddressType();
			} catch (Exception ep) {
				homefaxaddresstype = "";
			}
			try {
				if (homefaxaddresstype.equalsIgnoreCase("null") || homefaxaddresstype.contains("meta")
						|| homefaxaddresstype.contains("aspose")) {
					homefaxaddresstype = "NA";
				}
			} catch (Exception e1) {
				homefaxaddresstype = "NA";
			}
			try {

				homefaxdisplayname = homefax.getDisplayName();
			} catch (Exception ep) {
				homefaxdisplayname = "";
			}
			try {
				if (homefaxdisplayname.equalsIgnoreCase("null") || homefaxdisplayname.contains("meta")
						|| homefaxdisplayname.contains("aspose")) {
					homefaxdisplayname = "NA";
				}
			} catch (Exception e1) {
				homefaxdisplayname = "NA";
			}
			try {

				homefaxaddress = homefax.getEmailAddress();
			} catch (Exception ep) {
				homefaxaddress = "";
			}
			try {
				if (homefaxaddress.equalsIgnoreCase("null") || homefaxaddress.contains("meta")
						|| homefaxaddress.contains("aspose")) {
					homefaxaddress = "NA";
				}
			} catch (Exception e1) {
				homefaxaddress = "NA";
			}
			try {

				homefaxno = homefax.getFaxNumber();
			} catch (Exception ep) {
				homefaxno = "";
			}
			try {
				if (homefaxno.equalsIgnoreCase("null") || homefaxno.contains("meta") || homefaxno.contains("aspose")) {
					homefaxno = "NA";
				}
			} catch (Exception e1) {
				homefaxno = "NA";
			}
			try {

				primaryfaxaddresstype = primaryfax.getAddressType();
			} catch (Exception ep) {
				primaryfaxaddresstype = "";
			}
			try {
				if (primaryfaxaddresstype.equalsIgnoreCase("null") || primaryfaxaddresstype.contains("meta")
						|| primaryfaxaddresstype.contains("aspose")) {
					primaryfaxaddresstype = "NA";
				}
			} catch (Exception e1) {
				primaryfaxaddresstype = "NA";
			}
			try {

				primaryfaxdisplayname = primaryfax.getDisplayName();
			} catch (Exception ep) {
				primaryfaxdisplayname = "";
			}
			try {
				if (primaryfaxdisplayname.equalsIgnoreCase("null") || primaryfaxdisplayname.contains("meta")
						|| primaryfaxdisplayname.contains("aspose")) {
					primaryfaxdisplayname = "NA";
				}
			} catch (Exception e1) {
				primaryfaxdisplayname = "NA";
			}
			try {

				primaryfaxaddress = primaryfax.getEmailAddress();
			} catch (Exception ep) {
				primaryfaxaddress = "";
			}
			try {
				if (primaryfaxaddress.equalsIgnoreCase("null") || primaryfaxaddress.contains("meta")
						|| primaryfaxaddress.contains("aspose")) {
					primaryfaxaddress = "NA";
				}
			} catch (Exception e1) {
				primaryfaxaddress = "NA";
			}
			try {

				primaryfaxno = primaryfax.getFaxNumber();
			} catch (Exception ep) {
				primaryfaxno = "";
			}
			try {
				if (primaryfaxno.equalsIgnoreCase("null") || primaryfaxno.contains("meta")
						|| primaryfaxno.contains("aspose")) {
					primaryfaxno = "NA";
				}
			} catch (Exception e1) {
				primaryfaxno = "NA";
			}
			try {

				bussinessfaxaddresstype = bussinessfax.getAddressType();
			} catch (Exception ep) {
				bussinessfaxaddresstype = "";
			}
			try {
				if (bussinessfaxaddresstype.equalsIgnoreCase("null") || bussinessfaxaddresstype.contains("meta")
						|| bussinessfaxaddresstype.contains("aspose")) {
					bussinessfaxaddresstype = "NA";
				}
			} catch (Exception e1) {
				bussinessfaxaddresstype = "NA";
			}
			try {

				bussinessfaxdisplayname = bussinessfax.getDisplayName();
			} catch (Exception ep) {
				bussinessfaxdisplayname = "";
			}
			try {
				if (bussinessfaxdisplayname.equalsIgnoreCase("null") || bussinessfaxdisplayname.contains("meta")
						|| bussinessfaxdisplayname.contains("aspose")) {
					bussinessfaxdisplayname = "NA";
				}
			} catch (Exception e1) {
				bussinessfaxdisplayname = "NA";
			}
			try {

				bussinessfaxaddress = bussinessfax.getEmailAddress();
			} catch (Exception ep) {
				bussinessfaxaddress = "";
			}
			try {
				if (bussinessfaxaddress.equalsIgnoreCase("null") || bussinessfaxaddress.contains("meta")
						|| bussinessfaxaddress.contains("aspose")) {
					bussinessfaxaddress = "NA";
				}
			} catch (Exception e1) {
				bussinessfaxaddress = "NA";
			}
			try {

				bussinessfaxno = bussinessfax.getFaxNumber();
			} catch (Exception ep) {
				bussinessfaxno = "";
			}
			try {
				if (bussinessfaxno.equalsIgnoreCase("null") || bussinessfaxno.contains("meta")
						|| bussinessfaxno.contains("aspose")) {
					bussinessfaxno = "NA";
				}
			} catch (Exception e1) {
				bussinessfaxno = "NA";
			}
			try {

				birthday = String.valueOf(event.getBirthday());
			} catch (Exception ep) {
				birthday = "";
			}
			try {
				if (birthday.equalsIgnoreCase("null") || birthday.contains("meta") || birthday.contains("aspose")) {
					birthday = "NA";
				}
			} catch (Exception e1) {
				birthday = "NA";
			}
			try {

				WeddingAnniversary = String.valueOf(event.getWeddingAnniversary());
			} catch (Exception ep) {
				WeddingAnniversary = "";
			}
			try {
				if (WeddingAnniversary.equalsIgnoreCase("null") || WeddingAnniversary.contains("meta")
						|| WeddingAnniversary.contains("aspose")) {
					WeddingAnniversary = "NA";
				}
			} catch (Exception e1) {
				WeddingAnniversary = "NA";
			}
			try {

				Email1addresstype = email1.getAddressType();
			} catch (Exception ep) {
				Email1addresstype = "";
			}
			try {
				if (Email1addresstype.equalsIgnoreCase("null") || Email1addresstype.contains("meta")
						|| firstName.contains("aspose")) {
					Email1addresstype = "NA";
				}
			} catch (Exception e1) {
				Email1addresstype = "NA";
			}
			try {

				prefix = NamePropSet.getDisplayNamePrefix();
			} catch (Exception ep) {
				prefix = "";
			}
			try {
				if (prefix.equalsIgnoreCase("null") || prefix.contains("meta") || prefix.contains("aspose")) {
					prefix = "NA";
				}
			} catch (Exception e1) {
				prefix = "NA";
			}

			try {

				fileunder = NamePropSet.getFileUnder();
			} catch (Exception ep) {
				fileunder = "";
			}
			try {
				if (fileunder.equalsIgnoreCase("null") || fileunder.contains("meta") || fileunder.contains("aspose")) {
					fileunder = "NA";
				}
			} catch (Exception e1) {
				fileunder = "NA";
			}
			try {

				fileunderid = String.valueOf(NamePropSet.getFileUnderID());
			} catch (Exception ep) {
				fileunderid = "";
			}
			try {
				if (fileunderid.equalsIgnoreCase("null") || fileunderid.contains("meta")
						|| fileunderid.contains("aspose")) {
					fileunderid = "NA";
				}
			} catch (Exception e1) {
				fileunderid = "NA";
			}
			try {

				generation = String.valueOf(NamePropSet.getGeneration());
			} catch (Exception ep) {
				generation = "";
			}
			try {
				if (generation.equalsIgnoreCase("null") || generation.contains("meta")
						|| generation.contains("aspose")) {
					generation = "NA";
				}
			} catch (Exception e1) {
				generation = "NA";
			}
			try {

				account = String.valueOf(personfPropSet.getAccount());
			} catch (Exception ep) {
				account = "";
			}
			try {
				if (account.equalsIgnoreCase("null") || account.contains("meta") || account.contains("aspose")) {
					account = "NA";
				}
			} catch (Exception e1) {
				account = "NA";
			}
			try {

				BusinessHomePage = String.valueOf(personfPropSet.getBusinessHomePage());
			} catch (Exception ep) {
				BusinessHomePage = "";
			}
			try {
				if (BusinessHomePage.equalsIgnoreCase("null") || BusinessHomePage.contains("meta")
						|| BusinessHomePage.contains("aspose")) {
					BusinessHomePage = "NA";
				}
			} catch (Exception e1) {
				BusinessHomePage = "NA";
			}
			try {

				ComputerNetworkName = String.valueOf(personfPropSet.getComputerNetworkName());
			} catch (Exception ep) {
				ComputerNetworkName = "";
			}
			try {
				if (ComputerNetworkName.equalsIgnoreCase("null") || ComputerNetworkName.contains("meta")
						|| ComputerNetworkName.contains("aspose")) {
					ComputerNetworkName = "NA";
				}
			} catch (Exception e1) {
				ComputerNetworkName = "NA";
			}
			try {

				CustomerId = String.valueOf(personfPropSet.getCustomerId());
			} catch (Exception ep) {
				CustomerId = "";
			}
			try {
				if (CustomerId.equalsIgnoreCase("null") || CustomerId.contains("meta")
						|| CustomerId.contains("aspose")) {
					CustomerId = "NA";
				}
			} catch (Exception e1) {
				CustomerId = "NA";
			}
			try {

				FreeBusyLocation = String.valueOf(personfPropSet.getFreeBusyLocation());
			} catch (Exception ep) {
				FreeBusyLocation = "";
			}
			try {
				if (FreeBusyLocation.equalsIgnoreCase("null") || FreeBusyLocation.contains("meta")
						|| FreeBusyLocation.contains("aspose")) {
					FreeBusyLocation = "NA";
				}
			} catch (Exception e1) {
				FreeBusyLocation = "NA";
			}
			try {

				FtpSite = String.valueOf(personfPropSet.getFtpSite());
			} catch (Exception ep) {
				FtpSite = "";
			}
			try {
				if (FtpSite.equalsIgnoreCase("null") || FtpSite.contains("meta") || FtpSite.contains("aspose")) {
					FtpSite = "NA";
				}
			} catch (Exception e1) {
				FtpSite = "NA";
			}
			try {
				int i = personfPropSet.getGender();
				if (i == 0) {
					Gender = "Unspecified";
				} else if (i == 1) {
					Gender = "Female";
				} else if (i == 2) {
					Gender = "Male";
				}

			} catch (Exception ep) {
				Gender = "";
			}

			try {

				GovernmentIdNumber = String.valueOf(personfPropSet.getGovernmentIdNumber());
			} catch (Exception ep) {
				GovernmentIdNumber = "";
			}
			try {
				if (GovernmentIdNumber.equalsIgnoreCase("null") || GovernmentIdNumber.contains("meta")
						|| GovernmentIdNumber.contains("aspose")) {
					GovernmentIdNumber = "NA";
				}
			} catch (Exception e1) {
				GovernmentIdNumber = "NA";
			}
			try {

				Hobbies = String.valueOf(personfPropSet.getHobbies());
			} catch (Exception ep) {
				Hobbies = "";
			}
			try {
				if (Hobbies.equalsIgnoreCase("null") || Hobbies.contains("meta") || Hobbies.contains("aspose")) {
					Hobbies = "NA";
				}
			} catch (Exception e1) {
				Hobbies = "NA";
			}
			try {

				Html = String.valueOf(personfPropSet.getHtml());
			} catch (Exception ep) {
				Html = "";
			}
			try {
				if (Html.equalsIgnoreCase("null") || Html.contains("aspose")) {
					Html = "NA";
				}
			} catch (Exception e1) {
				Html = "NA";
			}
			try {

				InstantMessagingAddress = String.valueOf(personfPropSet.getInstantMessagingAddress());
			} catch (Exception ep) {
				InstantMessagingAddress = "";
			}
			try {
				if (InstantMessagingAddress.equalsIgnoreCase("null") || InstantMessagingAddress.contains("meta")
						|| InstantMessagingAddress.contains("aspose")) {
					InstantMessagingAddress = "NA";
				}
			} catch (Exception e1) {
				InstantMessagingAddress = "NA";
			}

			try {

				Language = String.valueOf(personfPropSet.getLanguage());
			} catch (Exception ep) {
				Language = "";
			}
			try {
				if (Language.equalsIgnoreCase("null") || Language.contains("meta") || Language.contains("aspose")) {
					Language = "NA";
				}
			} catch (Exception e1) {
				Language = "NA";
			}
			try {

				Location = String.valueOf(personfPropSet.getLocation());
			} catch (Exception ep) {
				Location = "";
			}
			try {
				if (Location.equalsIgnoreCase("null") || Location.contains("meta") || Location.contains("aspose")) {
					Location = "NA";
				}
			} catch (Exception e1) {
				Location = "NA";
			}
			try {

				Notes = String.valueOf(personfPropSet.getNotes());
			} catch (Exception ep) {
				Notes = "";
			}
			try {
				if (Notes.equalsIgnoreCase("null") || Notes.contains("meta") || Notes.contains("aspose")) {
					Notes = "NA";
				}
			} catch (Exception e1) {
				Notes = "NA";
			}
			try {

				OrganizationalIdNumber = String.valueOf(personfPropSet.getOrganizationalIdNumber());
			} catch (Exception ep) {
				OrganizationalIdNumber = "";
			}
			try {
				if (OrganizationalIdNumber.equalsIgnoreCase("null") || OrganizationalIdNumber.contains("meta")
						|| OrganizationalIdNumber.contains("aspose")) {
					OrganizationalIdNumber = "NA";
				}
			} catch (Exception e1) {
				OrganizationalIdNumber = "NA";
			}
			try {

				PersonalHomePage = String.valueOf(personfPropSet.getPersonalHomePage());
			} catch (Exception ep) {
				PersonalHomePage = "";
			}
			try {
				if (PersonalHomePage.equalsIgnoreCase("null") || PersonalHomePage.contains("meta")
						|| PersonalHomePage.contains("aspose")) {
					PersonalHomePage = "NA";
				}
			} catch (Exception e1) {
				PersonalHomePage = "NA";
			}
			try {

				ReferredByName = String.valueOf(personfPropSet.getReferredByName());
			} catch (Exception ep) {
				ReferredByName = "";
			}
			try {
				if (ReferredByName.equalsIgnoreCase("null") || ReferredByName.contains("meta")
						|| ReferredByName.contains("aspose")) {
					ReferredByName = "NA";
				}
			} catch (Exception e1) {
				ReferredByName = "NA";
			}
			try {

				SpouseName = String.valueOf(personfPropSet.getSpouseName());
			} catch (Exception ep) {
				SpouseName = "";
			}
			try {
				if (SpouseName.equalsIgnoreCase("null") || SpouseName.contains("meta")
						|| SpouseName.contains("aspose")) {
					SpouseName = "NA";
				}
			} catch (Exception e1) {
				SpouseName = "NA";
			}

			try {

				homegetStreet = String.valueOf(contacthomephys.getStreet());
			} catch (Exception ep) {
				homegetStreet = "";
			}
			try {
				if (homegetStreet.equalsIgnoreCase("null") || homegetStreet.contains("meta")
						|| homegetStreet.contains("aspose")) {
					homegetStreet = "NA";
				}
			} catch (Exception e1) {
				homegetStreet = "NA";
			}
			try {

				homeAddress = String.valueOf(contacthomephys.getAddress());
			} catch (Exception ep) {
				homeAddress = "";
			}
			try {
				if (homeAddress.equalsIgnoreCase("null") || homeAddress.contains("meta")
						|| homeAddress.contains("aspose")) {
					homeAddress = "NA";
				}
			} catch (Exception e1) {
				homeAddress = "NA";
			}
			try {

				homeCity = String.valueOf(contacthomephys.getCity());
			} catch (Exception ep) {
				homeCity = "";
			}
			try {
				if (homeCity.equalsIgnoreCase("null") || homeCity.contains("meta") || homeCity.contains("aspose")) {
					homeCity = "NA";
				}
			} catch (Exception e1) {
				homeCity = "NA";
			}
			try {

				homeCountry = String.valueOf(contacthomephys.getCountry());
			} catch (Exception ep) {
				homeCountry = "";
			}
			try {
				if (homeCountry.equalsIgnoreCase("null") || homeCountry.contains("meta")
						|| homeCountry.contains("aspose")) {
					homeCountry = "NA";
				}
			} catch (Exception e1) {
				homeCountry = "NA";
			}
			try {

				homeCountryCode = String.valueOf(contacthomephys.getCountryCode());
			} catch (Exception ep) {
				homeCountryCode = "";
			}
			try {
				if (homeCountryCode.equalsIgnoreCase("null") || homeCountryCode.contains("meta")
						|| homeCountryCode.contains("aspose")) {
					homeCountryCode = "NA";
				}
			} catch (Exception e1) {
				homeCountryCode = "NA";
			}
			try {

				homePostalCode = String.valueOf(contacthomephys.getPostalCode());
			} catch (Exception ep) {
				homePostalCode = "";
			}
			try {
				if (homePostalCode.equalsIgnoreCase("null") || homePostalCode.contains("meta")
						|| homePostalCode.contains("aspose")) {
					homePostalCode = "NA";
				}
			} catch (Exception e1) {
				homePostalCode = "NA";
			}
			try {

				homegetPostOfficeBox = String.valueOf(contacthomephys.getPostOfficeBox());
			} catch (Exception ep) {
				homegetPostOfficeBox = "";
			}
			try {
				if (homegetPostOfficeBox.equalsIgnoreCase("null") || homegetPostOfficeBox.contains("meta")
						|| homegetPostOfficeBox.contains("aspose")) {
					homegetPostOfficeBox = "NA";
				}
			} catch (Exception e1) {
				homegetPostOfficeBox = "NA";
			}
			try {

				homeStateOrProvince = String.valueOf(contacthomephys.getStateOrProvince());
			} catch (Exception ep) {
				homeStateOrProvince = "";
			}
			try {
				if (homeStateOrProvince.equalsIgnoreCase("null") || homeStateOrProvince.contains("meta")
						|| homeStateOrProvince.contains("aspose")) {
					homeStateOrProvince = "NA";
				}
			} catch (Exception e1) {
				homeStateOrProvince = "NA";
			}
			try {

				othergetStreet = String.valueOf(contactotherphys.getStreet());
			} catch (Exception ep) {
				othergetStreet = "";
			}
			try {
				if (othergetStreet.equalsIgnoreCase("null") || othergetStreet.contains("meta")
						|| othergetStreet.contains("aspose")) {
					othergetStreet = "NA";
				}
			} catch (Exception e1) {
				othergetStreet = "NA";
			}
			try {

				otherAddress = String.valueOf(contactotherphys.getAddress());
			} catch (Exception ep) {
				otherAddress = "";
			}
			try {
				if (otherAddress.equalsIgnoreCase("null") || otherAddress.contains("meta")
						|| otherAddress.contains("aspose")) {
					otherAddress = "NA";
				}
			} catch (Exception e1) {
				otherAddress = "NA";
			}
			try {

				otherCity = String.valueOf(contactotherphys.getCity());
			} catch (Exception ep) {
				otherCity = "";
			}
			try {
				if (otherCity.equalsIgnoreCase("null") || otherCity.contains("meta") || otherCity.contains("aspose")) {
					otherCity = "NA";
				}
			} catch (Exception e1) {
				otherCity = "NA";
			}
			try {

				otherCountry = String.valueOf(contactotherphys.getCountry());
			} catch (Exception ep) {
				otherCountry = "";
			}
			try {
				if (otherCountry.equalsIgnoreCase("null") || otherCountry.contains("meta")
						|| otherCountry.contains("aspose")) {
					otherCountry = "NA";
				}
			} catch (Exception e1) {
				otherCountry = "NA";
			}
			try {

				otherCountryCode = String.valueOf(contactotherphys.getCountryCode());
			} catch (Exception ep) {
				otherCountryCode = "";
			}
			try {
				if (otherCountryCode.equalsIgnoreCase("null") || otherCountryCode.contains("meta")
						|| otherCountryCode.contains("aspose")) {
					otherCountryCode = "NA";
				}
			} catch (Exception e1) {
				otherCountryCode = "NA";
			}
			try {

				otherPostalCode = String.valueOf(contactotherphys.getPostalCode());
			} catch (Exception ep) {
				otherPostalCode = "";
			}
			try {
				if (otherPostalCode.equalsIgnoreCase("null") || otherPostalCode.contains("meta")
						|| otherPostalCode.contains("aspose")) {
					otherPostalCode = "NA";
				}
			} catch (Exception e1) {
				otherPostalCode = "NA";
			}
			try {

				othergetPostOfficeBox = String.valueOf(contactotherphys.getPostOfficeBox());
			} catch (Exception ep) {
				othergetPostOfficeBox = "";
			}
			try {
				if (othergetPostOfficeBox.equalsIgnoreCase("null") || othergetPostOfficeBox.contains("meta")
						|| othergetPostOfficeBox.contains("aspose")) {
					othergetPostOfficeBox = "NA";
				}
			} catch (Exception e1) {
				othergetPostOfficeBox = "NA";
			}
			try {

				otherStateOrProvince = String.valueOf(contactotherphys.getStateOrProvince());
			} catch (Exception ep) {
				otherStateOrProvince = "";
			}
			try {
				if (otherStateOrProvince.equalsIgnoreCase("null") || otherStateOrProvince.contains("meta")
						|| otherStateOrProvince.contains("aspose")) {
					otherStateOrProvince = "NA";
				}
			} catch (Exception e1) {
				otherStateOrProvince = "NA";
			}
			try {

				workgetStreet = String.valueOf(contactworkphys.getStreet());
			} catch (Exception ep) {
				workgetStreet = "";
			}
			try {
				if (workgetStreet.equalsIgnoreCase("null") || workgetStreet.contains("meta")
						|| workgetStreet.contains("aspose")) {
					workgetStreet = "NA";
				}
			} catch (Exception e1) {
				workgetStreet = "NA";
			}
			try {

				workAddress = String.valueOf(contactworkphys.getAddress());
			} catch (Exception ep) {
				workAddress = "";
			}
			try {
				if (workAddress.equalsIgnoreCase("null") || workAddress.contains("meta")
						|| workAddress.contains("aspose")) {
					workAddress = "NA";
				}
			} catch (Exception e1) {
				workAddress = "NA";
			}
			try {

				workCity = String.valueOf(contactworkphys.getCity());
			} catch (Exception ep) {
				workCity = "";
			}
			try {
				if (workCity.equalsIgnoreCase("null") || workCity.contains("meta") || workCity.contains("aspose")) {
					workCity = "NA";
				}
			} catch (Exception e1) {
				workCity = "NA";
			}

			try {

				workCountry = String.valueOf(contactworkphys.getCountry());
			} catch (Exception ep) {
				workCountry = "";
			}
			try {
				if (workCountry.equalsIgnoreCase("null") || workCountry.contains("meta")
						|| workCountry.contains("aspose")) {
					workCountry = "NA";
				}
			} catch (Exception e1) {
				workCountry = "NA";
			}
			try {

				workCountryCode = String.valueOf(contactworkphys.getCountryCode());
			} catch (Exception ep) {
				workCountryCode = "";
			}
			try {
				if (workCountryCode.equalsIgnoreCase("null") || workCountryCode.contains("meta")
						|| workCountryCode.contains("aspose")) {
					workCountryCode = "NA";
				}
			} catch (Exception e1) {
				workCountryCode = "NA";
			}
			try {

				workPostalCode = String.valueOf(contactworkphys.getPostalCode());
			} catch (Exception ep) {
				workPostalCode = "";
			}
			try {
				if (workPostalCode.equalsIgnoreCase("null") || workPostalCode.contains("meta")
						|| workPostalCode.contains("aspose")) {
					workPostalCode = "NA";
				}
			} catch (Exception e1) {
				workPostalCode = "NA";
			}
			try {

				workgetPostOfficeBox = String.valueOf(contactworkphys.getPostOfficeBox());
			} catch (Exception ep) {
				workgetPostOfficeBox = "";
			}
			try {
				if (workgetPostOfficeBox.equalsIgnoreCase("null") || workgetPostOfficeBox.contains("meta")
						|| workgetPostOfficeBox.contains("aspose")) {
					workgetPostOfficeBox = "NA";
				}
			} catch (Exception e1) {
				workgetPostOfficeBox = "NA";
			}
			try {

				workStateOrProvince = String.valueOf(contactworkphys.getStateOrProvince());
			} catch (Exception ep) {
				workStateOrProvince = "";
			}
			try {
				if (workStateOrProvince.equalsIgnoreCase("null") || workStateOrProvince.contains("meta")
						|| workStateOrProvince.contains("aspose")) {
					workStateOrProvince = "NA";
				}
			} catch (Exception e1) {
				workStateOrProvince = "NA";
			}
			try {

				Assistant = String.valueOf(personPropSet.getAssistant());
			} catch (Exception ep) {
				Assistant = "";
			}
			try {
				if (Assistant.equalsIgnoreCase("null") || Assistant.contains("meta") || Assistant.contains("aspose")) {
					Assistant = "NA";
				}
			} catch (Exception e1) {
				Assistant = "NA";
			}
			try {

				CompanyName = String.valueOf(personPropSet.getCompanyName());
			} catch (Exception ep) {
				CompanyName = "";
			}
			try {
				if (CompanyName.equalsIgnoreCase("null") || CompanyName.contains("meta")
						|| CompanyName.contains("aspose")) {
					CompanyName = "NA";
				}
			} catch (Exception e1) {
				CompanyName = "NA";
			}
			try {

				DepartmentName = String.valueOf(personPropSet.getDepartmentName());
			} catch (Exception ep) {
				DepartmentName = "";
			}
			try {
				if (DepartmentName.equalsIgnoreCase("null") || DepartmentName.contains("meta")
						|| DepartmentName.contains("aspose")) {
					DepartmentName = "NA";
				}
			} catch (Exception e1) {
				DepartmentName = "NA";
			}

			try {

				ManagerName = String.valueOf(personPropSet.getManagerName());
			} catch (Exception ep) {
				ManagerName = "";
			}
			try {
				if (ManagerName.equalsIgnoreCase("null") || ManagerName.contains("meta")
						|| ManagerName.contains("aspose")) {
					ManagerName = "NA";
				}
			} catch (Exception e1) {
				ManagerName = "NA";
			}
			try {

				OfficeLocation = String.valueOf(personPropSet.getOfficeLocation());
			} catch (Exception ep) {
				OfficeLocation = "";
			}
			try {
				if (OfficeLocation.equalsIgnoreCase("null") || OfficeLocation.contains("meta")
						|| OfficeLocation.contains("aspose")) {
					OfficeLocation = "NA";
				}
			} catch (Exception e1) {
				OfficeLocation = "NA";
			}
			try {

				Profession = String.valueOf(personPropSet.getProfession());
			} catch (Exception ep) {
				Profession = "";
			}
			try {
				if (Profession.equalsIgnoreCase("null") || Profession.contains("meta")
						|| Profession.contains("aspose")) {
					Profession = "NA";
				}
			} catch (Exception e1) {
				Profession = "";
			}
			try {

				getTitle = String.valueOf(personPropSet.getTitle());
			} catch (Exception ep) {
				getTitle = "";
			}
			try {
				if (getTitle.equalsIgnoreCase("null") || getTitle.contains("meta") || getTitle.contains("aspose")) {
					getTitle = "NA";
				}
			} catch (Exception e1) {
				getTitle = "NA";
			}
			try {

				AssistantTelephoneNumber = String.valueOf(mapitelephone.getAssistantTelephoneNumber());
			} catch (Exception ep) {
				AssistantTelephoneNumber = "";
			}
			try {
				if (AssistantTelephoneNumber.equalsIgnoreCase("null") || homeCountry.contains("meta")
						|| AssistantTelephoneNumber.contains("meta") || AssistantTelephoneNumber.contains("aspose")) {
					AssistantTelephoneNumber = "NA";
				}
			} catch (Exception e1) {
				AssistantTelephoneNumber = "NA";
			}
			try {

				AssistantTelephoneNumber = String.valueOf(mapitelephone.getAssistantTelephoneNumber());
			} catch (Exception ep) {
				AssistantTelephoneNumber = "";
			}
			try {
				if (AssistantTelephoneNumber.equalsIgnoreCase("null") || AssistantTelephoneNumber.contains("meta")
						|| AssistantTelephoneNumber.contains("aspose")) {
					AssistantTelephoneNumber = "NA";
				}
			} catch (Exception e1) {
				AssistantTelephoneNumber = "NA";
			}
			try {

				Business2TelephoneNumber = String.valueOf(mapitelephone.getBusiness2TelephoneNumber());
			} catch (Exception ep) {
				Business2TelephoneNumber = "";
			}
			try {
				if (Business2TelephoneNumber.equalsIgnoreCase("null") || Business2TelephoneNumber.contains("meta")
						|| Business2TelephoneNumber.contains("aspose")) {
					Business2TelephoneNumber = "NA";
				}
			} catch (Exception e1) {
				Business2TelephoneNumber = "NA";
			}
			try {

				BusinessTelephoneNumber = String.valueOf(mapitelephone.getBusinessTelephoneNumber());
			} catch (Exception ep) {
				BusinessTelephoneNumber = "";
			}
			try {
				if (BusinessTelephoneNumber.equalsIgnoreCase("null") || BusinessTelephoneNumber.contains("meta")
						|| BusinessTelephoneNumber.contains("aspose")) {
					BusinessTelephoneNumber = "NA";
				}
			} catch (Exception e1) {
				BusinessTelephoneNumber = "NA";
			}
			try {

				CallbackTelephoneNumber = String.valueOf(mapitelephone.getCallbackTelephoneNumber());
			} catch (Exception ep) {
				CallbackTelephoneNumber = "";
			}
			try {
				if (CallbackTelephoneNumber.equalsIgnoreCase("null") || CallbackTelephoneNumber.contains("meta")
						|| CallbackTelephoneNumber.contains("aspose")) {
					CallbackTelephoneNumber = "NA";
				}
			} catch (Exception e1) {
				CallbackTelephoneNumber = "NA";
			}
			try {

				CarTelephoneNumber = String.valueOf(mapitelephone.getCarTelephoneNumber());
			} catch (Exception ep) {
				CarTelephoneNumber = "";
			}
			try {
				if (CarTelephoneNumber.equalsIgnoreCase("null") || CarTelephoneNumber.contains("meta")
						|| CarTelephoneNumber.contains("aspose")) {
					CarTelephoneNumber = "NA";
				}
			} catch (Exception e1) {
				CarTelephoneNumber = "NA";
			}
			try {

				CompanyMainTelephoneNumber = String.valueOf(mapitelephone.getCompanyMainTelephoneNumber());
			} catch (Exception ep) {
				CompanyMainTelephoneNumber = "";
			}
			try {
				if (CompanyMainTelephoneNumber.equalsIgnoreCase("null") || CompanyMainTelephoneNumber.contains("meta")
						|| CompanyMainTelephoneNumber.contains("aspose")) {
					CompanyMainTelephoneNumber = "NA";
				}
			} catch (Exception e1) {
				CompanyMainTelephoneNumber = "NA";
			}
			try {

				Home2TelephoneNumber = String.valueOf(mapitelephone.getHome2TelephoneNumber());
			} catch (Exception ep) {
				Home2TelephoneNumber = "";
			}
			try {
				if (Home2TelephoneNumber.equalsIgnoreCase("null") || homeCountry.contains("meta")
						|| Home2TelephoneNumber.contains("meta") || Home2TelephoneNumber.contains("aspose")) {
					Home2TelephoneNumber = "NA";
				}
			} catch (Exception e1) {
				Home2TelephoneNumber = "NA";
			}

			try {

				HomeTelephoneNumber = String.valueOf(mapitelephone.getHomeTelephoneNumber());
			} catch (Exception ep) {
				HomeTelephoneNumber = "";
			}
			try {
				if (HomeTelephoneNumber.equalsIgnoreCase("null") || HomeTelephoneNumber.contains("meta")
						|| HomeTelephoneNumber.contains("aspose")) {
					HomeTelephoneNumber = "NA";
				}
			} catch (Exception e1) {
				HomeTelephoneNumber = "NA";
			}
			try {

				IsdnNumber = String.valueOf(mapitelephone.getIsdnNumber());
			} catch (Exception ep) {
				IsdnNumber = "";
			}
			try {
				if (IsdnNumber.equalsIgnoreCase("null") || IsdnNumber.contains("meta")
						|| IsdnNumber.contains("aspose")) {
					IsdnNumber = "NA";
				}
			} catch (Exception e1) {
				IsdnNumber = "NA";
			}

			try {

				MobileTelephoneNumber = String.valueOf(mapitelephone.getMobileTelephoneNumber());
			} catch (Exception ep) {
				MobileTelephoneNumber = "";
			}
			try {
				if (MobileTelephoneNumber.equalsIgnoreCase("null") || MobileTelephoneNumber.contains("meta")
						|| MobileTelephoneNumber.contains("aspose")) {
					MobileTelephoneNumber = "NA";
				}
			} catch (Exception e1) {
				MobileTelephoneNumber = "NA";
			}
			try {

				OtherTelephoneNumber = String.valueOf(mapitelephone.getOtherTelephoneNumber());
			} catch (Exception ep) {
				OtherTelephoneNumber = "";
			}
			try {
				if (OtherTelephoneNumber.equalsIgnoreCase("null") || OtherTelephoneNumber.contains("meta")
						|| OtherTelephoneNumber.contains("aspose")) {
					OtherTelephoneNumber = "NA";
				}
			} catch (Exception e1) {
				OtherTelephoneNumber = "NA";
			}
			try {

				PagerTelephoneNumber = String.valueOf(mapitelephone.getPagerTelephoneNumber());
			} catch (Exception ep) {
				PagerTelephoneNumber = "";
			}
			try {
				if (PagerTelephoneNumber.equalsIgnoreCase("null") || PagerTelephoneNumber.contains("meta")
						|| PagerTelephoneNumber.contains("aspose")) {
					PagerTelephoneNumber = "NA";
				}
			} catch (Exception e1) {
				PagerTelephoneNumber = "NA";
			}
			try {

				PrimaryTelephoneNumber = String.valueOf(mapitelephone.getPrimaryTelephoneNumber());
			} catch (Exception ep) {
				PrimaryTelephoneNumber = "";
			}
			try {
				if (PrimaryTelephoneNumber.equalsIgnoreCase("null") || PrimaryTelephoneNumber.contains("meta")
						|| PrimaryTelephoneNumber.contains("aspose")) {
					PrimaryTelephoneNumber = "NA";
				}
			} catch (Exception e1) {
				PrimaryTelephoneNumber = "NA";
			}
			try {

				RadioTelephoneNumber = String.valueOf(mapitelephone.getRadioTelephoneNumber());
			} catch (Exception ep) {
				RadioTelephoneNumber = "";
			}
			try {
				if (RadioTelephoneNumber.equalsIgnoreCase("null") || homeCountry.contains("meta")
						|| RadioTelephoneNumber.contains("meta") || RadioTelephoneNumber.contains("aspose")) {
					RadioTelephoneNumber = "NA";
				}
			} catch (Exception e1) {
				RadioTelephoneNumber = "NA";
			}
			try {

				TelexNumber = String.valueOf(mapitelephone.getTelexNumber());
			} catch (Exception ep) {
				TelexNumber = "";
			}
			try {
				if (TelexNumber.equalsIgnoreCase("null") || TelexNumber.contains("meta")
						|| TelexNumber.contains("aspose")) {
					TelexNumber = "NA";
				}
			} catch (Exception e1) {
				TelexNumber = "NA";
			}
			try {

				TtyTddPhoneNumber = String.valueOf(mapitelephone.getTtyTddPhoneNumber());
			} catch (Exception ep) {
				TtyTddPhoneNumber = "";
			}
			try {
				if (TtyTddPhoneNumber.equalsIgnoreCase("null") || TtyTddPhoneNumber.contains("meta")
						|| TtyTddPhoneNumber.contains("aspose")) {
					TtyTddPhoneNumber = "NA";
				}
			} catch (Exception e1) {
				TtyTddPhoneNumber = "NA";
			}

			try {
				String[] data1 = { firstName, middleName, lastname, prefix, Email1addresstype, Email1displayname,
						Email1address, Email1fax, Email2addresstype, Email2displayname, Email2fax, Email2address,
						Email3address, Email3addresstype, Email3displayname, Email3fax, homefaxaddress,
						homefaxaddresstype, homefaxdisplayname, homefaxno, primaryfaxaddress, primaryfaxaddresstype,
						primaryfaxdisplayname, primaryfaxno, bussinessfaxaddress, bussinessfaxaddresstype,
						bussinessfaxdisplayname, bussinessfaxno, WeddingAnniversary, birthday, fileunder, fileunderid,
						generation, title, account, BusinessHomePage, ComputerNetworkName, CustomerId, FreeBusyLocation,
						FtpSite, Gender, GovernmentIdNumber, Hobbies, Html, InstantMessagingAddress, Language, Location,
						Notes, OrganizationalIdNumber, PersonalHomePage, ReferredByName, SpouseName, homeAddress,
						homegetStreet, homeCity, homeCountry, homeCountryCode, homePostalCode, homegetPostOfficeBox,
						homeStateOrProvince, otherAddress, othergetStreet, otherCity, otherCountry, otherCountryCode,
						otherPostalCode, othergetPostOfficeBox, otherStateOrProvince, workAddress, workgetStreet,
						workCity, workCountry, workCountryCode, workPostalCode, workgetPostOfficeBox,
						workStateOrProvince, Assistant, CompanyName, DepartmentName, ManagerName, OfficeLocation,
						Profession, getTitle, AssistantTelephoneNumber, Business2TelephoneNumber,
						BusinessTelephoneNumber, CallbackTelephoneNumber, CarTelephoneNumber,
						CompanyMainTelephoneNumber, Home2TelephoneNumber, HomeTelephoneNumber, IsdnNumber,
						MobileTelephoneNumber, OtherTelephoneNumber, PagerTelephoneNumber, PrimaryTelephoneNumber,
						RadioTelephoneNumber, TelexNumber, TtyTddPhoneNumber };

				writer.writeNext(data1);

			} catch (Error e) {
				mf.logger.warning("ERROR : " + e.getMessage() + "Message" + " " + message.getDeliveryTime()
						+ System.lineSeparator());
			}

			catch (Exception e) {
				mf.logger.warning("Exception : " + e.getMessage() + "Message" + " " + message.getDeliveryTime()
						+ System.lineSeparator());
			}

		} else if (message.getMessageClass().equals("IPM.Appointment")
				|| message.getMessageClass().contains("IPM.Schedule.Meeting")) {

			MapiCalendar cal = (MapiCalendar) message.toMapiMessageItem();

			String subject = null;
			String startdate = null;
			String enddate = null;
			String alldayevent = null;
			String reminder = null;
			String remindertime = null;
			String requiredattend = null;
			String categories = null;
			String location = "";
			String mileage = "";
			try {
				subject = cal.getSubject();
			} catch (Exception e) {
				subject = "";
			}
			try {
				if (subject.equalsIgnoreCase("null") || subject.contains("meta") || subject.contains("aspose")) {
					subject = "NA";
				}
			} catch (Exception e1) {
				subject = "NA";
			}
			try {
				startdate = cal.getStartDate().toString();
			} catch (Exception e) {
				startdate = "";
			}
			try {
				if (startdate.equalsIgnoreCase("null") || startdate.contains("meta") || startdate.contains("aspose")) {
					startdate = "NA";
				}
			} catch (Exception e1) {
				startdate = "NA";
			}
			try {
				enddate = cal.getEndDate().toString();
			} catch (Exception e) {
				enddate = "";
			}
			try {
				if (enddate.equalsIgnoreCase("null") || enddate.contains("meta") || enddate.contains("aspose")) {
					enddate = "NA";
				}
			} catch (Exception e1) {
				enddate = "NA";
			}
			try {
				alldayevent = String.valueOf(cal.isAllDay());
			} catch (Exception e) {
				alldayevent = "";
			}
			try {
				if (alldayevent.equalsIgnoreCase("null") || alldayevent.contains("meta")
						|| alldayevent.contains("aspose")) {
					alldayevent = "NA";
				}
			} catch (Exception e1) {
				alldayevent = "NA";
			}
			try {
				reminder = String.valueOf(cal.getReminderSet());
			} catch (Exception e) {
				reminder = "";
			}
			try {
				if (reminder.equalsIgnoreCase("null") || reminder.contains("meta") || reminder.contains("aspose")) {
					reminder = "NA";
				}
			} catch (Exception e1) {
				reminder = "NA";
			}

			try {
				remindertime = String.valueOf(cal.getReminderDelta());
			} catch (Exception e) {
				remindertime = "";
			}
			try {
				if (remindertime.equalsIgnoreCase("null") || remindertime.contains("meta")
						|| remindertime.contains("aspose")) {
					remindertime = "NA";
				}
			} catch (Exception e1) {
				remindertime = "NA";
			}
			try {
				requiredattend = String.valueOf(cal.getAttendees());
			} catch (Exception e) {
				requiredattend = "";
			}
			try {
				if (requiredattend.equalsIgnoreCase("null") || requiredattend.contains("meta")
						|| requiredattend.contains("aspose")) {
					requiredattend = "NA";
				}
			} catch (Exception e1) {
				requiredattend = "NA";
			}
			try {
				categories = String.valueOf(cal.getCategories());
			} catch (Exception e) {
				categories = "";
			}
			try {
				if (categories.equalsIgnoreCase("null") || categories.contains("meta")
						|| categories.contains("aspose")) {
					categories = "NA";
				}
			} catch (Exception e1) {
				categories = "NA";
			}
			try {
				location = String.valueOf(cal.getLocation());
			} catch (Exception e) {
				location = "";
			}
			try {
				if (location.equalsIgnoreCase("null") || location.contains("meta") || location.contains("aspose")) {
					location = "NA";
				}
			} catch (Exception e1) {
				location = "NA";
			}
			try {
				mileage = String.valueOf(cal.getMileage());
			} catch (Exception e) {
				mileage = "";
			}
			try {
				if (mileage.equalsIgnoreCase("null") || mileage.contains("meta") || mileage.contains("aspose")) {
					mileage = "NA";
				}
			} catch (Exception e1) {
				mileage = "NA";
			}
			try {
				String[] data1 = { subject, startdate, enddate, alldayevent, reminder, requiredattend, remindertime,
						requiredattend, categories, location, mileage };

				writer.writeNext(data1);

			} catch (Error e) {
				mf.logger.warning("ERROR : " + e.getMessage() + "Message" + " " + message.getDeliveryTime()
						+ System.lineSeparator());
			}

			catch (Exception e) {
				mf.logger.warning("Exception : " + e.getMessage() + "Message" + " " + message.getDeliveryTime()
						+ System.lineSeparator());
			}

		} else if (message.getMessageClass().equals("IPM.StickyNote") || message.getMessageClass().equals("IPM.Task")) {

			MapiTask task = (MapiTask) message.toMapiMessageItem();

			String subject = "";
			String startdate = "";
			String getDueDate = "";
			String getPercentComplete = "";
			String getEstimatedEffort = "";
			String getActualEffort = "";
			String getOwner = "";
			String getLastUser = "";
			String getLastDelegate = "";
			String getAttendeessizesize = "";
			String getOriginalDisplayName = "";
			String getDisplayName = "";
			String getEmailAddress = "";
			String getFaxNumber = "";
			String getAddressType = "";
			String comapanies = "";
			String Categories = "";
			String getMileage = "";
			String getBilling = "";
			String getSensitivity = "";
			String getStatus = "";
			String getHistory = "";

			MapiTaskUsers user = null;
			MapiElectronicAddress address = null;
			String[] company = null;
			String[] getCategories = null;
			try {
				user = task.getUsers();
			} catch (Exception e1) {

			}
			try {
				address = user.getAssigner();
			} catch (Exception e1) {

			}

			try {
				company = task.getCompanies();
			} catch (Exception e1) {

			}
			try {
				getCategories = task.getCategories();
			} catch (Exception e1) {

			}

			try {
				subject = task.getSubject();
			} catch (Exception e) {
				subject = "";
			}
			try {
				if (subject.equalsIgnoreCase("null") || subject.contains("meta") || subject.contains("aspose")) {
					subject = "NA";
				}
			} catch (Exception e1) {
				subject = "NA";
			}
			try {
				startdate = task.getStartDate().toString();
			} catch (Exception e) {
				startdate = "";
			}
			try {
				if (startdate.equalsIgnoreCase("null") || startdate.contains("meta") || startdate.contains("aspose")) {
					startdate = "NA";
				}
			} catch (Exception e1) {
				startdate = "NA";
			}
			try {
				getDueDate = task.getDueDate().toString();
			} catch (Exception e) {
				getDueDate = "";
			}
			try {
				if (getDueDate.equalsIgnoreCase("null") || getDueDate.contains("meta")
						|| getDueDate.contains("aspose")) {
					getDueDate = "NA";
				}
			} catch (Exception e1) {
				getDueDate = "NA";
			}
			try {
				getPercentComplete = String.valueOf(task.getPercentComplete());
			} catch (Exception e) {
				getPercentComplete = "";
			}
			try {
				if (getPercentComplete.equalsIgnoreCase("null") || getPercentComplete.contains("meta")
						|| getPercentComplete.contains("aspose")) {
					getPercentComplete = "NA";
				}
			} catch (Exception e1) {
				getPercentComplete = "NA";
			}

			try {
				getEstimatedEffort = String.valueOf(task.getEstimatedEffort());
			} catch (Exception e) {
				getEstimatedEffort = "";
			}
			try {
				if (getEstimatedEffort.equalsIgnoreCase("null") || getEstimatedEffort.contains("meta")
						|| getEstimatedEffort.contains("aspose")) {
					getEstimatedEffort = "NA";
				}
			} catch (Exception e1) {
				getEstimatedEffort = "NA";
			}
			try {
				getActualEffort = String.valueOf(task.getActualEffort());
			} catch (Exception e) {
				getActualEffort = "";
			}
			try {
				if (getActualEffort.equalsIgnoreCase("null") || getActualEffort.contains("meta")
						|| getActualEffort.contains("aspose")) {
					getActualEffort = "NA";
				}
			} catch (Exception e1) {
				getActualEffort = "";
			}
			try {
				getOwner = String.valueOf(user.getOwner());
			} catch (Exception e) {
				getOwner = "";
			}
			try {
				if (getOwner.equalsIgnoreCase("null") || getOwner.contains("meta") || getOwner.contains("aspose")) {
					getOwner = "NA";
				}
			} catch (Exception e1) {
				getOwner = "NA";
			}
			try {
				getLastUser = String.valueOf(user.getLastUser());
			} catch (Exception e) {
				getLastUser = "";
			}
			try {
				if (getLastUser.equalsIgnoreCase("null") || getLastUser.contains("meta")
						|| getLastUser.contains("aspose")) {
					getLastUser = "NA";
				}
			} catch (Exception e1) {
				getLastUser = "NA";
			}
			try {
				getLastDelegate = String.valueOf(user.getLastDelegate());
			} catch (Exception e) {
				getLastDelegate = "";
			}
			try {
				if (getLastDelegate.equalsIgnoreCase("null") || getLastDelegate.contains("meta")
						|| getLastDelegate.contains("aspose")) {
					getLastDelegate = "NA";
				}
			} catch (Exception e1) {
				getLastDelegate = "NA";
			}
			try {
				getAttendeessizesize = String.valueOf(user.getAttendees().size());
			} catch (Exception e) {
				getAttendeessizesize = "";
			}
			try {
				if (getAttendeessizesize.equalsIgnoreCase("null") || getAttendeessizesize.contains("meta")
						|| getAttendeessizesize.contains("aspose")) {
					getAttendeessizesize = "NA";
				}
			} catch (Exception e2) {
				getAttendeessizesize = "NA";
			}
			try {
				getOriginalDisplayName = String.valueOf(address.getOriginalDisplayName());

			} catch (Exception e) {
				getOriginalDisplayName = "";
			}
			try {
				if (getOriginalDisplayName.equalsIgnoreCase("null") || getOriginalDisplayName.contains("meta")
						|| getOriginalDisplayName.contains("aspose")) {
					getOriginalDisplayName = "NA";
				}
			} catch (Exception e1) {
				getOriginalDisplayName = "NA";
			}
			try {
				getDisplayName = String.valueOf(address.getDisplayName());

			} catch (Exception e) {
				getDisplayName = "";
			}
			if (getDisplayName.equalsIgnoreCase("null") || getDisplayName.contains("meta")
					|| getDisplayName.contains("aspose")) {
				getDisplayName = "NA";
			}
			try {
				getEmailAddress = String.valueOf(address.getEmailAddress());

			} catch (Exception e) {
				getEmailAddress = "";
			}
			try {
				if (getEmailAddress.equalsIgnoreCase("null") || getEmailAddress.contains("meta")
						|| getEmailAddress.contains("aspose")) {
					getEmailAddress = "NA";
				}
			} catch (Exception e1) {
				getEmailAddress = "NA";
			}
			try {
				getFaxNumber = String.valueOf(address.getFaxNumber());

			} catch (Exception e) {
				getFaxNumber = "";
			}
			try {
				if (getFaxNumber.equalsIgnoreCase("null") || getFaxNumber.contains("meta")
						|| getFaxNumber.contains("aspose")) {
					getFaxNumber = "NA";
				}
			} catch (Exception e1) {
				getFaxNumber = "NA";
			}
			try {
				getAddressType = String.valueOf(address.getAddressType());

			} catch (Exception e) {
				getAddressType = "";
			}
			try {
				if (getAddressType.equalsIgnoreCase("null") || getAddressType.contains("meta")
						|| getAddressType.contains("aspose")) {
					getAddressType = "NA";
				}
			} catch (Exception e1) {
				getAddressType = "NA";
			}
			try {
				for (int i = 0; i < company.length; i++) {
					if (i == 0) {
						comapanies = company[i];
					} else {
						comapanies = comapanies + "," + company[i];
					}
				}

			} catch (Exception e) {
				comapanies = "";
			}
			if (comapanies.equalsIgnoreCase("null") || comapanies.contains("meta") || comapanies.contains("aspose")) {
				comapanies = "NA";
			}

			try {
				for (int i = 0; i < getCategories.length; i++) {
					if (i == 0) {
						Categories = getCategories[i];
					} else {
						Categories = Categories + "," + getCategories[i];
					}
				}

			} catch (Exception e) {
				Categories = "";
			}
			try {
				if (Categories.equalsIgnoreCase("null") || Categories.contains("meta")
						|| Categories.contains("aspose")) {
					Categories = "NA";
				}
			} catch (Exception e1) {
				Categories = "NA";
			}
			try {
				getMileage = String.valueOf(task.getMileage());
			} catch (Exception e) {
				getMileage = "";
			}
			try {
				if (getMileage.equalsIgnoreCase("null") || getMileage.contains("meta")
						|| getMileage.contains("aspose")) {
					getMileage = "NA";
				}
			} catch (Exception e1) {
				getMileage = "NA";
			}
			try {
				getBilling = String.valueOf(task.getBilling());
			} catch (Exception e) {
				getBilling = "";
			}
			try {
				if (getBilling.equalsIgnoreCase("null") || getBilling.contains("meta")
						|| getBilling.contains("aspose")) {
					getBilling = "NA";
				}
			} catch (Exception e1) {
				getBilling = "NA";
			}
			try {
				int i = task.getSensitivity();
				if (i == 0) {
					getSensitivity = "None";
				} else if (i == 1) {
					getSensitivity = "Personal";

				} else if (i == 2) {
					getSensitivity = "Private";
				} else if (i == 3) {
					getSensitivity = "Company Confidential";
				}

			} catch (Exception e) {
				getSensitivity = "";
			}
			try {
				if (getSensitivity.equalsIgnoreCase("null") || getSensitivity.contains("meta")
						|| getSensitivity.contains("aspose")) {
					getSensitivity = "NA";
				}
			} catch (Exception e2) {
				getSensitivity = "NA";
			}
			try {
				int i = task.getStatus();
				if (i == 0) {
					getStatus = "Not Started";
				} else if (i == 1) {
					getStatus = "In Progress";

				} else if (i == 2) {
					getStatus = "Complete";
				} else if (i == 3) {
					getStatus = "Waiting";
				} else if (i == 4) {
					getStatus = "Deferred";
				}

			} catch (Exception e) {
				getStatus = "";
			}
			try {
				if (getStatus.equalsIgnoreCase("null") || getStatus.contains("meta") || getStatus.contains("aspose")) {
					getStatus = "NA";
				}
			} catch (Exception e1) {
				getStatus = "NA";
			}
			try {
				int i = task.getHistory();
				if (i == 0) {
					getHistory = "No Changes";
				} else if (i == 1) {
					getHistory = "Accepted";

				} else if (i == 2) {
					getHistory = "Rejected";
				} else if (i == 3) {
					getHistory = "Another Property Changed";
				} else if (i == 4) {
					getHistory = "Due Date Changed";
				} else if (i == 5) {
					getHistory = "Assigned";
				}

			} catch (Exception e) {
				getStatus = "";
			}
			try {
				if (getHistory.equalsIgnoreCase("null") || getHistory.contains("meta")
						|| getHistory.contains("aspose")) {
					getHistory = "NA";
				}
			} catch (Exception e) {
				getHistory = "NA";
			}

			String[] data1 = { subject, startdate, getDueDate, getPercentComplete, getEstimatedEffort, getActualEffort,
					getOwner, getLastUser, getLastDelegate, getAttendeessizesize, getOriginalDisplayName,
					getDisplayName, getEmailAddress, getFaxNumber, getAddressType, comapanies, Categories, getMileage,
					getBilling, getSensitivity, getStatus, getHistory };

			writer.writeNext(data1);
		} else {

			try {
				String date = null;
				try {
					date = message.getDeliveryTime().toString();
				} catch (Exception e) {
					date = "NA";
				}

				try {
					if (date.equalsIgnoreCase("null") || date.contains("meta") || date.contains("aspose")) {
						date = "NA";
					}
				} catch (Exception e1) {
					date = "NA";
				}
				String subject = null;
				try {
					subject = message.getSubject();
				} catch (Exception e) {

					subject = message.getBodyHtml();
				}

				try {
					if (subject.equalsIgnoreCase("null") || subject.contains("meta") || subject.contains("aspose")) {
						subject = "NA";
					}
				} catch (Exception e1) {
					subject = "NA";
				}
				String getBody = null;
				try {
					getBody = message.getBody();
				} catch (Exception e) {
					getBody = "NA";
				}

				try {
					if (getBody.equalsIgnoreCase("null") || getBody.contains("meta") || getBody.contains("aspose")) {
						getBody = "NA";
					}
					if (getBody.length() >= 150) {
						getBody = getBody.substring(0, 150);
					}

				} catch (Exception e1) {
					getBody = "NA";
				}

				String getSenderEmailAddress = null;
				try {
					getSenderEmailAddress = message.getSenderEmailAddress();
				} catch (Exception e) {
					getSenderEmailAddress = "NA";
				}

				try {
					if (getSenderEmailAddress.equalsIgnoreCase("null") || getSenderEmailAddress.contains("meta")
							|| getSenderEmailAddress.contains("aspose")) {
						getSenderEmailAddress = "NA";
					}
				} catch (Exception e1) {
					getSenderEmailAddress = "NA";
				}
				String getReplyTo = null;
				try {

					for (int i = 0; i < message.getRecipients().size(); i++) {
						String toid = null;
						try {
							toid = message.getRecipients().get_Item(i).getEmailAddress();
						} catch (Exception e) {

						}
						if (i == 0) {
							getReplyTo = toid;
						} else {
							getReplyTo = getReplyTo + "," + toid;

						}

					}

				} catch (Exception e) {
					getReplyTo = "NA";
				}

				try {
					if (getReplyTo.equalsIgnoreCase("null") || getReplyTo.contains("meta")
							|| getReplyTo.contains("aspose")) {
						getReplyTo = "NA";
					}
				} catch (Exception e1) {
					getReplyTo = "NA";
				}

				String getDisplayCc = null;
				try {
					getDisplayCc = message.getDisplayCc();
				} catch (Exception e) {
					getDisplayCc = "NA";
				}

				try {
					if (getDisplayCc.equalsIgnoreCase("null") || getDisplayCc.contains("meta")
							|| getDisplayCc.contains("aspose")) {
						getDisplayCc = "NA";
					}
				} catch (Exception e1) {
					getDisplayCc = "NA";
				}

				String getDisplayBcc = null;
				try {
					getDisplayBcc = message.getDisplayBcc();
				} catch (Exception e) {
					getDisplayBcc = "NA";
				}

				try {
					if (getDisplayBcc.equalsIgnoreCase("null") || getDisplayBcc.contains("meta")
							|| getDisplayBcc.contains("aspose")) {
						getDisplayBcc = "NA";
					}
				} catch (Exception e1) {
					getDisplayBcc = "NA";
				}

				if (message.getAttachments().size() > 0) {
					File fd = new File(destination_path + File.separator + path + File.separator + "Attachment"
							+ File.separator + subname);

					fd.mkdirs();

					String[] data1 = { date, subject, getBody, getSenderEmailAddress, getReplyTo, getDisplayCc,
							getDisplayBcc, fd.getAbsolutePath() };

					writer.writeNext(data1);

				} else {
					String[] data1 = { date, subject, getBody, getSenderEmailAddress, getReplyTo, getDisplayCc,
							getDisplayBcc };

					writer.writeNext(data1);
				}

			} catch (Error e) {
				mf.logger.warning("ERROR : " + e.getMessage() + "Message" + " " + message.getDeliveryTime()
						+ System.lineSeparator());
			}

			catch (Exception e) {
				mf.logger.warning("Exception : " + e.getMessage() + "Message" + " " + message.getDeliveryTime()
						+ System.lineSeparator());
			}

		}

		try {
			count_destination++;

			for (int j = 0; j < message.getAttachments().size(); j++) {

				MapiAttachment att = message.getAttachments().get_Item(j);

				String s = getFileExtension(att.getLongFileName());
				String attFileName = getRidOfIllegalFileNameCharacters(att.getLongFileName().replace("." + s, ""));

				att.save(destination_path + File.separator + path + File.separator + "Attachment" + File.separator
						+ subname + File.separator + attFileName + "." + s);

			}
		} catch (Exception e) {

		}

	}

	public void Mailmess_CSV(MailMessage message, CSVWriter writer) {

		String subname = getRidOfIllegalFileNameCharacters(message.getSubject() + message.getDate());

		MapiMessage mp = MapiMessage.fromMailMessage(message);

		try {

			String[] data1 = { mp.getDeliveryTime().toString(), mp.getSubject(), mp.getBody(),
					mp.getSenderEmailAddress(), mp.getReplyTo(), mp.getDisplayCc() };

			writer.writeNext(data1);

			if (message.getAttachments().size() > 0) {
				new File(destination_path + File.separator + path + File.separator + "Attachment" + File.separator
						+ subname).mkdirs();

			}

			for (int j = 0; j < message.getAttachments().size(); j++) {
				Attachment att = (Attachment) message.getAttachments().get_Item(j);

				String s = getFileExtension(att.getName());
				String attFileName = getRidOfIllegalFileNameCharacters(att.getName().replace("." + s, ""));

				att.save(destination_path + File.separator + path + File.separator + "Attachment" + File.separator
						+ subname + attFileName + "." + s);
			}

			count_destination++;

		} catch (Error e) {
			mf.logger.warning(
					"ERROR : " + e.getMessage() + "Message" + " " + message.getDate() + System.lineSeparator());
		}

		catch (Exception e) {
			mf.logger.warning(
					"Exception : " + e.getMessage() + "Message" + " " + message.getDate() + System.lineSeparator());
			count_destination++;
			return;
		}

	}

	public void connectionHandle(String gotMessage) {
		lbl_progressreport.setText("INTERNET Connection  LOST ");

		label_11.setIcon(new ImageIcon(Main_Frame.class.getResource("/images.jpg")));

		while (true) {
			try {
				lbl_progressreport.setText("Connecting to Server Please Wait");
				if (filetype.equalsIgnoreCase("OFFICE 365")) {
					conntiontooffice365_output();
				} else if (filetype.equalsIgnoreCase("Amazon Webmail")) {

					connectiontoinaws_output();

				} else if (filetype.equalsIgnoreCase(" Mail")) {
					connectiontoYandex_output();

				} else if (filetype.equalsIgnoreCase("GMAIL")) {

					connectiontogmail_output();

				} else if (filetype.equalsIgnoreCase("Hostgator email")) {
					connectiontoHostgator_output();

				} else if (filetype.equalsIgnoreCase("Icloud")) {
					connectiontoicloud_output();

				} else if (filetype.equalsIgnoreCase("GoDaddy email")) {
					connectiontoGoDaddy_output();

				} else if (filetype.equalsIgnoreCase("Live Exchange")) {
					connectionwithexchangeserver_output();

				} else if (filetype.equalsIgnoreCase("IMAP")) {

					connectiontoimap_output();

				} else if (filetype.equalsIgnoreCase("Hotmail")) {
					conntiontohotmail_output();

				} else if (filetype.equalsIgnoreCase("Zoho MAIL")) {

					connectiontozoho_output();

				} else if (filetype.equalsIgnoreCase("YAHOO MAIL")) {

					connectiontoyahoo_output();

				} else if (filetype.equalsIgnoreCase("AOL")) {

					connectiontoaol_output();

				}
				label_11.setIcon(new ImageIcon(Main_Frame.class.getResource("/download.png")));
				lbl_progressreport.setText("Connection extablished Retriving Messasge");
				break;
			} catch (Exception e) {
				lbl_progressreport.setText("INTERNET Connection  LOST ");

			}

		}

		Progressbar.setVisible(true);

	}

	public boolean isValid(String email) {
		String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\." + "[a-zA-Z0-9_+&*-]+)*@" + "(?:[a-zA-Z0-9-]+\\.)+[a-z"
				+ "A-Z]{2,7}$";

		Pattern pat = Pattern.compile(emailRegex);
		if (email == null)
			return false;
		return pat.matcher(email).matches();
	}

	public void connectionHandle1() {
		label_11.setIcon(new ImageIcon(Main_Frame.class.getResource("/images.jpg")));
		while (true) {
			try {
				if (filetype.equalsIgnoreCase("OFFICE 365")) {
					conntiontooffice365_output();

				} else if (filetype.equalsIgnoreCase("Amazon Webmail")) {

					connectiontoinaws_output();

				} else if (filetype.equalsIgnoreCase("GMAIL")) {

					connectiontogmail_output();

				} else if (filetype.equalsIgnoreCase("Yandex Mail")) {
					connectiontoYandex_output();

				} else if (filetype.equalsIgnoreCase("Hostgator email")) {
					connectiontoHostgator_output();

				} else if (filetype.equalsIgnoreCase("Icloud")) {
					connectiontoicloud_output();

				} else if (filetype.equalsIgnoreCase("GoDaddy email")) {
					connectiontoGoDaddy_output();

				} else if (filetype.equalsIgnoreCase("Live Exchange")) {
					connectionwithexchangeserver_output();

				} else if (filetype.equalsIgnoreCase("IMAP")) {

					connectiontoimap_output();

				} else if (filetype.equalsIgnoreCase("Hotmail")) {
					conntiontohotmail_output();

				} else if (filetype.equalsIgnoreCase("Zoho MAIL")) {

					connectiontozoho_output();

				} else if (filetype.equalsIgnoreCase("YAHOO MAIL")) {

					connectiontoyahoo_output();

				} else if (filetype.equalsIgnoreCase("AOL")) {

					connectiontoaol_output();

				}
				label_11.setIcon(new ImageIcon(Main_Frame.class.getResource("/download.png")));
				break;

			} catch (Exception e) {
				e.printStackTrace();
			}
		}

	}

	public static void visitAllNodes(DefaultMutableTreeNode roe) {

		Enumeration<TreeNode> e = roe.depthFirstEnumeration();
		while (e.hasMoreElements()) {
			DefaultMutableTreeNode node = (DefaultMutableTreeNode) e.nextElement();

			lists.add(node);
			listst.add(node.toString().replace("<html><b>", ""));

		}

	}

	public IEWSClient connectionwithexchangeserver_output() throws Exception {

		clientforexchange_output = EWSClient.getEWSClient("https://" + domain_p3 + "/ews/Exchange.asmx", username_p3,
				password_p3);

		clientforexchange_output.setTimeout(5 * 60 * 1000);
		EmailClient.setSocketsLayerVersion2(true);
		EmailClient.setSocketsLayerVersion2DisableSSLCertificateValidation(true);

		return clientforexchange_output;

	}

	public IEWSClient conntiontohotmail_output() throws Exception {
		clientforexchange_output = EWSClient.getEWSClient("https://outlook.live.com/EWS/Exchange.asmx", username_p3,
				password_p3);

		clientforexchange_output.setTimeout(5 * 60 * 1000);
		EmailClient.setSocketsLayerVersion2(true);
		EmailClient.setSocketsLayerVersion2DisableSSLCertificateValidation(true);

		return clientforexchange_output;
	}

	public ImapClient connectiontoYandex_output() throws Exception {
		clientforimap_output = new ImapClient("imap.yandex.com", 993, username_p3, password_p3);

		clientforimap_output.setSecurityOptions(SecurityOptions.Auto);

		// clientforimap_output.setTimeout(5 * 60 * 1000);

		EmailClient.setSocketsLayerVersion2(true);
		clientforimap_output.setConnectionCheckupPeriod(50000);
		EmailClient.setSocketsLayerVersion2DisableSSLCertificateValidation(true);
		iconnforimap_output = clientforimap_output.createConnection();
		return clientforimap_output;
	}

	public ImapClient connectiontoimap_output() throws Exception {
		clientforimap_output = new ImapClient(domain_p3, portnofiletype, username_p3, password_p3);

		clientforimap_output.setSecurityOptions(SecurityOptions.Auto);

		clientforimap_output.setTimeout(5 * 60 * 1000);
		EmailClient.setSocketsLayerVersion2(true);
		EmailClient.setSocketsLayerVersion2DisableSSLCertificateValidation(true);
		iconnforimap_output = clientforimap_output.createConnection();
		return clientforimap_output;
	}

	public ImapClient connectiontozoho_output() throws Exception {
		clientforimap_output = new ImapClient("imap.zoho.in", 993, username_p3, password_p3);

		clientforimap_output.setSecurityOptions(SecurityOptions.Auto);

		// clientforimap_output.setTimeout(5 * 60 * 1000);

		EmailClient.setSocketsLayerVersion2(true);
		clientforimap_output.setConnectionCheckupPeriod(50000);
		EmailClient.setSocketsLayerVersion2DisableSSLCertificateValidation(true);
		iconnforimap_output = clientforimap_output.createConnection();
		return clientforimap_output;
	}

	public ImapClient connectiontoGoDaddy_output() throws Exception {
		clientforimap_output = new ImapClient("imap.secureserver.net", 993, username_p3, password_p3);

		clientforimap_output.setSecurityOptions(SecurityOptions.Auto);

		// clientforimap_output.setTimeout(5 * 60 * 1000);

		EmailClient.setSocketsLayerVersion2(true);
		clientforimap_output.setConnectionCheckupPeriod(50000);
		EmailClient.setSocketsLayerVersion2DisableSSLCertificateValidation(true);
		iconnforimap_output = clientforimap_output.createConnection();
		return clientforimap_output;
	}

	public ImapClient connectiontoHostgator_output() throws Exception {
		clientforimap_output = new ImapClient(domain_p3, portnofiletype, username_p3, password_p3);

		clientforimap_output.setSecurityOptions(SecurityOptions.Auto);

		// clientforimap_output.setTimeout(5 * 60 * 1000);

		EmailClient.setSocketsLayerVersion2(true);
		clientforimap_output.setConnectionCheckupPeriod(50000);
		EmailClient.setSocketsLayerVersion2DisableSSLCertificateValidation(true);
		iconnforimap_output = clientforimap_output.createConnection();
		return clientforimap_output;
	}

	public ImapClient connectiontoicloud_output() throws Exception {
		clientforimap_output = new ImapClient("imap.mail.me.com", 993, username_p3, password_p3);

		clientforimap_output.setSecurityOptions(SecurityOptions.Auto);

		// clientforimap_output.setTimeout(5 * 60 * 1000);

		EmailClient.setSocketsLayerVersion2(true);
		clientforimap_output.setConnectionCheckupPeriod(50000);
		EmailClient.setSocketsLayerVersion2DisableSSLCertificateValidation(true);
		iconnforimap_output = clientforimap_output.createConnection();
		return clientforimap_output;
	}

	public ImapClient connectiontogmail_output() throws Exception {
		clientforimap_output = new ImapClient("imap.gmail.com", 993, username_p3, password_p3);

		clientforimap_output.setSecurityOptions(SecurityOptions.Auto);

		EmailClient.setSocketsLayerVersion2(true);

		clientforimap_output.setTimeout(5 * 60 * 1000);
		EmailClient.setSocketsLayerVersion2DisableSSLCertificateValidation(true);
		iconnforimap_output = clientforimap_output.createConnection();
		return clientforimap_output;
	}

	public ImapClient connectiontoinaws_output() throws Exception {
		clientforimap_output = new ImapClient(domain_p3, portnofiletype, username_p3, password_p3);

		clientforimap_output.setSecurityOptions(SecurityOptions.Auto);

		EmailClient.setSocketsLayerVersion2(true);
		EmailClient.setSocketsLayerVersion2DisableSSLCertificateValidation(true);
		clientforimap_output.setTimeout(5 * 60 * 1000);
		iconnforimap_output = clientforimap_output.createConnection();
		return clientforimap_output;
	}

	public ImapClient connectiontoaol_output() throws Exception {
		clientforimap_output = new ImapClient("imap.aol.com", 993, username_p3, password_p3);

		clientforimap_output.setSecurityOptions(SecurityOptions.Auto);

		EmailClient.setSocketsLayerVersion2(true);

		clientforimap_output.setTimeout(5 * 60 * 1000);
		EmailClient.setSocketsLayerVersion2DisableSSLCertificateValidation(true);
		iconnforimap_output = clientforimap_output.createConnection();
		return clientforimap_output;
	}

	public ImapClient connectiontoyahoo_output() throws Exception {
		clientforimap_output = new ImapClient("imap.mail.yahoo.com", 993, username_p3, password_p3);

		clientforimap_output.setSecurityOptions(SecurityOptions.Auto);

		EmailClient.setSocketsLayerVersion2(true);

		clientforimap_output.setTimeout(5 * 60 * 1000);
		EmailClient.setSocketsLayerVersion2DisableSSLCertificateValidation(true);
		iconnforimap_output = clientforimap_output.createConnection();
		return clientforimap_output;
	}

	public IEWSClient conntiontooffice365_output() throws Exception {
		clientforexchange_output = EWSClient.getEWSClient(mailboxUri, username_p3, password_p3);

		// EmailClient.setSocketsLayerVersion2(true);

		clientforexchange_output.setTimeout(5 * 60 * 1000);
//		EmailClient.setSocketsLayerVersion2DisableSSLCertificateValidation(true);

		return clientforexchange_output;
	}

	private static String getRidOfIllegalFileNameCharacters(String strName) {
		String strLegalName = strName;
		if (strLegalName.length() >= 80) {
			strLegalName = strLegalName.substring(0, 80);
		}
		strLegalName = strName.replace(":", " ").replace("\\", "").replace("?", "").replace("/", "").replace("|", "")
				.replace("*", "").replace("<", "").replace(">", "").replace("\t", "").replace("\"", "")
				.replace(",", "");

		if (strLegalName.length() >= 80) {
			strLegalName = strLegalName.substring(0, 80);
		}
		return strLegalName;
	}

	public static void search(TreeNode rootNode, DefaultMutableTreeNode searchNode) {

		for (int i = 0; i < rootNode.getChildCount(); i++) {

			if (rootNode.getChildAt(i).toString().equals(searchNode.toString())) {

				lastNode = (DefaultMutableTreeNode) rootNode.getChildAt(i);
			}

			else {

				search((DefaultMutableTreeNode) rootNode.getChildAt(i), searchNode);
			}

		}

	}

	void openBrowser(String url) {
		if (Desktop.isDesktopSupported()) {
			Desktop desktop = Desktop.getDesktop();
			try {
				desktop.browse(new URI(url));
			} catch (IOException | URISyntaxException e) {
				// mf.logger.warning("Warning : " + e.getMessage());
			}
		} else {
			Runtime runtime = Runtime.getRuntime();
			try {
				runtime.exec("xdg-open " + url);
			} catch (IOException e) {
				// .warning("Warning : " + e.getMessage());
			}
		}
	}

	private static String getFileExtension(File file) {
		String fileName = file.getName();
		if (fileName.lastIndexOf(".") != -1 && fileName.lastIndexOf(".") != 0)
			return fileName.substring(fileName.lastIndexOf(".") + 1);
		else
			return "";
	}

	private static String getFileExtension(String fileName) {

		if (fileName.lastIndexOf(".") != -1 && fileName.lastIndexOf(".") != 0)
			return fileName.substring(fileName.lastIndexOf(".") + 1);
		else
			return "";
	}

	private StringBuilder Duration(long startTime) {
		long elapsedTime = System.currentTimeMillis() - startTime;
		long elapsedSeconds = elapsedTime / 1000;
		long secondsDisplay = elapsedSeconds % 60;
		long elapsedMinutes = elapsedSeconds / 60;
		StringBuilder br = new StringBuilder();
		br.append(elapsedMinutes);
		br.append(':');
		br.append(secondsDisplay);
		return br;
	}

	private String filepath(File file) {
		String fileName = file.getAbsolutePath();
		String filepath = fileName.replace(file.getName(), "");
		return filepath;
	}

	String duplicacymail(MailMessage msg) {
		String frm;
		try {
			frm = getRidOfIllegalFileNameCharacters(msg.getFrom().toString());
		} catch (Exception ep) {
			frm = "";
		}
		if (frm != null) {

		} else {
			frm = "";
		}
		String to;
		try {
			to = msg.getTo().get_Item(0).getAddress();
		} catch (Exception e) {
			to = "";
		}
		if (to != null) {

		} else {
			to = "";
		}
		String body;
		try {
			body = msg.getBody();
		} catch (Exception ep) {
			body = "";
		}

		if (body != null) {
			try {
				body = body.substring(0, 40);
			} catch (Exception e) {

			}

		} else {
			body = "";
		}

		String bcc;
		try {
			bcc = msg.getBcc().get_Item(0).getAddress();
		} catch (Exception ep) {
			bcc = "";
		}

		if (bcc != null) {

		} else {
			bcc = "";
		}

		String sub;
		try {
			sub = getRidOfIllegalFileNameCharacters(msg.getSubject());
		} catch (Exception ep) {
			sub = "";
		}

		if (sub != null) {

		} else {
			sub = "";
		}

		SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-YYYY");
		String dstr;
		Date d;
		try {
			d = msg.getDate();
			dstr = formatter.format(d);
		} catch (Exception ep) {
			dstr = "";
		}

		String input = sub + frm + dstr;

		MessageDigest md = null;
		try {
			md = MessageDigest.getInstance("MD5");
		} catch (NoSuchAlgorithmException e) {

			e.printStackTrace();
		}
		byte[] messageDigest = md.digest(input.getBytes());

		// Convert byte array into signum representation
		BigInteger no = new BigInteger(1, messageDigest);
		String hashtext = no.toString(16);
		while (hashtext.length() < 32) {
			hashtext = "0" + hashtext;
		}
		return hashtext;

	}

	void mapifile(MapiMessage message, Date Receiveddate) {

		if (chckbxRemoveDuplicacy.isSelected()) {

			String input = duplicacymapi(message);

			if (!listduplicacy.contains(input)) {
				System.out.println("Not a duplicate message");
				listduplicacy.add(input);

				if (chckbx_Mail_Filter.isSelected()) {
					if (Receiveddate.after(mailfilterstartdate) && Receiveddate.before(mailfilterenddate)) {
						Mapimessage_file(message);
						foldermessagecount++;
					} else if (Receiveddate.equals(mailfilterstartdate) || Receiveddate.equals(mailfilterenddate)) {
						Mapimessage_file(message);
						foldermessagecount++;
					}
				} else {
					Mapimessage_file(message);
					foldermessagecount++;
				}
			}
		} else {
			if (chckbx_Mail_Filter.isSelected()) {
				if (Receiveddate.after(mailfilterstartdate) && Receiveddate.before(mailfilterenddate)) {
					Mapimessage_file(message);
					foldermessagecount++;
				} else if (Receiveddate.equals(mailfilterstartdate) || Receiveddate.equals(mailfilterenddate)) {
					Mapimessage_file(message);
					foldermessagecount++;
				}
			} else {
				Mapimessage_file(message);
				foldermessagecount++;
			}
		}

	}

	void mapicsv(MapiMessage message, Date Receiveddate, CSVWriter writer) {

		if (chckbxRemoveDuplicacy.isSelected()) {

			String input = duplicacymapi(message);

			if (!listduplicacy.contains(input)) {
				System.out.println("Not a duplicate message");
				listduplicacy.add(input);

				if (chckbx_Mail_Filter.isSelected()) {
					if (Receiveddate.after(mailfilterstartdate) && Receiveddate.before(mailfilterenddate)) {
						Mapimess_CSV(message, writer);
						foldermessagecount++;
					} else if (Receiveddate.equals(mailfilterstartdate) || Receiveddate.equals(mailfilterenddate)) {
						Mapimess_CSV(message, writer);
						foldermessagecount++;
					}
				} else {
					Mapimess_CSV(message, writer);
					foldermessagecount++;
				}
			}
		} else {
			if (chckbx_Mail_Filter.isSelected()) {
				if (Receiveddate.after(mailfilterstartdate) && Receiveddate.before(mailfilterenddate)) {
					Mapimess_CSV(message, writer);
					foldermessagecount++;
				} else if (Receiveddate.equals(mailfilterstartdate) || Receiveddate.equals(mailfilterenddate)) {
					Mapimess_CSV(message, writer);
					foldermessagecount++;
				}
			} else {
				Mapimess_CSV(message, writer);
				foldermessagecount++;
			}
		}

	}

	String mapiexchange(MapiMessage message, Date Receiveddate, IEWSClient clientforexchange_output1,
			String Folderuri) {
		String Messageid = "";
		if (chckbxRemoveDuplicacy.isSelected()) {

			String input = duplicacymapi(message);

			if (!listduplicacy.contains(input)) {
				System.out.println("Not a duplicate message");
				listduplicacy.add(input);

				if (chckbx_Mail_Filter.isSelected()) {
					if (Receiveddate.after(mailfilterstartdate) && Receiveddate.before(mailfilterenddate)) {
						Messageid = clientforexchange_output1.appendMessage(Folderuri, message, true);
						foldermessagecount++;
						count_destination++;

					} else if (Receiveddate.equals(mailfilterstartdate) || Receiveddate.equals(mailfilterenddate)) {
						Messageid = clientforexchange_output1.appendMessage(Folderuri, message, true);
						foldermessagecount++;
						count_destination++;

					}
				} else {

					Messageid = clientforexchange_output1.appendMessage(Folderuri, message, true);
					foldermessagecount++;
					count_destination++;
				}
			}
		} else {
			if (chckbx_Mail_Filter.isSelected()) {
				if (Receiveddate.after(mailfilterstartdate) && Receiveddate.before(mailfilterenddate)) {
					Messageid = clientforexchange_output1.appendMessage(Folderuri, message, true);
					foldermessagecount++;
					count_destination++;

				} else if (Receiveddate.equals(mailfilterstartdate) || Receiveddate.equals(mailfilterenddate)) {

					Messageid = clientforexchange_output1.appendMessage(Folderuri, message, true);
					foldermessagecount++;
					count_destination++;
				}
			} else {
				Messageid = clientforexchange_output1.appendMessage(Folderuri, message, true);
				foldermessagecount++;
				count_destination++;

			}
		}
		return Messageid;
	}

	void mailmbox(MailMessage message, Date Receiveddate, MboxrdStorageWriter wr) {

		System.out.println("this is mail box :" + count_destination);

		if (chckbxRemoveDuplicacy.isSelected()) {

			String input = duplicacymail(message);

			if (!listduplicacy.contains(input)) {
				System.out.println("Not a duplicate message");
				listduplicacy.add(input);

				if (chckbx_Mail_Filter.isSelected()) {
					if (Receiveddate.after(mailfilterstartdate) && Receiveddate.before(mailfilterenddate)) {
						wr.writeMessage(message);
						count_destination++;
						foldermessagecount++;
					} else if (Receiveddate.equals(mailfilterstartdate) || Receiveddate.equals(mailfilterenddate)) {
						wr.writeMessage(message);
						count_destination++;
						foldermessagecount++;
					}
				} else {
					wr.writeMessage(message);
					count_destination++;
					foldermessagecount++;
				}
			}
		} else {
			if (chckbx_Mail_Filter.isSelected()) {
				if (Receiveddate.after(mailfilterstartdate) && Receiveddate.before(mailfilterenddate)) {
					wr.writeMessage(message);
					count_destination++;
					foldermessagecount++;
				} else if (Receiveddate.equals(mailfilterstartdate) || Receiveddate.equals(mailfilterenddate)) {
					wr.writeMessage(message);
					count_destination++;
					foldermessagecount++;
				}
			} else {
				wr.writeMessage(message);
				count_destination++;
				foldermessagecount++;
			}
		}

	}

	void mailcsv(MailMessage message, Date Receiveddate, CSVWriter writer) {

		if (chckbxRemoveDuplicacy.isSelected()) {

			String input = duplicacymail(message);

			if (!listduplicacy.contains(input)) {
				System.out.println("Not a duplicate message");
				listduplicacy.add(input);

				if (chckbx_Mail_Filter.isSelected()) {
					if (Receiveddate.after(mailfilterstartdate) && Receiveddate.before(mailfilterenddate)) {
						Mailmess_CSV(message, writer);

					} else if (Receiveddate.equals(mailfilterstartdate) || Receiveddate.equals(mailfilterenddate)) {
						Mailmess_CSV(message, writer);

					}
				} else {
					Mailmess_CSV(message, writer);

				}
			}
		} else {
			if (chckbx_Mail_Filter.isSelected()) {
				if (Receiveddate.after(mailfilterstartdate) && Receiveddate.before(mailfilterenddate)) {
					Mailmess_CSV(message, writer);

				} else if (Receiveddate.equals(mailfilterstartdate) || Receiveddate.equals(mailfilterenddate)) {
					Mailmess_CSV(message, writer);

				}
			} else {
				Mailmess_CSV(message, writer);

			}
		}

	}

	String mailexchange(MailMessage message, Date Receiveddate, IEWSClient clientforexchange_output1, String Folderuri)
			throws Exception {
		String Messageid = "";
		if (chckbxRemoveDuplicacy.isSelected()) {

			String input = duplicacymail(message);

			if (!listduplicacy.contains(input)) {
				System.out.println("Not a duplicate message");
				listduplicacy.add(input);

				if (chckbx_Mail_Filter.isSelected()) {
					if (Receiveddate.after(mailfilterstartdate) && Receiveddate.before(mailfilterenddate)) {
						Messageid = clientforexchange_output1.appendMessage(Folderuri, message);

						count_destination++;

					} else if (Receiveddate.equals(mailfilterstartdate) || Receiveddate.equals(mailfilterenddate)) {
						Messageid = clientforexchange_output1.appendMessage(Folderuri, message);

						count_destination++;

					}
				} else {

					Messageid = clientforexchange_output1.appendMessage(Folderuri, message);

					count_destination++;
				}
			}
		} else {
			if (chckbx_Mail_Filter.isSelected()) {
				if (Receiveddate.after(mailfilterstartdate) && Receiveddate.before(mailfilterenddate)) {
					Messageid = clientforexchange_output1.appendMessage(Folderuri, message);
					;

					count_destination++;

				} else if (Receiveddate.equals(mailfilterstartdate) || Receiveddate.equals(mailfilterenddate)) {

					Messageid = clientforexchange_output1.appendMessage(Folderuri, message);

					count_destination++;
				}
			} else {
				Messageid = clientforexchange_output1.appendMessage(Folderuri, message);

				count_destination++;

			}
		}
		return Messageid;
	}

	String mailimap(MailMessage message, Date Receiveddate, String path) throws Exception {
		String Messageid = "";
		if (chckbxRemoveDuplicacy.isSelected()) {

			String input = duplicacymail(message);

			if (!listduplicacy.contains(input)) {
				System.out.println("Not a duplicate message");
				listduplicacy.add(input);

				if (chckbx_Mail_Filter.isSelected()) {
					if (Receiveddate.after(mailfilterstartdate) && Receiveddate.before(mailfilterenddate)) {
						Messageid = clientforimap_output.appendMessage(iconnforimap_output, path, message);
						foldermessagecount++;
						count_destination++;

					} else if (Receiveddate.equals(mailfilterstartdate) || Receiveddate.equals(mailfilterenddate)) {
						Messageid = clientforimap_output.appendMessage(iconnforimap_output, path, message);
						foldermessagecount++;
						count_destination++;

					}
				} else {

					Messageid = clientforimap_output.appendMessage(iconnforimap_output, path, message);
					foldermessagecount++;
					count_destination++;
				}
			}
		} else {
			if (chckbx_Mail_Filter.isSelected()) {
				if (Receiveddate.after(mailfilterstartdate) && Receiveddate.before(mailfilterenddate)) {
					Messageid = clientforimap_output.appendMessage(iconnforimap_output, path, message);
					foldermessagecount++;
					count_destination++;

				} else if (Receiveddate.equals(mailfilterstartdate) || Receiveddate.equals(mailfilterenddate)) {

					Messageid = clientforimap_output.appendMessage(iconnforimap_output, path, message);
					foldermessagecount++;
					count_destination++;
				}
			} else {
				Messageid = clientforimap_output.appendMessage(iconnforimap_output, path, message);

				count_destination++;

			}
		}
		return Messageid;
	}

	String duplicacymapi(MapiMessage msg) {
		String frm;
		try {
			frm = msg.getSenderEmailAddress();
		} catch (Exception ep) {
			frm = "";
		}
		if (frm != null) {

		} else {
			frm = "";
		}

		String to;
		try {
			to = msg.getDisplayTo();
		} catch (Exception e) {
			to = "";
		}
		if (to != null) {

		} else {
			to = "";
		}
		String sub;
		try {
			sub = msg.getSubject();
		} catch (Exception ep) {
			sub = "";
		}

		if (sub != null) {

		} else {
			sub = "";
		}
		String body;
		try {
			body = msg.getBody();
		} catch (Exception ep) {
			body = "";
		}

		if (body != null) {
			try {
				body = body.substring(0, 40);
			} catch (Exception e) {

			}

		} else {
			body = "";
		}

		String bcc;
		try {
			bcc = msg.getDisplayBcc();
		} catch (Exception ep) {
			bcc = "";
		}

		if (bcc != null) {

		} else {
			bcc = "";
		}

		Date d;
		String dstr;
		try {
			d = msg.getDeliveryTime();
			dstr = d.toString();
		} catch (Exception ep) {
			dstr = "";
		}

		String input = sub + frm + body + dstr + to + bcc;

		MessageDigest md = null;
		try {
			md = MessageDigest.getInstance("MD5");
		} catch (NoSuchAlgorithmException e) {

			e.printStackTrace();
		}
		byte[] messageDigest = md.digest(input.getBytes());

		BigInteger no = new BigInteger(1, messageDigest);
		String hashtext = no.toString(16);
		while (hashtext.length() < 32) {
			hashtext = "0" + hashtext;
		}
		return hashtext;

	}

	String duplicacymapiCal(MapiCalendar calender) {

		String checkBoxCalLoc = null;
		String checkBoxCompanycal = null;
		String checkBoxCalSub = null;
		String chckbxStartdate = null;
		String chckbxEnddate = null;
		String checkBoxCalCat = null;
		MessageDigest md = null;

		try {
			checkBoxCalSub = calender.getSubject();
		} catch (Exception ep) {
			checkBoxCalSub = "";
		}

		if (checkBoxCalSub != null) {

		} else {
			checkBoxCalSub = "";
		}

		try {

			chckbxStartdate = calender.getStartDate().toString();
		} catch (Exception ep) {
			chckbxStartdate = "";
		}

		if (chckbxStartdate != null) {

		} else {
			chckbxStartdate = "";
		}

		try {
			chckbxEnddate = calender.getEndDate().toString();
		} catch (Exception ep) {
			chckbxStartdate = "";
		}
		if (chckbxEnddate != null) {

		} else {
			chckbxEnddate = "";
		}

		String input = checkBoxCalSub + chckbxStartdate + chckbxEnddate + checkBoxCalLoc + checkBoxCompanycal
				+ checkBoxCalCat;
		try {
			md = MessageDigest.getInstance("MD5");
		} catch (NoSuchAlgorithmException e) {

			e.printStackTrace();
		}
		byte[] messageDigest = md.digest(input.getBytes());

		BigInteger no = new BigInteger(1, messageDigest);
		String hashtext = no.toString(16);
		while (hashtext.length() < 32) {
			hashtext = "0" + hashtext;
		}
		return hashtext;
	}

	String duplicacymapiTask(MapiTask task) {

		String chckbxtaskenddate = null;
		String checkBoxtaskibilling = null;
		String chckbxtaskCategories_1 = null;
		String chckbxtaskCompanies = null;
		String chckbxtaskStatus = null;
		String checkBoxtasksub = null;
		String checkBox_taskbody = null;
		String checkBox_taskstartdate = null;

		MessageDigest md = null;

		try {

			checkBoxtaskibilling = task.getBilling();
		} catch (Exception ep) {
			checkBoxtaskibilling = "";
		}
		if (checkBoxtaskibilling != null) {
			System.out.println(checkBoxtaskibilling);
		} else {
			checkBoxtaskibilling = "";
		}

		try {

			int status = task.getStatus();

			chckbxtaskStatus = String.valueOf(status);

		} catch (Exception ep) {
			chckbxtaskStatus = "";
		}

		if (chckbxtaskStatus != null) {

		} else {
			chckbxtaskStatus = "";
		}

		try {
			checkBoxtasksub = task.getSubject();
		} catch (Exception ep) {
			checkBoxtasksub = "";
		}

		if (checkBoxtasksub != null) {

		} else {
			checkBoxtasksub = "";
		}

		try {

			checkBox_taskstartdate = task.getStartDate().toString();
		} catch (Exception ep) {
			checkBox_taskstartdate = "";
		}

		if (checkBox_taskstartdate != null) {

		} else {
			checkBox_taskstartdate = "";
		}

		try {
			chckbxtaskenddate = task.getDueDate().toString();
		} catch (Exception ep) {
			chckbxtaskenddate = "";
		}
		if (chckbxtaskenddate != null) {

		} else {
			chckbxtaskenddate = "";
		}

		try {

			String[] st = task.getCategories();
			chckbxtaskCategories_1 = st[0].toString();
		} catch (Exception ep) {
			chckbxtaskCategories_1 = "";
		}
		if (chckbxtaskCategories_1 != null) {

		} else {
			chckbxtaskCategories_1 = "";
		}

		try {

			checkBox_taskbody = task.getBody();
		} catch (Exception ep) {
			checkBox_taskbody = "";
		}
		if (checkBox_taskbody != null) {

		} else {
			checkBox_taskbody = "";
		}

		try {

			String[] st = task.getCategories();
			chckbxtaskCompanies = st[0].toString();
		} catch (Exception ep) {
			chckbxtaskCompanies = "";
		}
		if (chckbxtaskCompanies != null) {

		} else {
			chckbxtaskCompanies = "";
		}

		String input = chckbxtaskCompanies + checkBox_taskbody + chckbxtaskCategories_1 + checkBox_taskstartdate
				+ chckbxtaskenddate + checkBoxtasksub + chckbxtaskStatus + checkBoxtaskibilling;
		try {
			md = MessageDigest.getInstance("MD5");
		} catch (NoSuchAlgorithmException e) {

			e.printStackTrace();
		}
		byte[] messageDigest = md.digest(input.getBytes());
		BigInteger no = new BigInteger(1, messageDigest);
		String hashtext = no.toString(16);
		while (hashtext.length() < 32) {
			hashtext = "0" + hashtext;
		}

		return hashtext;
	}

	public String removefolder(String path) {

		String[] str1;
		if (OS.contains("windows")) {
			str1 = path.split("\\\\");
		} else {
			str1 = path.split(File.separator);
		}

		for (int j = 0; j < str1.length; j++) {

			if (j == 0) {
				path = str1[j];
			} else if (!(j == str1.length - 1)) {

				path = path + File.separator + str1[j];
			}
		}
		return path;
	}

	public String removefoldergmail(String path) {
		String[] str1 = path.split("/");

		for (int j = 0; j < str1.length; j++) {

			if (j == 0) {
				path = str1[j];
			} else if (j == str1.length - 1) {
			} else {
				path = path + "/" + str1[j];
			}
		}
		return path;
	}

	void testemldd(File fol, CustomTreeNode mainnode) {

		File[] files = fol.listFiles();

		CustomTreeNode child = new CustomTreeNode("<html><b>" + fol.getName().replace("]", "").trim());
		mainnode.add(child);
		child.filepath = fol.getAbsolutePath();
		int messagesize = files.length;
		foldercountcheck++;
		for (int j = 0; j < messagesize; j++) {

			if (files[j].isDirectory()) {

				testemldd(files[j], child);

			} else {

			}

		}
	}

	void addemldd(File fol) {

		File[] files = fol.listFiles();
		try {

			int messagesize = files.length;

			for (int j = 0; j < messagesize; j++) {

				if (files[j].isDirectory()) {

					addemldd(files[j]);

				} else {

					if (fileoptionm.equalsIgnoreCase("EML File (.eml)")) {
						if (getFileExtension(files[j]).equalsIgnoreCase("eml")) {
							hm.put(files[j].getAbsolutePath(), null);
						}
					} else if (fileoptionm.equalsIgnoreCase("EMLX File (.emlx)")) {
						if (getFileExtension(files[j]).equalsIgnoreCase("emlx")) {
							hm.put(files[j].getAbsolutePath(), null);
						}
					} else if (fileoptionm.equalsIgnoreCase("Message File (.msg)")) {
						if (getFileExtension(files[j]).equalsIgnoreCase("msg")) {
							hm.put(files[j].getAbsolutePath(), null);
						}
					} else if (fileoptionm.equalsIgnoreCase("Maildir")) {

						hm.put(files[j].getAbsolutePath(), null);

					}

				}

			}
		} catch (Exception e) {
			if (fol.isFile()) {
				hm.put(fol.getAbsolutePath(), null);
			}
		}
	}

	int convertMillisintohour(int Millis) {

		int i = Millis / (1000 * 60 * 60);
		return i;
	}

	int convertMillisintomin(int Millis) {
		int i = (Millis % (1000 * 60 * 60)) / (1000 * 60);
		return i;
	}

	String contactname(MapiContact ap) {
		String s = "";
		try {
			s = getRidOfIllegalFileNameCharacters(ap.getSubject());
		} catch (Exception e) {
			s = "Contact";
		}
		s = getRidOfIllegalFileNameCharacters(s);
		return s;

	}

	String duplicacymapiContact(MapiContact Contact) {
		String checkBoxsub = null;
		String chckbxFullName = null;
		String chckbxEmailAddress = null;
		String chckbxMobilenumber = null;
		String chckbxJobtitle = null;
		String chckbxLocation = null;
		String chckbxCompany = null;
		String chckbxCategories = null;
		String chckbxBirthday = null;
		MessageDigest md = null;

		try {
			new MapiContactNamePropertySet();
			chckbxFullName = Contact.getNameInfo().getDisplayName().replaceAll("[\\[\\]]", "");
		} catch (Exception ep) {
			chckbxFullName = "";
		}
		if (chckbxFullName != null) {
			System.out.println(chckbxFullName);
		} else {
			chckbxFullName = "";
		}

		try {

			Contact.getElectronicAddresses().getDefaultEmailAddress();
			chckbxEmailAddress = MapiContactElectronicAddress.to_MapiContactElectronicAddress(
					Contact.getElectronicAddresses().getDefaultEmailAddress().toString()).toString();

		} catch (Exception ep) {
			chckbxEmailAddress = "";
		}

		if (chckbxEmailAddress != null) {

		} else {
			chckbxEmailAddress = "";
		}

		try {
			checkBoxsub = Contact.getSubject();
		} catch (Exception ep) {
			checkBoxsub = "";
		}

		if (checkBoxsub != null) {

		} else {
			checkBoxsub = "";
		}

		try {
			chckbxMobilenumber = Contact.getTelephones().getMobileTelephoneNumber().toString();
		} catch (Exception e) {
			chckbxMobilenumber = "";
		}
		if (chckbxMobilenumber != null) {

		} else {
			chckbxMobilenumber = "";
		}

		try {
			chckbxJobtitle = Contact.getProfessionalInfo().getTitle();
		} catch (Exception ep) {
			chckbxJobtitle = "";
		}

		if (chckbxJobtitle != null) {

		} else {
			chckbxJobtitle = "";
		}

		try {
			chckbxLocation = Contact.getPersonalInfo().getLocation();
		} catch (Exception ep) {
			chckbxLocation = "";
		}
		if (chckbxLocation != null) {

		} else {
			chckbxLocation = "";
		}

		try {

			chckbxJobtitle = Contact.getProfessionalInfo().getCompanyName();
		} catch (Exception ep) {
			chckbxCompany = "";
		}
		if (chckbxCompany != null) {

		} else {
			chckbxCompany = "";
		}

		try {
			chckbxCategories = Contact.getCategories().toString();
		} catch (Exception ep) {
			chckbxCategories = "";
		}
		if (chckbxCategories != null) {

		} else {
			chckbxCategories = "";
		}

		try {
			chckbxBirthday = Contact.getEvents().getBirthday().toString();
		} catch (Exception ep) {
			chckbxBirthday = "";
		}
		if (chckbxBirthday != null) {

		} else {
			chckbxBirthday = "";
		}

		String input = chckbxBirthday + chckbxCategories + chckbxCompany + chckbxLocation + chckbxJobtitle
				+ chckbxJobtitle + chckbxEmailAddress + chckbxFullName + checkBoxsub;
		try {
			md = MessageDigest.getInstance("MD5");
		} catch (NoSuchAlgorithmException e) {

			e.printStackTrace();
		}
		byte[] messageDigest = md.digest(input.getBytes());

		BigInteger no = new BigInteger(1, messageDigest);
		String hashtext = no.toString(16);
		while (hashtext.length() < 32) {
			hashtext = "0" + hashtext;
		}
		return hashtext;
	}

	private String bytes2String(long sizeInBytes) {
		NumberFormat nf = new DecimalFormat();
		nf.setMaximumFractionDigits(2);

		try {
			if (sizeInBytes < SPACE_KB) {
				return nf.format(sizeInBytes) + " Byte(s)";
			} else if (sizeInBytes < SPACE_MB) {
				return nf.format(sizeInBytes / SPACE_KB) + " KB";
			} else if (sizeInBytes < SPACE_GB) {
				return nf.format(sizeInBytes / SPACE_MB) + " MB";
			} else if (sizeInBytes < SPACE_TB) {
				return nf.format(sizeInBytes / SPACE_GB) + " GB";
			} else {
				return nf.format(sizeInBytes / SPACE_TB) + " TB";
			}
		} catch (Exception e) {
			return sizeInBytes + " Byte(s)";
		}
	}
}
